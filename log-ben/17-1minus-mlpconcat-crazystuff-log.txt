Threshold: 0.1
Enable layer loss: False
MAX LEARNING RATE: 0.0006
Experiment name: 17-1minus-mlpconcat-crazystuff
MLPSCALE: 8
Experiment description: Transformer, max LR 6e-4
Setting:
========
self.compiler = BenCompilerNoOp(config)
self.execute = BenExecute(config) 
========
y = self.ln_1(x)
attn, xWeights, scores = self.attn(y, y, print_weights=print_weights)
program = self.compiler(y)
machineOutput = self.execute(program, attn)
x = xWeights * x + (1-xWeights)*machineOutput
======== 
VALUEMATRIX=True
REUSE_WEIGHTS=True
MLP_SCALE=8
MEASURE_SELF_CONTRIBUTION=False
NEW_ALL_LAYER_LOSS=False
MATRIX_NUM_PARAMS=4096
MLPMAT_INNER_SIZE=64
DELETE_SELF_CONTRIBUTION=False
EXTRACT_SELF_CONTRIBUTION=False
ATTENTION_SINK=True
IDENTITY_LOSS=True

Warmup steps: 1000
total desired batch size: 131072
Mini-batch size: 8*1024
=> calculated gradient accumulation steps: 16
=> calculated gradient accumulation steps: 16
Training max steps: 300001Num GPUs: 1{'block_size': 1024, 'vocab_size': 50304, 'n_layer': 48, 'n_head': 12, 'n_embd': 768}
num decayed parameter tensors: 6, with 55,934,976 parameters
num non-decayed parameter tensors: 6, with 9,984 parameters
@ 0 train 10.9947 , allloss: 18.9247, dt: 9687.74ms, fracRes: 0.0064, norm(attn): 0.0217, norm(output): 0.0505, norm(x): 0.0515, norm(y): 0.9987, norm:56.6427, tok/sec: 13529.68, flops:10.86, batch-reuse:1
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4785, 0.5234, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2695, 0.3574, 0.3730, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3086, 0.2637, 0.2285, 0.2002, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1816, 0.1455, 0.2793, 0.2197, 0.1738, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1416, 0.1562, 0.2383, 0.1689, 0.1738, 0.1216, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1465, 0.1123, 0.1196, 0.1670, 0.1582, 0.1885, 0.1089, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1152, 0.1094, 0.1328, 0.1807, 0.1157, 0.0898, 0.1172, 0.1396, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0942, 0.1157, 0.1367, 0.1416, 0.1040, 0.0781, 0.1055, 0.1279, 0.0957, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1113, 0.1021, 0.1084, 0.1104, 0.1602, 0.0737, 0.0977, 0.0664, 0.0898, 0.0801, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0850, 0.0493, 0.0703, 0.0574, 0.0869, 0.1074, 0.0967, 0.1191, 0.0903, 0.1084, 0.1289, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0757, 0.0991, 0.0747, 0.0679, 0.0684, 0.0664, 0.0625, 0.0718, 0.0845, 0.1060, 0.1216, 0.1021, 0.0000, 0.0000, 0.0000],
        [0.0762, 0.0786, 0.0449, 0.0786, 0.0645, 0.0566, 0.0723, 0.0757, 0.0972, 0.0889, 0.0542, 0.0874, 0.1250, 0.0000, 0.0000],
        [0.0630, 0.0569, 0.0693, 0.0947, 0.0569, 0.0601, 0.1167, 0.0801, 0.0884, 0.0723, 0.0747, 0.0437, 0.0403, 0.0835, 0.0000],
        [0.0713, 0.0752, 0.0889, 0.0579, 0.0535, 0.0586, 0.0703, 0.0752, 0.0830, 0.0752, 0.0513, 0.0588, 0.0454, 0.0688, 0.0674]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[     0.0039,     -0.0290,     -0.0386,  ...,      0.0198,      0.0058,      0.0222],
        [    -0.0303,     -0.0072,      0.0225,  ...,     -0.0226,     -0.0300,      0.0130],
        [     0.0153,      0.0275,      0.0047,  ...,      0.0103,      0.0214,      0.0108],
        ...,
        [    -0.0138,     -0.0270,     -0.0023,  ...,     -0.0163,      0.0144,      0.0082],
        [    -0.0159,     -0.0061,      0.0204,  ...,     -0.0137,      0.0222,      0.0116],
        [    -0.0108,     -0.0002,     -0.0270,  ...,     -0.0000,     -0.0261,     -0.0017]], device='cuda:0', requires_grad=True)
K: tensor([ 0.0206,  0.5234,  0.9180,  0.0182, -0.0175,  0.2432,  0.1455,  0.4668, -0.5156, -0.9648, -0.1816, -0.0374, -0.0542, -0.3164,  0.3516,  0.1504, -0.6211, -0.5781, -0.7305, -1.1172,  1.3203,  0.3984, -0.2500,  0.5352, -0.3379,  0.0410,  0.5195,  0.4375, -0.1045,  0.5117,  0.3906, -0.8398,
        -0.0884,  0.7852,  0.2471, -1.1797, -0.1924, -0.3398,  0.4199,  0.0525, -0.8867,  0.6328,  0.7969, -0.2715,  0.4004, -0.6562, -0.5078,  0.8203, -0.2119, -1.0547,  0.4766,  0.5898, -0.6133, -0.3438,  0.4004,  0.6328, -1.0312,  0.0894, -0.5586, -0.2656, -0.2891,  1.1172,  0.0693,  0.5000],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0048, -0.0327,  0.0145,  ...,  0.0298,  0.0177,  0.0508],
        [ 0.0032, -0.0013,  0.0223,  ...,  0.0022, -0.0033,  0.0043],
        [-0.0223,  0.0343, -0.0283,  ...,  0.0198, -0.0064,  0.0007],
        ...,
        [-0.0024, -0.0116,  0.0158,  ..., -0.0105,  0.0101, -0.0472],
        [-0.0235,  0.0387,  0.0119,  ..., -0.0035, -0.0036,  0.0336],
        [ 0.0129, -0.0374, -0.0096,  ..., -0.0381,  0.0042, -0.0605]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.0312,  0.3809, -0.7852, -0.4961, -0.0325, -0.1973,  0.0471, -0.3613, -0.3477, -0.2891,  0.3047,  0.5586, -0.7305,  1.0781, -0.6133, -0.6133,  0.2578,  0.9102, -1.5625,  0.2285,  0.7734, -0.6211, -1.0156, -0.1338,  0.2734, -0.4414, -0.6641,  1.0000,  0.5195, -0.5352, -0.7344,  0.4980,
         0.0669, -0.3750, -0.3145, -0.4082, -0.2578,  0.3672,  0.0762, -0.1426,  0.4277, -0.0171,  1.2578, -0.1875,  0.4688,  0.0208,  0.3535,  0.3828, -0.3594,  0.0442,  0.0280, -0.5859,  0.3730,  0.2520,  0.0063,  0.1436, -0.0106, -0.3164,  0.9961,  0.0608,  0.1953,  0.1738, -0.1338,  0.6914],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0898, -0.2393,  0.1357,  0.1553,  0.0859,  0.2451,  0.2461, -0.1187, -0.2256,  0.5625, -0.2930,  0.0967, -0.1523, -0.1543],
        [ 0.0000,  0.2812,  0.3242, -0.0264, -0.1611,  0.1631,  0.1182,  0.2080, -0.1216, -0.1230, -0.1943, -0.0309,  0.0295, -0.0762, -0.0820],
        [ 0.0000, -0.1582, -0.2969, -0.4336,  0.0674, -0.0153,  0.3887, -0.0508, -0.3535, -0.6484, -0.4473, -0.5430,  0.0566, -0.1865, -0.5898],
        [ 0.0000, -0.2227,  0.4297,  0.1885, -0.0442,  0.4395, -0.1494, -0.1523,  0.4961,  0.0505,  0.1982,  0.3887,  0.1260, -0.0996,  0.0520],
        [ 0.0000,  0.0938,  0.5195,  0.1729,  0.2012, -0.1543,  0.3145, -0.0962, -0.2100, -0.0056,  0.0491,  0.1396,  0.1064, -0.3262, -0.0092],
        [ 0.0000, -0.2695, -0.2080,  0.1250,  0.0718,  0.2471, -0.3008,  0.1211, -0.0520,  0.4297, -0.1426,  0.1074, -0.2100, -0.0160,  0.6211],
        [ 0.0000, -0.0522,  0.1406,  0.4492,  0.0051, -0.2461,  0.0152,  0.1895,  0.1719,  0.0806, -0.2402,  0.0439, -0.2969,  0.5742, -0.2754],
        [ 0.0000,  0.2080,  0.3770,  0.4102,  0.0996, -0.1885,  0.1157,  0.3066,  0.0154,  0.2129,  0.0796,  0.2051, -0.2949,  0.0952,  0.5625],
        [ 0.0000, -0.0835, -0.0262, -0.0063,  0.3672, -0.4082, -0.1289, -0.5156, -0.2129, -0.3301, -0.0962, -0.2100,  0.5820, -0.3848, -0.3945],
        [ 0.0000, -0.5469, -0.1924, -0.3965,  0.0209,  0.2305,  0.1260,  0.3340,  0.0569,  0.2422,  0.4180, -0.0957, -0.1758,  0.2129,  0.6289],
        [ 0.0000,  0.2676, -0.0176, -0.1147, -0.1045, -0.1367, -0.1934, -0.0544,  0.1040,  0.3340,  0.4707,  0.2949, -0.5430, -0.0811, -0.6445],
        [ 0.0000,  0.0287, -0.5312,  0.0297, -0.1689, -0.2969, -0.0527, -0.0100,  0.2422,  0.1523, -0.3438,  0.1348,  0.4922,  0.2471, -0.0364],
        [ 0.0000, -0.0991,  0.0981,  0.4121, -0.0996, -0.0425,  0.6172,  0.2412,  0.3438,  0.1377,  0.1758, -0.3652, -0.4434,  0.2871,  0.1133],
        [ 0.0000,  0.0486,  0.2168, -0.2100, -0.2910, -0.1982, -0.0143,  0.0486,  0.1484,  0.0503, -0.3301, -0.1914, -0.4512, -0.0356, -0.0598]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4824],
        [0.3281],
        [0.2450],
        [0.1851],
        [0.1698],
        [0.1425],
        [0.1281],
        [0.1058],
        [0.0967],
        [0.0878],
        [0.0805],
        [0.0760],
        [0.0688],
        [0.0685]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3945, 0.6055, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3047, 0.3809, 0.3145, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2598, 0.2266, 0.2715, 0.2422, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1621, 0.2451, 0.1641, 0.1758, 0.2520, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1226, 0.1904, 0.1089, 0.1562, 0.1963, 0.2256, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1357, 0.2070, 0.1543, 0.1396, 0.1338, 0.0942, 0.1348, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1318, 0.1167, 0.1079, 0.1143, 0.1367, 0.1338, 0.1050, 0.1543, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1108, 0.0698, 0.1104, 0.1484, 0.0942, 0.1377, 0.0864, 0.1299, 0.1113, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1187, 0.0991, 0.1177, 0.0679, 0.1050, 0.1406, 0.1094, 0.0781, 0.0815, 0.0815, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0889, 0.0791, 0.0830, 0.0840, 0.0737, 0.1270, 0.0835, 0.0996, 0.0991, 0.0603, 0.1226, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0874, 0.0574, 0.1104, 0.0654, 0.0542, 0.1069, 0.0942, 0.0747, 0.0608, 0.0840, 0.0767, 0.1279, 0.0000, 0.0000, 0.0000],
        [0.0723, 0.0947, 0.0513, 0.0620, 0.0962, 0.0908, 0.0747, 0.0781, 0.1050, 0.0757, 0.0649, 0.0645, 0.0698, 0.0000, 0.0000],
        [0.0791, 0.0542, 0.0569, 0.0801, 0.0801, 0.0913, 0.0688, 0.0708, 0.0520, 0.0649, 0.0972, 0.0586, 0.0942, 0.0510, 0.0000],
        [0.0669, 0.0752, 0.0559, 0.0569, 0.0496, 0.0767, 0.0762, 0.0383, 0.0330, 0.1270, 0.0747, 0.0496, 0.0579, 0.0908, 0.0718]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[     0.0039,     -0.0290,     -0.0386,  ...,      0.0198,      0.0058,      0.0222],
        [    -0.0303,     -0.0072,      0.0225,  ...,     -0.0226,     -0.0300,      0.0130],
        [     0.0153,      0.0275,      0.0047,  ...,      0.0103,      0.0214,      0.0108],
        ...,
        [    -0.0138,     -0.0270,     -0.0023,  ...,     -0.0163,      0.0144,      0.0082],
        [    -0.0159,     -0.0061,      0.0204,  ...,     -0.0137,      0.0222,      0.0116],
        [    -0.0108,     -0.0002,     -0.0270,  ...,     -0.0000,     -0.0261,     -0.0017]], device='cuda:0', requires_grad=True)
K: tensor([ 0.0427, -0.7422,  0.0771,  0.5742, -1.3281, -1.1406,  0.3262,  0.2812, -0.3301, -1.1406,  0.2988,  0.1484, -0.1167,  0.9844, -0.0136, -0.7461,  0.4258, -0.8711, -0.9492, -0.9844, -0.2676, -0.2236,  0.0830,  0.1729,  0.2031, -0.0845,  0.1611,  0.3613,  0.0201,  0.4082,  0.1738, -0.0386,
         0.1553, -0.4453,  1.0391, -0.2812,  0.0150,  0.8281, -0.7188, -0.5469, -1.2422, -0.3574, -0.3379, -0.5977,  0.0059,  0.1660, -0.0061, -0.1235, -0.2324, -0.7266,  0.0762,  1.5234,  1.1797, -0.1187,  0.1553,  1.6953, -0.4238,  0.4766,  0.2119,  0.2441, -0.4297,  0.3770,  0.3203,  0.9180],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0048, -0.0327,  0.0145,  ...,  0.0298,  0.0177,  0.0508],
        [ 0.0032, -0.0013,  0.0223,  ...,  0.0022, -0.0033,  0.0043],
        [-0.0223,  0.0343, -0.0283,  ...,  0.0198, -0.0064,  0.0007],
        ...,
        [-0.0024, -0.0116,  0.0158,  ..., -0.0105,  0.0101, -0.0472],
        [-0.0235,  0.0387,  0.0119,  ..., -0.0035, -0.0036,  0.0336],
        [ 0.0129, -0.0374, -0.0096,  ..., -0.0381,  0.0042, -0.0605]], device='cuda:0', requires_grad=True)
Q: tensor([-0.0923,  0.0840,  0.2852,  0.3242, -0.6289,  0.4746,  0.0854,  0.4570, -0.2139, -1.1016,  0.3867, -0.2500, -0.1680,  0.6094, -0.3320,  0.7695, -0.6992,  0.8438,  0.5391, -0.1719, -0.5117, -0.7305,  0.2227, -0.3125, -0.8047, -0.5898, -0.1006,  0.2480,  0.1074,  0.2490,  0.3965,  0.7383,
         0.2812,  0.2734, -0.2168,  0.5586, -0.3125,  1.4453, -0.2578,  0.4492, -0.4199,  0.8945,  0.9375, -0.0596, -0.8750,  0.1543,  0.0747,  0.1992, -0.4707,  0.7305,  0.3770, -0.2471,  0.1641,  0.1553, -1.2344, -0.1377,  0.2988,  0.3848,  0.7188,  0.3359, -0.0233,  0.8477, -0.5859, -0.5039],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.4297,  0.4355, -0.1348,  0.1914,  0.3906, -0.0659, -0.3848,  0.4336, -0.4609, -0.1021,  0.6172,  0.3125,  0.3965, -0.1426],
        [ 0.0000,  0.2217,  0.0304,  0.1069, -0.3887,  0.7734, -0.2852, -0.3535, -0.0183,  0.2119, -0.1572,  0.2080,  0.2393,  0.3828,  0.2285],
        [ 0.0000, -0.1396,  0.0425, -0.0718,  0.0544, -0.4219,  0.1445, -0.0039, -0.7422,  0.3203,  0.3164, -0.0908, -0.1416, -0.3379, -0.0525],
        [ 0.0000,  0.4102,  0.0109,  0.0806,  0.4434,  0.0041, -0.4473, -0.0898,  0.0454,  0.0796,  0.0635, -0.1045,  0.0835,  0.1367, -0.0840],
        [ 0.0000,  0.4395, -0.1157,  0.2441,  0.4707,  0.6094,  0.2354,  0.1484,  0.3848,  0.4766, -0.4629,  0.0112,  0.5352,  0.1963,  0.2852],
        [ 0.0000,  0.4199,  0.1226,  0.0248, -0.0150, -0.3652, -0.0100, -0.1089,  0.2773,  0.4824, -0.5000, -0.0109, -0.0361, -0.1514, -0.3340],
        [ 0.0000, -0.1177, -0.1953, -0.1396,  0.0381,  0.0160, -0.2246,  0.1621, -0.3359, -0.2031, -0.2637, -0.2910,  0.1230, -0.4609, -0.3535],
        [ 0.0000, -0.4590, -0.0023,  0.2949, -0.1631,  0.2188, -0.2480,  0.1621,  0.0064, -0.4297, -0.1709,  0.2734,  0.0559,  0.1211, -0.2373],
        [ 0.0000, -0.1777, -0.0066, -0.5586, -0.1216,  0.1738, -0.0825, -0.4160, -0.3730, -0.3770, -0.1055, -0.0393, -0.1758, -0.2988, -0.7383],
        [ 0.0000, -0.1123, -0.0693, -0.0547, -0.1865,  0.3555, -0.0630,  0.1138,  0.1128, -0.3848,  0.3223,  0.3242,  0.0388,  0.0278,  0.3457],
        [ 0.0000, -0.4199,  0.2354, -0.2852, -0.4746,  0.2061,  0.0786, -0.1572, -0.3613, -0.0393, -0.1299,  0.3848,  0.0898, -0.2871,  0.0630],
        [ 0.0000,  0.2695, -0.3457, -0.1553,  0.2852,  0.2256,  0.0327,  0.0781,  0.3711,  0.0425, -0.1069, -0.1138, -0.0376, -0.3828, -0.2910],
        [ 0.0000, -0.3770, -0.3281,  0.0142,  0.0093,  0.1445, -0.1396, -0.1079, -0.4199, -0.1943,  0.2070, -0.3008,  0.1748, -0.4375, -0.6562],
        [ 0.0000,  0.1206, -0.1777, -0.1582, -0.2988,  0.1367,  0.1348, -0.5547, -0.7031,  0.6406,  0.1138, -0.2949, -0.1406,  0.3086,  0.0723]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4875],
        [0.3392],
        [0.2557],
        [0.1938],
        [0.1697],
        [0.1408],
        [0.1200],
        [0.1077],
        [0.1005],
        [0.0855],
        [0.0854],
        [0.0776],
        [0.0716],
        [0.0706]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5000, 0.4980, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3984, 0.2969, 0.3066, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2637, 0.2617, 0.2871, 0.1885, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2188, 0.2715, 0.1934, 0.1377, 0.1797, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1631, 0.1523, 0.2656, 0.1035, 0.1572, 0.1582, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1602, 0.1279, 0.1426, 0.1289, 0.1484, 0.1221, 0.1699, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1348, 0.1445, 0.0918, 0.0566, 0.1729, 0.1250, 0.1416, 0.1328, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1035, 0.0781, 0.1035, 0.1172, 0.0991, 0.1328, 0.1045, 0.1045, 0.1572, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1299, 0.1060, 0.1079, 0.1162, 0.1030, 0.1055, 0.0972, 0.0757, 0.0903, 0.0688, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0708, 0.0898, 0.0762, 0.0679, 0.0718, 0.1367, 0.0767, 0.0767, 0.1030, 0.0884, 0.1416, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1011, 0.0840, 0.1060, 0.0986, 0.0874, 0.0669, 0.0659, 0.0559, 0.1279, 0.0742, 0.0781, 0.0544, 0.0000, 0.0000, 0.0000],
        [0.0894, 0.0491, 0.1138, 0.0679, 0.0703, 0.0588, 0.1045, 0.0598, 0.0820, 0.0378, 0.1299, 0.0776, 0.0601, 0.0000, 0.0000],
        [0.0645, 0.0664, 0.0684, 0.0510, 0.0928, 0.0806, 0.0649, 0.0659, 0.1377, 0.0562, 0.0815, 0.0449, 0.0481, 0.0762, 0.0000],
        [0.0728, 0.0811, 0.0693, 0.0391, 0.0693, 0.0811, 0.0471, 0.0654, 0.0728, 0.0645, 0.0564, 0.0776, 0.0674, 0.0535, 0.0840]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[     0.0039,     -0.0290,     -0.0386,  ...,      0.0198,      0.0058,      0.0222],
        [    -0.0303,     -0.0072,      0.0225,  ...,     -0.0226,     -0.0300,      0.0130],
        [     0.0153,      0.0275,      0.0047,  ...,      0.0103,      0.0214,      0.0108],
        ...,
        [    -0.0138,     -0.0270,     -0.0023,  ...,     -0.0163,      0.0144,      0.0082],
        [    -0.0159,     -0.0061,      0.0204,  ...,     -0.0137,      0.0222,      0.0116],
        [    -0.0108,     -0.0002,     -0.0270,  ...,     -0.0000,     -0.0261,     -0.0017]], device='cuda:0', requires_grad=True)
K: tensor([ 0.4980, -0.4160, -0.4570, -0.3281, -0.6719, -1.3516,  0.3691,  0.6328, -0.3340,  0.0359, -1.0312, -0.6680, -0.6133, -0.0933, -0.5430,  0.4121,  0.4570, -0.1245,  0.2178, -0.0410,  0.0437, -0.2295, -0.4863,  0.4141,  0.0260,  0.3848, -0.5195,  0.3359, -0.9375,  0.3281,  0.9141,  0.5703,
         0.0038, -0.5273,  1.0078, -0.6602,  0.1436,  0.6133,  0.2949,  0.2793,  0.4023, -0.9570,  0.5273,  0.9453, -0.6250,  0.0269, -0.2969,  0.3164,  0.3613,  0.4512, -0.5273, -0.2598,  1.0391,  0.5977, -0.1206,  0.7695, -0.0583, -0.1299, -0.7812,  1.5078,  1.0312,  0.2910,  0.4570, -0.9766],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0048, -0.0327,  0.0145,  ...,  0.0298,  0.0177,  0.0508],
        [ 0.0032, -0.0013,  0.0223,  ...,  0.0022, -0.0033,  0.0043],
        [-0.0223,  0.0343, -0.0283,  ...,  0.0198, -0.0064,  0.0007],
        ...,
        [-0.0024, -0.0116,  0.0158,  ..., -0.0105,  0.0101, -0.0472],
        [-0.0235,  0.0387,  0.0119,  ..., -0.0035, -0.0036,  0.0336],
        [ 0.0129, -0.0374, -0.0096,  ..., -0.0381,  0.0042, -0.0605]], device='cuda:0', requires_grad=True)
Q: tensor([-0.3613,  0.5195, -0.4531, -0.7227, -0.4258,  0.4824,  0.8164,  0.8008, -0.0603, -0.3867,  0.2266, -0.3848,  0.8984, -1.0391,  0.4512,  0.0059,  0.0664,  0.0491,  0.0168, -0.1099,  0.3984,  0.4824,  1.3906,  0.5234,  0.0933,  0.2363, -1.1172,  0.2949, -0.2734, -0.1436,  1.0469, -0.0255,
         0.3516, -0.1650, -0.3750,  0.0198,  0.3496,  0.1768,  0.0854,  0.1006,  0.9414,  1.1328,  0.7578, -0.1768, -1.2422,  0.9219, -0.2617, -0.3516, -0.2969,  0.2285, -0.1943,  0.2061,  0.1245,  0.0038, -0.3047,  0.5586, -0.4004, -0.2969,  0.7812,  0.0698, -0.1709,  0.6992, -0.1118,  0.4551],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -0.0060,      0.2754,      0.1475,      0.3340,      0.0503,      0.0220,      0.2676,      0.3652,      0.2109,     -0.1436,      0.0603,      0.1240,      0.5039,     -0.0593],
        [     0.0000,     -0.2949,     -0.2617,     -0.8516,     -0.1934,     -0.4844,     -0.4609,     -0.7070,     -0.2656,     -0.4355,     -0.1699,     -0.3887,     -0.5352,     -0.4531,     -0.1914],
        [     0.0000,     -0.0096,      0.0820,     -0.3340,      0.0684,     -0.1177,     -0.6484,     -0.2852,      0.2500,      0.0771,     -0.0874,     -0.0659,     -0.2090,      0.0854,      0.4453],
        [     0.0000,      0.2148,     -0.1211,     -0.4590,     -0.1982,     -0.2402,     -0.5352,     -0.5625,     -0.0055,     -0.0187,     -0.3574,     -0.7305,     -0.0432,      0.0031,     -0.2363],
        [     0.0000,     -0.0713,      0.4863,     -0.4590,     -0.0420,     -0.0320,     -0.5469,     -0.4258,      0.2002,     -0.3906,     -0.4199,     -0.5352,     -0.2354,      0.1807,     -0.0781],
        [     0.0000,     -0.2197,     -0.1157,     -0.2168,     -0.0732,     -0.2695,      0.0601,      0.1377,      0.3887,     -0.2910,     -0.2812,     -0.0294,     -0.1680,      0.4082,     -0.3223],
        [     0.0000,      0.0728,     -0.3848,     -0.8633,      0.2520,     -0.0747,      0.0491,     -0.0106,      0.0762,     -0.5391,     -0.0957,     -0.3574,      0.1328,      0.0723,     -0.0674],
        [     0.0000,     -0.2812,      0.0003,      0.1240,     -0.0435,      0.2471,      0.0070,      0.0066,      0.4160,     -0.2754,      0.7734,     -0.2383,     -0.4375,      0.4004,      0.2246],
        [     0.0000,     -0.2012,     -0.1846,     -0.1084,     -0.2314,     -0.2070,     -0.2891,     -0.5352,     -0.3613,     -0.6328,     -0.2930,     -0.3203,     -0.4863,     -0.2490,     -0.0884],
        [     0.0000,      0.2373,      0.0737,     -0.0432,      0.0148,      0.6562,      0.0796,      0.0796,      0.3730,      0.2178,      0.6914,      0.2559,     -0.2598,      0.1846,      0.4141],
        [     0.0000,     -0.1855,      0.0461,     -0.0260,     -0.1445,     -0.4102,     -0.4297,     -0.5898,      0.2373,     -0.3105,     -0.2539,     -0.6211,     -0.3730,      0.2061,     -0.5430],
        [     0.0000,     -0.5977,      0.2451,     -0.2754,     -0.2402,     -0.4180,      0.1562,     -0.4004,     -0.0845,     -0.8594,      0.3730,     -0.1377,     -0.3945,     -0.0579,      0.0767],
        [     0.0000,      0.0291,      0.0591,     -0.2363,      0.3652,      0.2217,      0.0079,      0.0233,      0.7617,     -0.1387,      0.2324,     -0.3633,     -0.2949,      0.1680,      0.1934],
        [     0.0000,      0.1084,     -0.0491,     -0.6172,     -0.0476,      0.1074,     -0.4355,     -0.1055,     -0.0004,     -0.1187,     -0.2539,      0.0674,     -0.0767,     -0.3066,      0.1455]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4922],
        [0.3149],
        [0.2511],
        [0.1967],
        [0.1673],
        [0.1486],
        [0.1259],
        [0.1056],
        [0.1016],
        [0.0821],
        [0.0780],
        [0.0789],
        [0.0699],
        [0.0666]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6094, 0.3906, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3535, 0.3066, 0.3398, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2871, 0.2295, 0.2754, 0.2090, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2256, 0.1660, 0.2285, 0.1709, 0.2090, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1875, 0.1426, 0.1641, 0.1387, 0.1943, 0.1729, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1670, 0.1240, 0.1396, 0.0996, 0.1943, 0.1543, 0.1201, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1050, 0.1050, 0.1172, 0.0986, 0.1865, 0.1494, 0.1069, 0.1318, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1221, 0.0903, 0.1206, 0.0845, 0.1562, 0.1357, 0.0845, 0.1245, 0.0820, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1050, 0.0952, 0.0967, 0.0649, 0.1328, 0.1089, 0.0947, 0.1226, 0.0864, 0.0923, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1162, 0.0708, 0.0908, 0.0688, 0.1084, 0.0884, 0.0820, 0.1172, 0.0820, 0.0850, 0.0898, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0952, 0.0767, 0.0859, 0.0564, 0.1187, 0.1030, 0.0776, 0.0986, 0.0630, 0.0742, 0.0854, 0.0654, 0.0000, 0.0000, 0.0000],
        [0.0732, 0.0669, 0.0752, 0.0645, 0.1089, 0.0894, 0.0674, 0.0835, 0.0698, 0.0674, 0.0732, 0.0757, 0.0845, 0.0000, 0.0000],
        [0.0635, 0.0608, 0.0771, 0.0688, 0.0913, 0.0806, 0.0679, 0.0884, 0.0598, 0.0718, 0.0776, 0.0554, 0.0752, 0.0613, 0.0000],
        [0.0874, 0.0559, 0.0762, 0.0503, 0.0752, 0.0593, 0.0688, 0.0859, 0.0669, 0.0674, 0.0654, 0.0488, 0.0630, 0.0588, 0.0708]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[     0.0039,     -0.0290,     -0.0386,  ...,      0.0198,      0.0058,      0.0222],
        [    -0.0303,     -0.0072,      0.0225,  ...,     -0.0226,     -0.0300,      0.0130],
        [     0.0153,      0.0275,      0.0047,  ...,      0.0103,      0.0214,      0.0108],
        ...,
        [    -0.0138,     -0.0270,     -0.0023,  ...,     -0.0163,      0.0144,      0.0082],
        [    -0.0159,     -0.0061,      0.0204,  ...,     -0.0137,      0.0222,      0.0116],
        [    -0.0108,     -0.0002,     -0.0270,  ...,     -0.0000,     -0.0261,     -0.0017]], device='cuda:0', requires_grad=True)
K: tensor([     1.2578,     -0.0554,      0.3340,      0.5312,     -1.1641,     -0.4707,      0.3398,     -0.0427,      0.9883,      0.1138,      0.4004,     -1.3672,      0.2246,      0.2539,     -0.3848,     -0.6641,      0.9570,      0.1357,     -0.4688,      0.2158,     -0.1934,     -1.0938,
             0.4785,     -1.2656,     -0.0012,      0.5430,      0.4180,      0.3594,     -0.2471,     -0.1387,      0.1709,     -0.4746,     -0.4512,      0.5977,      0.4141,      0.0215,     -0.2061,     -0.7891,      0.1572,     -0.3535,      0.0476,      0.6211,     -0.1084,      0.0771,
            -0.0164,      1.1562,      0.1670,      0.1309,     -0.1611,      0.8516,     -0.0088,      0.5352,      0.9648,      0.4160,      0.0601,      0.5547,      0.1011,      0.6562,      0.9453,     -0.9805,      0.4980,      0.0126,     -0.5508,      0.1992], device='cuda:0',
       dtype=torch.bfloat16)
Qweights
tensor([[-0.0048, -0.0327,  0.0145,  ...,  0.0298,  0.0177,  0.0508],
        [ 0.0032, -0.0013,  0.0223,  ...,  0.0022, -0.0033,  0.0043],
        [-0.0223,  0.0343, -0.0283,  ...,  0.0198, -0.0064,  0.0007],
        ...,
        [-0.0024, -0.0116,  0.0158,  ..., -0.0105,  0.0101, -0.0472],
        [-0.0235,  0.0387,  0.0119,  ..., -0.0035, -0.0036,  0.0336],
        [ 0.0129, -0.0374, -0.0096,  ..., -0.0381,  0.0042, -0.0605]], device='cuda:0', requires_grad=True)
Q: tensor([     0.1299,      0.8516,     -0.0009,     -0.2305,      0.0014,      0.0217,      0.0554,      0.1768,     -0.4453,      0.1992,     -0.7227,     -0.0308,      0.8477,      0.0124,     -0.2246,      0.7188,     -0.7227,      0.4043,      0.0786,     -0.1807,     -0.1543,      0.2471,
             0.4805,     -0.0305,      0.4805,      1.0469,     -0.2451,      0.4238,      0.6992,     -0.3867,     -0.0613,      0.9336,      0.1152,      0.2559,     -0.4629,      0.4199,     -0.3730,     -0.3926,     -0.2168,     -0.1846,     -0.0903,     -0.4316,     -1.1484,     -0.4082,
            -0.5117,      0.6055,     -0.1196,     -0.1699,     -0.7500,      0.2891,      0.4922,      0.4844,      0.1729,      0.9336,     -0.3613,     -0.9727,     -0.0684,     -0.1104,     -0.8359,      0.1787,     -0.5000,      1.4141,      0.3438,     -0.6641], device='cuda:0',
       dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -0.4453,     -0.2734,     -0.5000,      0.1084,     -0.1099,     -0.3750,     -0.0305,     -0.4258,     -0.3516,     -0.1279,     -0.4414,     -0.0698,     -0.0488,     -0.5234],
        [     0.0000,     -0.1367,     -0.0374,     -0.2832,      0.1562,      0.0258,     -0.0933,      0.1006,     -0.2236,     -0.1089,     -0.0508,     -0.2070,     -0.0215,      0.0598,     -0.0723],
        [     0.0000,     -0.2246,     -0.0447,     -0.3184,      0.2080,     -0.0099,     -0.1846,      0.1099,     -0.2012,     -0.3086,     -0.1299,     -0.2695,      0.0522,      0.0806,     -0.0898],
        [     0.0000,     -0.3027,      0.0148,     -0.2773,     -0.0747,     -0.2295,     -0.2793,      0.0525,     -0.3828,     -0.2598,     -0.1157,     -0.5742,     -0.4062,     -0.2412,     -0.1631],
        [     0.0000,     -0.2754,     -0.1348,     -0.3047,      0.0320,     -0.0815,     -0.2393,      0.0742,     -0.2480,     -0.1187,     -0.1426,     -0.4414,     -0.3066,     -0.1719,     -0.1436],
        [     0.0000,     -0.2969,     -0.1768,     -0.5156,      0.1514,     -0.0776,     -0.3281,      0.0610,     -0.2539,     -0.1816,     -0.0454,     -0.2344,     -0.1641,     -0.0152,     -0.1787],
        [     0.0000,      0.0001,      0.1099,     -0.0654,      0.5742,      0.3496,      0.0173,      0.2256,     -0.0286,     -0.0806,      0.0913,      0.0097,      0.1650,      0.2109,     -0.1514],
        [     0.0000,     -0.3008,     -0.0088,     -0.3672,      0.2471,      0.1040,     -0.3652,      0.0209,     -0.3965,     -0.2930,     -0.0840,     -0.4609,     -0.2676,     -0.1846,     -0.3242],
        [     0.0000,     -0.0991,     -0.0820,     -0.4785,      0.2373,      0.0371,     -0.1006,      0.1533,     -0.1924,     -0.1309,     -0.0605,     -0.1001,     -0.0466,     -0.0542,     -0.1123],
        [     0.0000,     -0.4961,     -0.2500,     -0.5273,     -0.0708,     -0.2754,     -0.3516,      0.0079,     -0.3516,     -0.3125,     -0.2598,     -0.4453,     -0.2578,     -0.3086,     -0.3105],
        [     0.0000,     -0.2188,     -0.0996,     -0.5195,      0.2197,      0.0791,     -0.2021,      0.0344,     -0.4082,     -0.2480,     -0.1064,     -0.3711,     -0.1572,     -0.0708,     -0.3730],
        [     0.0000,     -0.0898,      0.0248,     -0.1270,      0.4004,      0.2012,     -0.0796,      0.1309,     -0.0432,     -0.0796,      0.0039,      0.0332,      0.1455,      0.0811,     -0.1416],
        [     0.0000,     -0.0393,      0.2002,      0.0850,      0.3633,      0.2432,      0.0669,      0.3359,     -0.0581,      0.1250,      0.2041,     -0.1318,      0.1738,     -0.0325,     -0.2021],
        [     0.0000,     -0.4453,     -0.1357,     -0.5508,     -0.1523,     -0.3867,     -0.2393,     -0.0183,     -0.2656,     -0.2617,     -0.2871,     -0.5820,     -0.3262,     -0.3965,     -0.2080]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5244],
        [0.3419],
        [0.2449],
        [0.1925],
        [0.1642],
        [0.1459],
        [0.1306],
        [0.1128],
        [0.1008],
        [0.0925],
        [0.0918],
        [0.0794],
        [0.0689],
        [0.0698]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6055, 0.3926, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3359, 0.3047, 0.3613, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2734, 0.2178, 0.2988, 0.2109, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2490, 0.1670, 0.2334, 0.1680, 0.1836, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2041, 0.1465, 0.1768, 0.1387, 0.1729, 0.1611, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1670, 0.1221, 0.1426, 0.1025, 0.1865, 0.1484, 0.1299, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1113, 0.1108, 0.1289, 0.1084, 0.1611, 0.1348, 0.1089, 0.1357, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1309, 0.0918, 0.1201, 0.0894, 0.1436, 0.1196, 0.0884, 0.1260, 0.0913, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1050, 0.0967, 0.1016, 0.0625, 0.1211, 0.0996, 0.1040, 0.1167, 0.0908, 0.1016, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1123, 0.0728, 0.0977, 0.0664, 0.0991, 0.0801, 0.0830, 0.1167, 0.0771, 0.0903, 0.1045, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0996, 0.0728, 0.0952, 0.0564, 0.1050, 0.0869, 0.0811, 0.1040, 0.0684, 0.0781, 0.0918, 0.0608, 0.0000, 0.0000, 0.0000],
        [0.0728, 0.0693, 0.0796, 0.0588, 0.1011, 0.0845, 0.0752, 0.0825, 0.0713, 0.0742, 0.0732, 0.0728, 0.0854, 0.0000, 0.0000],
        [0.0640, 0.0674, 0.0811, 0.0698, 0.0811, 0.0742, 0.0693, 0.0869, 0.0562, 0.0728, 0.0879, 0.0537, 0.0698, 0.0659, 0.0000],
        [0.0854, 0.0586, 0.0752, 0.0457, 0.0742, 0.0574, 0.0679, 0.0767, 0.0549, 0.0674, 0.0767, 0.0542, 0.0737, 0.0708, 0.0613]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[     0.0039,     -0.0290,     -0.0386,  ...,      0.0198,      0.0058,      0.0222],
        [    -0.0303,     -0.0072,      0.0225,  ...,     -0.0226,     -0.0300,      0.0130],
        [     0.0153,      0.0275,      0.0047,  ...,      0.0103,      0.0214,      0.0108],
        ...,
        [    -0.0138,     -0.0270,     -0.0023,  ...,     -0.0163,      0.0144,      0.0082],
        [    -0.0159,     -0.0061,      0.0204,  ...,     -0.0137,      0.0222,      0.0116],
        [    -0.0108,     -0.0002,     -0.0270,  ...,     -0.0000,     -0.0261,     -0.0017]], device='cuda:0', requires_grad=True)
K: tensor([ 1.3047, -0.5000,  0.0244,  0.2949, -1.2422, -0.4473,  0.8477, -0.2373,  1.0234, -0.0649,  0.4199, -1.4766,  0.2578,  0.9844,  0.1001, -0.9805,  0.6367,  0.0425, -0.3809,  0.2520, -0.1719, -0.6758,  0.6523, -0.7812,  0.3379,  0.7383,  0.3691,  0.5625,  0.1816, -0.0854, -0.0781, -0.0223,
        -0.1089, -0.0231,  0.3242,  0.1973, -0.0537, -0.6211,  0.4941, -0.1157, -0.1436,  0.2373,  0.0200,  0.0854,  0.3027,  1.1016, -0.0479,  0.1436, -0.5430,  0.9336, -0.2578,  0.7695,  1.0156,  0.1650,  0.2832,  0.6523, -0.0105,  0.5156,  1.3516, -0.8867,  0.3281, -0.2041, -0.3691,  0.1206],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0048, -0.0327,  0.0145,  ...,  0.0298,  0.0177,  0.0508],
        [ 0.0032, -0.0013,  0.0223,  ...,  0.0022, -0.0033,  0.0043],
        [-0.0223,  0.0343, -0.0283,  ...,  0.0198, -0.0064,  0.0007],
        ...,
        [-0.0024, -0.0116,  0.0158,  ..., -0.0105,  0.0101, -0.0472],
        [-0.0235,  0.0387,  0.0119,  ..., -0.0035, -0.0036,  0.0336],
        [ 0.0129, -0.0374, -0.0096,  ..., -0.0381,  0.0042, -0.0605]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.3320,  0.9648,  0.3105, -0.5859,  0.6133,  0.0728, -0.5625,  0.0315, -0.1650, -0.0057, -0.5000,  0.0674,  1.0078, -0.2637, -0.5391,  0.3359, -0.7188,  0.4258, -0.0654,  0.0165, -0.4082,  0.4941,  0.5273,  0.2031,  0.2168,  0.9961, -0.0825,  0.1416,  0.4551, -0.3730,  0.1230,  1.2578,
         0.0322,  0.3926, -0.4316,  0.7070, -0.3242, -0.1133,  0.0981, -0.4121,  0.2236, -0.9180, -0.9648, -0.3242, -1.0078,  0.4902, -0.4512, -0.1709, -0.7930,  0.0359,  0.7422,  0.4531,  0.2373,  0.6836, -0.0214, -1.0078, -0.2246,  0.3164, -0.6250,  0.1768,  0.1406,  1.2578,  0.1162, -0.6484],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -0.4355,     -0.2139,     -0.4961,     -0.0283,     -0.2090,     -0.3945,     -0.0400,     -0.4297,     -0.3242,     -0.1934,     -0.4902,     -0.0144,     -0.1445,     -0.5625],
        [     0.0000,     -0.0972,      0.0723,     -0.2363,      0.0820,      0.0081,     -0.0435,      0.1182,     -0.1797,     -0.0537,      0.0322,     -0.2041,      0.0527,      0.0698,     -0.0107],
        [     0.0000,     -0.2285,      0.0850,     -0.2637,      0.1245,     -0.0483,     -0.1196,      0.1748,     -0.1572,     -0.2236,     -0.0732,     -0.3438,      0.1367,     -0.0613,      0.0459],
        [     0.0000,     -0.4023,     -0.0664,     -0.3926,     -0.3066,     -0.4258,     -0.3730,     -0.0850,     -0.4434,     -0.3008,     -0.0432,     -0.6367,     -0.4844,     -0.3809,     -0.0796],
        [     0.0000,     -0.3340,     -0.1475,     -0.3867,     -0.1680,     -0.2412,     -0.3320,      0.0332,     -0.2891,     -0.0908,     -0.1187,     -0.4414,     -0.2754,     -0.3164,      0.0072],
        [     0.0000,     -0.3125,     -0.1582,     -0.4883,      0.1104,     -0.1162,     -0.2500,     -0.0003,     -0.2363,     -0.1328,     -0.0776,     -0.2295,     -0.0791,     -0.1035,     -0.1416],
        [     0.0000,     -0.0059,      0.1416,     -0.0271,      0.3672,      0.1934,     -0.0229,      0.1992,     -0.0559,     -0.1104,      0.0486,     -0.1729,      0.1836,      0.1475,     -0.0693],
        [     0.0000,     -0.3496,     -0.0815,     -0.3789,      0.0933,     -0.0874,     -0.3906,     -0.0352,     -0.3574,     -0.2793,     -0.0669,     -0.5625,     -0.3340,     -0.2441,     -0.1895],
        [     0.0000,     -0.0801,     -0.0297,     -0.5156,      0.1436,     -0.0540,     -0.0064,      0.1074,     -0.1445,     -0.0308,     -0.0435,     -0.0859,     -0.0503,     -0.1128,      0.0723],
        [     0.0000,     -0.4375,     -0.1445,     -0.5273,     -0.1279,     -0.3398,     -0.3008,      0.0369,     -0.3789,     -0.2188,     -0.0757,     -0.4785,     -0.1182,     -0.2930,     -0.2266],
        [     0.0000,     -0.3145,     -0.0447,     -0.5703,      0.0535,     -0.1367,     -0.2051,      0.0422,     -0.3770,     -0.2393,     -0.0815,     -0.4922,     -0.1099,     -0.1924,     -0.2490],
        [     0.0000,     -0.0442,      0.0903,     -0.2080,      0.3301,      0.1504,      0.0366,      0.1309,     -0.0193,      0.0198,      0.0063,      0.0013,      0.1611,      0.0623,      0.0630],
        [     0.0000,      0.0483,      0.2373,      0.0874,      0.2344,      0.1426,      0.0762,      0.3047,     -0.1328,      0.1260,      0.3184,     -0.1768,      0.0835,      0.0256,      0.0625],
        [     0.0000,     -0.3770,     -0.1240,     -0.6250,     -0.1406,     -0.3984,     -0.2314,     -0.1089,     -0.4414,     -0.2363,     -0.1060,     -0.4551,     -0.1504,     -0.1865,     -0.3320]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5233],
        [0.3389],
        [0.2412],
        [0.1969],
        [0.1651],
        [0.1460],
        [0.1324],
        [0.1133],
        [0.1003],
        [0.0914],
        [0.0921],
        [0.0785],
        [0.0719],
        [0.0685]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		( boldly:0.0001 Yet:0.0002 Oaks:0.0002 Cheong:0.0001 Yet:0.0001 Winnipeg:0.0002 Kappa:0.0002 Despite:0.0001)
 Despite
------
		( Yet:0.0002 Oaks:0.0002 Cheong:0.0001 Yet:0.0001 Winnipeg:0.0002 Kappa:0.0002 Despite:0.0001 Innov:0.0002)
 Innovanthrop games instrumental enchanted phoneanthropanthrop phone Innov dens Innov poorest burgeoning honor
@ 1 train 10.9535 , allloss: 19.0427, dt: 6040.09ms, fracRes: 0.0064, norm(attn): 0.0216, norm(output): 0.0505, norm(x): 0.0513, norm(y): 0.9987, norm:50.8771, tok/sec: 21700.33, flops:17.42, batch-reuse:1
@ 2 train 10.8980 , allloss: 18.9056, dt: 4873.28ms, fracRes: 0.0063, norm(attn): 0.0217, norm(output): 0.0505, norm(x): 0.0514, norm(y): 0.9987, norm:64.8634, tok/sec: 26896.03, flops:21.59, batch-reuse:1
@ 3 train 10.8505 , allloss: 17.2386, dt: 4874.01ms, fracRes: 0.0064, norm(attn): 0.0254, norm(output): 0.0549, norm(x): 0.0530, norm(y): 0.9988, norm:84.0995, tok/sec: 26892.01, flops:21.59, batch-reuse:1
@ 4 train 10.7847 , allloss: 15.9641, dt: 4882.02ms, fracRes: 0.0063, norm(attn): 0.0266, norm(output): 0.0549, norm(x): 0.0540, norm(y): 0.9988, norm:59.6541, tok/sec: 26847.92, flops:21.55, batch-reuse:1
@ 5 train 10.7315 , allloss: 15.2023, dt: 4892.00ms, fracRes: 0.0062, norm(attn): 0.0269, norm(output): 0.0552, norm(x): 0.0546, norm(y): 0.9989, norm:44.7182, tok/sec: 26793.12, flops:21.51, batch-reuse:1
@ 6 train 10.6381 , allloss: 14.6521, dt: 4916.29ms, fracRes: 0.0064, norm(attn): 0.0272, norm(output): 0.0557, norm(x): 0.0548, norm(y): 0.9989, norm:54.4372, tok/sec: 26660.73, flops:21.40, batch-reuse:1
@ 7 train 10.5821 , allloss: 14.3020, dt: 4887.25ms, fracRes: 0.0064, norm(attn): 0.0272, norm(output): 0.0557, norm(x): 0.0550, norm(y): 0.9989, norm:81.0165, tok/sec: 26819.15, flops:21.53, batch-reuse:1
@ 8 train 10.5265 , allloss: 13.9808, dt: 4940.43ms, fracRes: 0.0067, norm(attn): 0.0272, norm(output): 0.0579, norm(x): 0.0556, norm(y): 0.9989, norm:77.6195, tok/sec: 26530.47, flops:21.30, batch-reuse:1
@ 9 train 10.4962 , allloss: 13.9640, dt: 4921.28ms, fracRes: 0.0065, norm(attn): 0.0275, norm(output): 0.0579, norm(x): 0.0558, norm(y): 0.9989, norm:146.5139, tok/sec: 26633.74, flops:21.38, batch-reuse:1
@ 10 train 10.4110 , allloss: 13.5692, dt: 4929.74ms, fracRes: 0.0066, norm(attn): 0.0275, norm(output): 0.0583, norm(x): 0.0567, norm(y): 0.9990, norm:95.4670, tok/sec: 26588.02, flops:21.34, batch-reuse:1
@ 11 train 10.3746 , allloss: 13.0519, dt: 4921.46ms, fracRes: 0.0067, norm(attn): 0.0277, norm(output): 0.0586, norm(x): 0.0577, norm(y): 0.9990, norm:75.5731, tok/sec: 26632.75, flops:21.38, batch-reuse:1
@ 12 train 10.3057 , allloss: 13.0671, dt: 4929.52ms, fracRes: 0.0067, norm(attn): 0.0277, norm(output): 0.0586, norm(x): 0.0580, norm(y): 0.9990, norm:95.7211, tok/sec: 26589.19, flops:21.34, batch-reuse:1
@ 13 train 10.2741 , allloss: 13.0205, dt: 4940.79ms, fracRes: 0.0067, norm(attn): 0.0277, norm(output): 0.0586, norm(x): 0.0585, norm(y): 0.9991, norm:94.1859, tok/sec: 26528.53, flops:21.30, batch-reuse:1
@ 14 train 10.2194 , allloss: 12.8033, dt: 4950.66ms, fracRes: 0.0068, norm(attn): 0.0278, norm(output): 0.0588, norm(x): 0.0590, norm(y): 0.9991, norm:110.2018, tok/sec: 26475.69, flops:21.25, batch-reuse:1
@ 15 train 10.1971 , allloss: 12.6800, dt: 4940.38ms, fracRes: 0.0068, norm(attn): 0.0286, norm(output): 0.0588, norm(x): 0.0595, norm(y): 0.9991, norm:123.4761, tok/sec: 26530.74, flops:21.30, batch-reuse:1
@ 16 train 10.1583 , allloss: 12.6144, dt: 4962.03ms, fracRes: 0.0069, norm(attn): 0.0288, norm(output): 0.0588, norm(x): 0.0598, norm(y): 0.9991, norm:141.9002, tok/sec: 26415.01, flops:21.20, batch-reuse:1
@ 17 train 10.1260 , allloss: 12.5509, dt: 4938.82ms, fracRes: 0.0069, norm(attn): 0.0289, norm(output): 0.0593, norm(x): 0.0600, norm(y): 0.9991, norm:169.1203, tok/sec: 26539.14, flops:21.30, batch-reuse:1
@ 18 train 10.1020 , allloss: 12.4431, dt: 4975.50ms, fracRes: 0.0070, norm(attn): 0.0292, norm(output): 0.0593, norm(x): 0.0601, norm(y): 0.9991, norm:189.5244, tok/sec: 26343.48, flops:21.15, batch-reuse:1
@ 19 train 10.0523 , allloss: 12.3176, dt: 4961.98ms, fracRes: 0.0072, norm(attn): 0.0311, norm(output): 0.0593, norm(x): 0.0605, norm(y): 0.9991, norm:203.0455, tok/sec: 26415.28, flops:21.20, batch-reuse:1
@ 20 train 10.0331 , allloss: 12.4260, dt: 4968.80ms, fracRes: 0.0073, norm(attn): 0.0311, norm(output): 0.0615, norm(x): 0.0608, norm(y): 0.9991, norm:206.4361, tok/sec: 26379.00, flops:21.18, batch-reuse:1
@ 21 train 10.0008 , allloss: 12.1868, dt: 4971.62ms, fracRes: 0.0075, norm(attn): 0.0315, norm(output): 0.0623, norm(x): 0.0614, norm(y): 0.9991, norm:185.2192, tok/sec: 26364.02, flops:21.16, batch-reuse:1
@ 22 train 10.0014 , allloss: 12.4547, dt: 4976.00ms, fracRes: 0.0075, norm(attn): 0.0312, norm(output): 0.0630, norm(x): 0.0621, norm(y): 0.9992, norm:230.6996, tok/sec: 26340.85, flops:21.15, batch-reuse:1
@ 23 train 10.0131 , allloss: 11.9136, dt: 4972.20ms, fracRes: 0.0079, norm(attn): 0.0327, norm(output): 0.0630, norm(x): 0.0634, norm(y): 0.9992, norm:161.7095, tok/sec: 26360.98, flops:21.16, batch-reuse:1
@ 24 train 9.9995 , allloss: 12.0373, dt: 4974.25ms, fracRes: 0.0080, norm(attn): 0.0330, norm(output): 0.0635, norm(x): 0.0637, norm(y): 0.9992, norm:168.5790, tok/sec: 26350.08, flops:21.15, batch-reuse:1
@ 25 train 9.9319 , allloss: 12.0981, dt: 4940.41ms, fracRes: 0.0081, norm(attn): 0.0330, norm(output): 0.0659, norm(x): 0.0642, norm(y): 0.9992, norm:188.7905, tok/sec: 26530.58, flops:21.30, batch-reuse:1
@ 26 train 9.9599 , allloss: 11.6597, dt: 5004.89ms, fracRes: 0.0083, norm(attn): 0.0332, norm(output): 0.0669, norm(x): 0.0659, norm(y): 0.9993, norm:148.8875, tok/sec: 26188.79, flops:21.02, batch-reuse:1
@ 27 train 9.9517 , allloss: 11.5723, dt: 5063.58ms, fracRes: 0.0085, norm(attn): 0.0337, norm(output): 0.0693, norm(x): 0.0668, norm(y): 0.9993, norm:121.1747, tok/sec: 25885.26, flops:20.78, batch-reuse:1
@ 28 train 9.9359 , allloss: 11.6422, dt: 5045.14ms, fracRes: 0.0086, norm(attn): 0.0364, norm(output): 0.0674, norm(x): 0.0664, norm(y): 0.9993, norm:114.5542, tok/sec: 25979.86, flops:20.86, batch-reuse:1
@ 29 train 9.9457 , allloss: 11.8177, dt: 4988.39ms, fracRes: 0.0088, norm(attn): 0.0366, norm(output): 0.0669, norm(x): 0.0660, norm(y): 0.9993, norm:133.9959, tok/sec: 26275.43, flops:21.09, batch-reuse:1
@ 30 train 9.9084 , allloss: 11.4602, dt: 5024.57ms, fracRes: 0.0091, norm(attn): 0.0393, norm(output): 0.0698, norm(x): 0.0685, norm(y): 0.9994, norm:97.8124, tok/sec: 26086.23, flops:20.94, batch-reuse:1
@ 31 train 9.9239 , allloss: 11.4114, dt: 5008.65ms, fracRes: 0.0092, norm(attn): 0.0396, norm(output): 0.0703, norm(x): 0.0698, norm(y): 0.9994, norm:103.4769, tok/sec: 26169.15, flops:21.01, batch-reuse:1
@ 32 train 9.9069 , allloss: 11.3963, dt: 5026.43ms, fracRes: 0.0091, norm(attn): 0.0427, norm(output): 0.0703, norm(x): 0.0696, norm(y): 0.9994, norm:122.6857, tok/sec: 26076.55, flops:20.93, batch-reuse:1
@ 33 train 9.8672 , allloss: 11.3558, dt: 5035.85ms, fracRes: 0.0090, norm(attn): 0.0432, norm(output): 0.0703, norm(x): 0.0695, norm(y): 0.9994, norm:130.1865, tok/sec: 26027.76, flops:20.89, batch-reuse:1
@ 34 train 9.8866 , allloss: 11.3313, dt: 5013.47ms, fracRes: 0.0094, norm(attn): 0.0435, norm(output): 0.0708, norm(x): 0.0719, norm(y): 0.9994, norm:139.0603, tok/sec: 26143.99, flops:20.99, batch-reuse:1
@ 35 train 9.9070 , allloss: 11.3346, dt: 4997.86ms, fracRes: 0.0096, norm(attn): 0.0464, norm(output): 0.0713, norm(x): 0.0734, norm(y): 0.9995, norm:149.7002, tok/sec: 26225.65, flops:21.05, batch-reuse:1
@ 36 train 9.8902 , allloss: 11.3279, dt: 5018.43ms, fracRes: 0.0095, norm(attn): 0.0466, norm(output): 0.0713, norm(x): 0.0740, norm(y): 0.9995, norm:178.7751, tok/sec: 26118.13, flops:20.97, batch-reuse:1
@ 37 train 9.8980 , allloss: 11.3353, dt: 5043.54ms, fracRes: 0.0094, norm(attn): 0.0505, norm(output): 0.0732, norm(x): 0.0752, norm(y): 0.9995, norm:259.5812, tok/sec: 25988.08, flops:20.86, batch-reuse:1
@ 38 train 9.8924 , allloss: 11.3108, dt: 5051.11ms, fracRes: 0.0095, norm(attn): 0.0518, norm(output): 0.0771, norm(x): 0.0771, norm(y): 0.9995, norm:262.2770, tok/sec: 25949.17, flops:20.83, batch-reuse:1
@ 39 train 9.9094 , allloss: 11.2981, dt: 5057.45ms, fracRes: 0.0096, norm(attn): 0.0518, norm(output): 0.0811, norm(x): 0.0792, norm(y): 0.9996, norm:264.1364, tok/sec: 25916.62, flops:20.80, batch-reuse:1
@ 40 train 9.8788 , allloss: 11.2344, dt: 5045.02ms, fracRes: 0.0096, norm(attn): 0.0518, norm(output): 0.0811, norm(x): 0.0813, norm(y): 0.9996, norm:266.9406, tok/sec: 25980.49, flops:20.86, batch-reuse:1
@ 41 train 9.8864 , allloss: 11.2163, dt: 5022.14ms, fracRes: 0.0096, norm(attn): 0.0518, norm(output): 0.0830, norm(x): 0.0828, norm(y): 0.9996, norm:346.3178, tok/sec: 26098.86, flops:20.95, batch-reuse:1
@ 42 train 9.9250 , allloss: 11.1957, dt: 5059.18ms, fracRes: 0.0095, norm(attn): 0.0513, norm(output): 0.0859, norm(x): 0.0842, norm(y): 0.9996, norm:419.9720, tok/sec: 25907.78, flops:20.80, batch-reuse:1
@ 43 train 9.8856 , allloss: 10.9783, dt: 5062.55ms, fracRes: 0.0107, norm(attn): 0.0625, norm(output): 0.0913, norm(x): 0.0929, norm(y): 0.9998, norm:193.7153, tok/sec: 25890.49, flops:20.78, batch-reuse:1
@ 44 train 9.8874 , allloss: 10.9380, dt: 5013.37ms, fracRes: 0.0114, norm(attn): 0.0630, norm(output): 0.0962, norm(x): 0.0980, norm(y): 0.9998, norm:106.5442, tok/sec: 26144.51, flops:20.99, batch-reuse:1
@ 45 train 9.8559 , allloss: 10.8815, dt: 5048.15ms, fracRes: 0.0121, norm(attn): 0.0635, norm(output): 0.0991, norm(x): 0.1025, norm(y): 0.9999, norm:106.0067, tok/sec: 25964.38, flops:20.84, batch-reuse:1
@ 46 train 9.8290 , allloss: 10.8598, dt: 5068.69ms, fracRes: 0.0129, norm(attn): 0.0635, norm(output): 0.1089, norm(x): 0.1073, norm(y): 0.9999, norm:116.5659, tok/sec: 25859.14, flops:20.76, batch-reuse:1
@ 47 train 9.8081 , allloss: 10.8400, dt: 5058.17ms, fracRes: 0.0138, norm(attn): 0.0664, norm(output): 0.1152, norm(x): 0.1124, norm(y): 1.0000, norm:100.7365, tok/sec: 25912.91, flops:20.80, batch-reuse:1
@ 48 train 9.8068 , allloss: 10.8408, dt: 5067.79ms, fracRes: 0.0148, norm(attn): 0.0664, norm(output): 0.1167, norm(x): 0.1179, norm(y): 1.0000, norm:89.2889, tok/sec: 25863.73, flops:20.76, batch-reuse:1
@ 49 train 9.7999 , allloss: 10.8338, dt: 5047.53ms, fracRes: 0.0159, norm(attn): 0.0669, norm(output): 0.1187, norm(x): 0.1239, norm(y): 1.0000, norm:61.0822, tok/sec: 25967.53, flops:20.85, batch-reuse:1
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4766, 0.5234, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2695, 0.3574, 0.3711, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3105, 0.2617, 0.2295, 0.1973, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1807, 0.1455, 0.2793, 0.2197, 0.1748, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1406, 0.1562, 0.2383, 0.1689, 0.1758, 0.1201, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1475, 0.1118, 0.1196, 0.1670, 0.1592, 0.1846, 0.1094, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1152, 0.1099, 0.1328, 0.1807, 0.1152, 0.0908, 0.1167, 0.1377, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0942, 0.1152, 0.1377, 0.1406, 0.1045, 0.0771, 0.1074, 0.1289, 0.0947, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1108, 0.1021, 0.1079, 0.1094, 0.1611, 0.0737, 0.0986, 0.0664, 0.0894, 0.0801, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0854, 0.0491, 0.0703, 0.0574, 0.0854, 0.1069, 0.0986, 0.1221, 0.0889, 0.1099, 0.1250, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0762, 0.0991, 0.0747, 0.0679, 0.0688, 0.0674, 0.0630, 0.0732, 0.0835, 0.1060, 0.1182, 0.1021, 0.0000, 0.0000, 0.0000],
        [0.0762, 0.0786, 0.0449, 0.0791, 0.0645, 0.0566, 0.0718, 0.0752, 0.0977, 0.0884, 0.0544, 0.0874, 0.1250, 0.0000, 0.0000],
        [0.0625, 0.0569, 0.0698, 0.0938, 0.0569, 0.0603, 0.1182, 0.0801, 0.0874, 0.0723, 0.0737, 0.0439, 0.0400, 0.0840, 0.0000],
        [0.0713, 0.0752, 0.0889, 0.0576, 0.0540, 0.0583, 0.0708, 0.0742, 0.0830, 0.0747, 0.0527, 0.0591, 0.0452, 0.0684, 0.0669]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0038, -0.0287, -0.0389,  ...,  0.0198,  0.0059,  0.0220],
        [-0.0300, -0.0074,  0.0232,  ..., -0.0233, -0.0297,  0.0130],
        [ 0.0155,  0.0276,  0.0047,  ...,  0.0103,  0.0214,  0.0107],
        ...,
        [-0.0138, -0.0269, -0.0026,  ..., -0.0158,  0.0138,  0.0083],
        [-0.0158, -0.0063,  0.0210,  ..., -0.0142,  0.0225,  0.0115],
        [-0.0108, -0.0004, -0.0266,  ..., -0.0005, -0.0262, -0.0016]], device='cuda:0', requires_grad=True)
K: tensor([ 0.0170,  0.5352,  0.9062,  0.0112, -0.0337,  0.2480,  0.1680,  0.4824, -0.5117, -0.9688, -0.1895, -0.0344, -0.0430, -0.3105,  0.3477,  0.1436, -0.6250, -0.5859, -0.7266, -1.1016,  1.3203,  0.4004, -0.2412,  0.5234, -0.3301,  0.0498,  0.5273,  0.4199, -0.1211,  0.4805,  0.4141, -0.8359,
        -0.1128,  0.7695,  0.2402, -1.1719, -0.2109, -0.3262,  0.4199,  0.0596, -0.8828,  0.6250,  0.8008, -0.2891,  0.3945, -0.6406, -0.5156,  0.8125, -0.2236, -1.0469,  0.4746,  0.5977, -0.5781, -0.3398,  0.4023,  0.6289, -1.0391,  0.1011, -0.5508, -0.2656, -0.3105,  1.1094,  0.0840,  0.4941],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0045, -0.0324,  0.0144,  ...,  0.0297,  0.0175,  0.0505],
        [ 0.0030, -0.0012,  0.0216,  ...,  0.0026, -0.0029,  0.0043],
        [-0.0222,  0.0341, -0.0276,  ...,  0.0193, -0.0064,  0.0007],
        ...,
        [-0.0025, -0.0116,  0.0151,  ..., -0.0101,  0.0102, -0.0473],
        [-0.0235,  0.0387,  0.0122,  ..., -0.0037, -0.0040,  0.0338],
        [ 0.0129, -0.0372, -0.0104,  ..., -0.0377,  0.0041, -0.0606]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.0398,  0.3789, -0.7891, -0.4902, -0.0437, -0.1982,  0.0481, -0.3789, -0.3398, -0.2949,  0.3008,  0.5508, -0.7305,  1.0781, -0.6367, -0.6172,  0.2695,  0.8906, -1.5547,  0.2480,  0.7773, -0.6055, -0.9922, -0.1455,  0.2715, -0.4102, -0.6680,  0.9922,  0.5000, -0.5430, -0.7148,  0.5000,
         0.0364, -0.3789, -0.3125, -0.4160, -0.2676,  0.3652,  0.0840, -0.1177,  0.4316, -0.0141,  1.2656, -0.2100,  0.4609,  0.0378,  0.3418,  0.3750, -0.3730,  0.0527,  0.0159, -0.5742,  0.3984,  0.2598,  0.0125,  0.1475, -0.0376, -0.3066,  1.0000,  0.0559,  0.1875,  0.1465, -0.1172,  0.6875],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,      0.0908,     -0.2373,      0.1245,      0.1631,      0.0898,      0.2637,      0.2559,     -0.1309,     -0.2285,      0.5352,     -0.2930,      0.0928,     -0.1562,     -0.1650],
        [     0.0000,      0.2812,      0.3184,     -0.0342,     -0.1592,      0.1689,      0.1221,      0.2178,     -0.1377,     -0.1279,     -0.2207,     -0.0275,      0.0266,     -0.0840,     -0.0801],
        [     0.0000,     -0.1748,     -0.3027,     -0.4551,      0.0630,     -0.0233,      0.3926,     -0.0277,     -0.3887,     -0.6602,     -0.5078,     -0.5430,      0.0583,     -0.1973,     -0.5977],
        [     0.0000,     -0.2168,      0.4355,      0.1953,     -0.0354,      0.4395,     -0.1367,     -0.1514,      0.5195,      0.0645,      0.2637,      0.3945,      0.1113,     -0.0796,      0.0496],
        [     0.0000,      0.1016,      0.5234,      0.1807,      0.2188,     -0.1611,      0.3242,     -0.1069,     -0.1914,     -0.0020,      0.0820,      0.1416,      0.0991,     -0.3145,     -0.0261],
        [     0.0000,     -0.2773,     -0.2100,      0.1260,      0.0762,      0.2256,     -0.3008,      0.1196,     -0.0449,      0.4199,     -0.1079,      0.1104,     -0.2139,     -0.0063,      0.5938],
        [     0.0000,     -0.0471,      0.1416,      0.4512,     -0.0016,     -0.2393,      0.0117,      0.1797,      0.1641,      0.0703,     -0.2578,      0.0393,     -0.2891,      0.5469,     -0.2695],
        [     0.0000,      0.2041,      0.3809,      0.4043,      0.1055,     -0.1953,      0.1318,      0.3145,      0.0063,      0.2188,      0.0747,      0.2139,     -0.3008,      0.1074,      0.5469],
        [     0.0000,     -0.0850,     -0.0275,     -0.0156,      0.3711,     -0.4082,     -0.1182,     -0.5117,     -0.2158,     -0.3281,     -0.0957,     -0.2070,      0.5742,     -0.3750,     -0.4082],
        [     0.0000,     -0.5547,     -0.1953,     -0.4004,      0.0001,      0.2246,      0.1416,      0.3555,      0.0393,      0.2480,      0.3828,     -0.0771,     -0.1719,      0.2363,      0.5977],
        [     0.0000,      0.2598,     -0.0215,     -0.1191,     -0.1035,     -0.1289,     -0.1904,     -0.0444,      0.0913,      0.3262,      0.4355,      0.2891,     -0.5430,     -0.0869,     -0.6367],
        [     0.0000,      0.0295,     -0.5312,      0.0327,     -0.1729,     -0.2988,     -0.0630,     -0.0153,      0.2441,      0.1475,     -0.3379,      0.1338,      0.4961,      0.2393,     -0.0287],
        [     0.0000,     -0.0977,      0.1050,      0.4043,     -0.0986,     -0.0410,      0.6328,      0.2461,      0.3301,      0.1426,      0.1631,     -0.3574,     -0.4473,      0.2949,      0.1035],
        [     0.0000,      0.0532,      0.2217,     -0.2129,     -0.2793,     -0.2021,     -0.0088,      0.0398,      0.1514,      0.0486,     -0.3027,     -0.1904,     -0.4590,     -0.0393,     -0.0669]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4836],
        [0.3288],
        [0.2450],
        [0.1850],
        [0.1699],
        [0.1427],
        [0.1278],
        [0.1060],
        [0.0968],
        [0.0888],
        [0.0806],
        [0.0758],
        [0.0691],
        [0.0683]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4375, 0.5625, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3516, 0.3418, 0.3086, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3047, 0.2119, 0.2539, 0.2314, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1660, 0.2305, 0.1855, 0.1836, 0.2344, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1289, 0.1777, 0.1152, 0.1602, 0.1748, 0.2422, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1426, 0.1943, 0.1543, 0.1562, 0.1309, 0.0981, 0.1245, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1377, 0.1089, 0.1162, 0.1177, 0.1338, 0.1396, 0.1133, 0.1328, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1230, 0.0723, 0.1099, 0.1445, 0.0977, 0.1484, 0.0991, 0.1167, 0.0884, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1553, 0.0845, 0.1157, 0.0654, 0.0962, 0.1436, 0.1182, 0.0679, 0.0708, 0.0835, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1172, 0.0869, 0.0767, 0.0820, 0.0781, 0.1436, 0.0884, 0.0918, 0.0571, 0.0933, 0.0850, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1035, 0.0535, 0.1157, 0.0630, 0.0530, 0.1177, 0.1055, 0.0684, 0.0527, 0.0859, 0.0613, 0.1201, 0.0000, 0.0000, 0.0000],
        [0.0786, 0.0903, 0.0581, 0.0630, 0.0918, 0.0996, 0.0903, 0.0708, 0.0889, 0.0732, 0.0542, 0.0659, 0.0752, 0.0000, 0.0000],
        [0.0933, 0.0549, 0.0564, 0.0801, 0.0801, 0.0996, 0.0737, 0.0610, 0.0464, 0.0723, 0.0757, 0.0518, 0.1016, 0.0530, 0.0000],
        [0.0737, 0.0649, 0.0583, 0.0559, 0.0488, 0.0796, 0.0825, 0.0371, 0.0354, 0.1240, 0.0640, 0.0530, 0.0649, 0.0854, 0.0718]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0038, -0.0287, -0.0389,  ...,  0.0198,  0.0059,  0.0220],
        [-0.0300, -0.0074,  0.0232,  ..., -0.0233, -0.0297,  0.0130],
        [ 0.0155,  0.0276,  0.0047,  ...,  0.0103,  0.0214,  0.0107],
        ...,
        [-0.0138, -0.0269, -0.0026,  ..., -0.0158,  0.0138,  0.0083],
        [-0.0158, -0.0063,  0.0210,  ..., -0.0142,  0.0225,  0.0115],
        [-0.0108, -0.0004, -0.0266,  ..., -0.0005, -0.0262, -0.0016]], device='cuda:0', requires_grad=True)
K: tensor([ 0.1318, -0.7578,  0.0747,  0.5625, -1.3203, -1.0391,  0.2988,  0.5000, -0.1641, -1.3281,  0.4648,  0.1309, -0.0933,  1.0547, -0.0383, -0.8320,  0.4512, -0.8320, -1.0078, -0.9141, -0.2793, -0.2256,  0.1689,  0.2139,  0.3398, -0.0903,  0.0815,  0.3613,  0.0688,  0.5039,  0.1270, -0.0452,
         0.0923, -0.3242,  0.9570, -0.2715, -0.0199,  0.7773, -0.5195, -0.3594, -1.4609, -0.2637, -0.2812, -0.5430,  0.1953,  0.2061,  0.0161, -0.0781, -0.0972, -0.8750,  0.1162,  1.4688,  1.2500, -0.2539,  0.2676,  1.7812, -0.4766,  0.3691,  0.2402,  0.1138, -0.4746,  0.5391,  0.2793,  0.9766],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0045, -0.0324,  0.0144,  ...,  0.0297,  0.0175,  0.0505],
        [ 0.0030, -0.0012,  0.0216,  ...,  0.0026, -0.0029,  0.0043],
        [-0.0222,  0.0341, -0.0276,  ...,  0.0193, -0.0064,  0.0007],
        ...,
        [-0.0025, -0.0116,  0.0151,  ..., -0.0101,  0.0102, -0.0473],
        [-0.0235,  0.0387,  0.0122,  ..., -0.0037, -0.0040,  0.0338],
        [ 0.0129, -0.0372, -0.0104,  ..., -0.0377,  0.0041, -0.0606]], device='cuda:0', requires_grad=True)
Q: tensor([-0.1904,  0.1533,  0.1953,  0.4980, -0.5781,  0.5273,  0.1147,  0.4805, -0.2119, -1.1328,  0.4004, -0.2988, -0.2109,  0.6367, -0.3105,  0.8594, -0.9297,  0.7227,  0.6875, -0.1162, -0.5547, -0.7148,  0.3730, -0.3496, -0.8828, -0.4551, -0.0933,  0.1367,  0.0393,  0.4395,  0.3008,  0.8359,
         0.1709,  0.2871, -0.1904,  0.5664, -0.3828,  1.3828, -0.2373,  0.5859, -0.4590,  0.6680,  0.7812,  0.0586, -1.0547,  0.2148, -0.1089,  0.3066, -0.6055,  0.8711,  0.4844, -0.2412,  0.0110,  0.1699, -1.1719, -0.3320,  0.3770,  0.4336,  0.6719,  0.3711, -0.1377,  0.7461, -0.5547, -0.4453],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,      0.2539,      0.3242,     -0.1934,      0.0361,      0.3359,     -0.0830,     -0.5312,      0.1157,     -0.4492,     -0.2949,      0.3750,      0.3809,      0.2598,     -0.2490],
        [     0.0000,     -0.0288,     -0.1299,     -0.1025,     -0.4980,      0.6250,     -0.3418,     -0.6055,     -0.2793,      0.0776,     -0.4883,     -0.0051,      0.2451,      0.1406,      0.0918],
        [     0.0000,     -0.3633,     -0.1846,     -0.2754,     -0.1875,     -0.4434,      0.0630,     -0.3398,     -1.1641,      0.2168,     -0.2158,     -0.4570,     -0.1562,     -0.5938,     -0.2246],
        [     0.0000,      0.3301,      0.1113,      0.1030,      0.3457,      0.0588,     -0.3496,     -0.2168,     -0.1143,      0.0801,     -0.0859,     -0.1504,      0.1777,      0.1357,     -0.1396],
        [     0.0000,      0.3223,     -0.1138,      0.2168,      0.3047,      0.6289,      0.2539,     -0.0469,      0.2812,      0.4492,     -0.4238,     -0.0256,      0.6250,      0.1108,      0.2158],
        [     0.0000,      0.3105,      0.0801,      0.0942,     -0.0854,     -0.3691,     -0.1328,     -0.3203,      0.2227,      0.4043,     -0.4277,     -0.0879,      0.0123,     -0.2031,     -0.4102],
        [     0.0000,     -0.2373,     -0.1729,     -0.1611,     -0.0302,      0.0115,     -0.1982,     -0.0422,     -0.4648,     -0.2207,     -0.4277,     -0.4023,      0.1865,     -0.5352,     -0.4648],
        [     0.0000,     -0.5312,     -0.1128,      0.1592,     -0.2324,      0.1895,     -0.2158,     -0.0505,     -0.3301,     -0.3320,     -0.3945,      0.0004,      0.0237,      0.0193,     -0.3809],
        [     0.0000,     -0.6055,     -0.2910,     -0.8594,     -0.4766,     -0.0791,     -0.2715,     -0.8281,     -0.7852,     -0.6172,     -0.6367,     -0.4023,     -0.2949,     -0.6016,     -1.0234],
        [     0.0000,     -0.3027,     -0.4238,     -0.3594,     -0.4043,      0.2002,     -0.2832,     -0.2451,     -0.7227,     -0.2295,     -0.3262,     -0.2715,     -0.0439,     -0.3848,     -0.0884],
        [     0.0000,     -0.6602,      0.1099,     -0.4961,     -0.6680,      0.1299,      0.0186,     -0.4160,     -0.6719,     -0.1875,     -0.5234,      0.1494,      0.0486,     -0.5039,     -0.0388],
        [     0.0000,      0.1416,     -0.2988,     -0.2207,      0.1582,      0.2412,      0.1396,     -0.1021,      0.1245,     -0.0664,     -0.3691,     -0.1719,     -0.0430,     -0.4336,     -0.3242],
        [     0.0000,     -0.5273,     -0.5039,     -0.1533,     -0.1523,      0.0645,     -0.2324,     -0.4258,     -0.6992,     -0.2559,     -0.2090,     -0.5859,      0.0845,     -0.5664,     -0.8711],
        [     0.0000,     -0.1240,     -0.2314,     -0.2734,     -0.4082,      0.0820,      0.1182,     -0.6836,     -0.7305,      0.5234,     -0.1377,     -0.3262,     -0.1206,      0.1504,     -0.0269]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5205],
        [0.3659],
        [0.2877],
        [0.2135],
        [0.1834],
        [0.1466],
        [0.1344],
        [0.1216],
        [0.1150],
        [0.1105],
        [0.0941],
        [0.0830],
        [0.0815],
        [0.0730]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.7070, 0.2910, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5312, 0.2070, 0.2617, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4180, 0.1826, 0.2334, 0.1670, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2969, 0.1797, 0.1992, 0.1357, 0.1875, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2598, 0.1216, 0.2119, 0.1045, 0.1484, 0.1533, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2432, 0.0986, 0.1406, 0.1035, 0.1079, 0.1216, 0.1836, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2578, 0.0898, 0.1045, 0.0576, 0.1445, 0.1138, 0.1279, 0.1055, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2051, 0.0718, 0.1006, 0.0879, 0.1196, 0.1299, 0.0879, 0.0894, 0.1089, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2070, 0.0776, 0.1016, 0.0840, 0.1099, 0.1123, 0.0884, 0.0732, 0.0859, 0.0608, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1475, 0.0781, 0.0791, 0.0659, 0.1030, 0.1318, 0.0708, 0.0718, 0.0908, 0.0654, 0.0962, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1777, 0.0674, 0.0986, 0.0718, 0.0981, 0.0845, 0.0674, 0.0579, 0.0913, 0.0618, 0.0815, 0.0420, 0.0000, 0.0000, 0.0000],
        [0.1709, 0.0435, 0.1211, 0.0618, 0.0708, 0.0588, 0.1113, 0.0620, 0.0728, 0.0388, 0.0820, 0.0496, 0.0559, 0.0000, 0.0000],
        [0.1445, 0.0562, 0.0674, 0.0510, 0.0967, 0.0850, 0.0593, 0.0564, 0.0898, 0.0500, 0.0723, 0.0344, 0.0569, 0.0801, 0.0000],
        [0.0898, 0.0664, 0.0688, 0.0491, 0.0786, 0.0801, 0.0454, 0.0625, 0.0684, 0.0669, 0.0728, 0.0557, 0.0586, 0.0640, 0.0732]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0038, -0.0287, -0.0389,  ...,  0.0198,  0.0059,  0.0220],
        [-0.0300, -0.0074,  0.0232,  ..., -0.0233, -0.0297,  0.0130],
        [ 0.0155,  0.0276,  0.0047,  ...,  0.0103,  0.0214,  0.0107],
        ...,
        [-0.0138, -0.0269, -0.0026,  ..., -0.0158,  0.0138,  0.0083],
        [-0.0158, -0.0063,  0.0210,  ..., -0.0142,  0.0225,  0.0115],
        [-0.0108, -0.0004, -0.0266,  ..., -0.0005, -0.0262, -0.0016]], device='cuda:0', requires_grad=True)
K: tensor([ 0.8281, -0.5508, -0.4180, -0.3906, -0.9766, -1.0859,  0.3750,  0.6953, -0.2227, -0.3652, -0.8086, -0.5859, -0.2559, -0.1777, -0.6250,  0.1553,  0.7188, -0.1777,  0.0190,  0.0654,  0.1924, -0.5234, -0.1143,  0.4355,  0.3887,  0.2061, -0.7070,  0.3203, -0.5781,  0.3633,  1.5469,  0.7266,
         0.1758, -0.4219,  0.8281, -0.7305, -0.0762,  0.3652,  0.6953,  0.6953,  0.2500, -0.9609,  0.3809,  0.7305, -0.2480, -0.3398, -0.3711, -0.0884,  0.6719,  0.1089, -0.6875, -0.2119,  1.3906,  0.1094,  0.2432,  0.7422, -0.2480, -0.4277, -0.9219,  0.7656,  0.7969,  0.4160,  0.4199, -0.7852],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0045, -0.0324,  0.0144,  ...,  0.0297,  0.0175,  0.0505],
        [ 0.0030, -0.0012,  0.0216,  ...,  0.0026, -0.0029,  0.0043],
        [-0.0222,  0.0341, -0.0276,  ...,  0.0193, -0.0064,  0.0007],
        ...,
        [-0.0025, -0.0116,  0.0151,  ..., -0.0101,  0.0102, -0.0473],
        [-0.0235,  0.0387,  0.0122,  ..., -0.0037, -0.0040,  0.0338],
        [ 0.0129, -0.0372, -0.0104,  ..., -0.0377,  0.0041, -0.0606]], device='cuda:0', requires_grad=True)
Q: tensor([-0.5430,  0.6641, -0.3242,  0.0894, -0.1406,  0.5938,  0.8750,  0.6680,  0.3906, -0.2539,  0.2314, -0.1572,  0.7070, -0.4004,  0.7734,  0.4238, -0.2471, -0.0201,  0.5781,  0.2256,  0.3281,  0.5977,  1.8594,  0.5391, -0.1797,  0.7109, -0.4824,  0.0121, -0.3359, -0.4629,  0.6523, -0.1533,
        -0.1758, -0.0374, -0.5664,  0.4785, -0.4062,  0.5117, -0.2734,  0.0981,  1.0312,  1.0156,  0.7227, -0.0295, -1.4609,  1.2188, -0.3105, -0.1279, -0.3848,  0.6992, -0.1104,  0.4746, -0.0391,  0.1973, -0.2031,  0.3145, -0.0723,  0.3086,  0.4492,  0.7227, -0.7930,  0.1748, -0.1631, -0.3242],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.8867, -0.3770, -0.6875, -0.3242, -0.5078, -0.5820, -0.5586, -0.5898, -0.7930, -0.7383, -1.1172, -0.6719, -0.3418, -0.8398],
        [ 0.0000, -0.9453, -0.7109, -1.1016, -0.5898, -0.8750, -0.9805, -1.0625, -0.6875, -0.9062, -0.5977, -1.2344, -1.0078, -0.6836, -0.8398],
        [ 0.0000, -0.8281, -0.5820, -0.9180, -0.3887, -0.5078, -0.9727, -0.8633, -0.6641, -0.7734, -0.6562, -1.2891, -0.8320, -0.5195, -0.5078],
        [ 0.0000, -0.5000, -0.3984, -0.7852, -0.4590, -0.5625, -0.9180, -0.8398, -0.5039, -0.5859, -0.5352, -1.3672, -0.6484, -0.3301, -0.7070],
        [ 0.0000, -0.7578, -0.2021, -0.9102, -0.5547, -0.5273, -0.9297, -0.9336, -0.5703, -0.9570, -0.7539, -1.3203, -0.9102, -0.4512, -0.7969],
        [ 0.0000, -0.9062, -0.5508, -0.8555, -0.8164, -0.6953, -0.2812, -0.4785, -0.3848, -0.9453, -0.7773, -0.8750, -0.8320, -0.3867, -0.9023],
        [ 0.0000, -1.0547, -0.8984, -1.4922, -0.5781, -0.8164, -0.6992, -0.8945, -0.8516, -1.3594, -0.8438, -1.5156, -0.7500, -0.6680, -0.9336],
        [ 0.0000, -1.0547, -0.7148, -0.8477, -0.5391, -0.4590, -0.8477, -0.8320, -0.6328, -1.0312, -0.5430, -1.3984, -0.9297, -0.4531, -0.5898],
        [ 0.0000, -0.9844, -0.7148, -0.8984, -0.6328, -0.6133, -0.8516, -1.0391, -0.8789, -1.2266, -0.8047, -1.3750, -1.0156, -0.6523, -0.8906],
        [ 0.0000, -0.6328, -0.6172, -0.8047, -0.3555, -0.1084, -0.7344, -0.7188, -0.4785, -0.8086, -0.4258, -1.0859, -0.7891, -0.3164, -0.4688],
        [ 0.0000, -0.9727, -0.5859, -0.9062, -0.5898, -0.7461, -0.9688, -1.1250, -0.6641, -1.0547, -0.7734, -1.4375, -0.9570, -0.4902, -1.0312],
        [ 0.0000, -1.3672, -0.3457, -1.0156, -0.8828, -1.0625, -0.4316, -1.0156, -0.8516, -1.4844, -0.7344, -1.2344, -1.1250, -0.7266, -0.7188],
        [ 0.0000, -0.9453, -0.7656, -1.0391, -0.4043, -0.5312, -0.8906, -0.9414, -0.4746, -1.0625, -0.6914, -1.4375, -0.9336, -0.5898, -0.7656],
        [ 0.0000, -0.3047, -0.2656, -0.6055, -0.1318, -0.1157, -0.6836, -0.3613, -0.2695, -0.2969, -0.2070, -0.4766, -0.4277, -0.3379, -0.2012]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.6611],
        [0.4578],
        [0.4093],
        [0.3075],
        [0.2588],
        [0.1790],
        [0.2094],
        [0.1868],
        [0.1705],
        [0.1659],
        [0.1429],
        [0.1311],
        [0.1326],
        [0.1038]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.7305, 0.2715, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5742, 0.2129, 0.2148, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4707, 0.1758, 0.1768, 0.1768, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4004, 0.1484, 0.1504, 0.1504, 0.1514, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3477, 0.1289, 0.1299, 0.1309, 0.1309, 0.1318, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3066, 0.1143, 0.1152, 0.1152, 0.1157, 0.1167, 0.1167, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2734, 0.1021, 0.1030, 0.1035, 0.1040, 0.1045, 0.1045, 0.1045, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2480, 0.0928, 0.0933, 0.0938, 0.0938, 0.0942, 0.0947, 0.0947, 0.0947, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2266, 0.0845, 0.0854, 0.0854, 0.0859, 0.0864, 0.0864, 0.0864, 0.0864, 0.0864, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2090, 0.0776, 0.0786, 0.0786, 0.0791, 0.0796, 0.0796, 0.0796, 0.0796, 0.0796, 0.0796, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1934, 0.0723, 0.0728, 0.0728, 0.0732, 0.0737, 0.0737, 0.0737, 0.0737, 0.0737, 0.0737, 0.0737, 0.0000, 0.0000, 0.0000],
        [0.1797, 0.0669, 0.0679, 0.0679, 0.0684, 0.0684, 0.0684, 0.0688, 0.0684, 0.0688, 0.0688, 0.0688, 0.0688, 0.0000, 0.0000],
        [0.1680, 0.0630, 0.0635, 0.0635, 0.0640, 0.0640, 0.0640, 0.0645, 0.0640, 0.0645, 0.0645, 0.0645, 0.0645, 0.0645, 0.0000],
        [0.1582, 0.0591, 0.0596, 0.0596, 0.0598, 0.0601, 0.0603, 0.0603, 0.0603, 0.0603, 0.0603, 0.0603, 0.0605, 0.0605, 0.0605]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0038, -0.0287, -0.0389,  ...,  0.0198,  0.0059,  0.0220],
        [-0.0300, -0.0074,  0.0232,  ..., -0.0233, -0.0297,  0.0130],
        [ 0.0155,  0.0276,  0.0047,  ...,  0.0103,  0.0214,  0.0107],
        ...,
        [-0.0138, -0.0269, -0.0026,  ..., -0.0158,  0.0138,  0.0083],
        [-0.0158, -0.0063,  0.0210,  ..., -0.0142,  0.0225,  0.0115],
        [-0.0108, -0.0004, -0.0266,  ..., -0.0005, -0.0262, -0.0016]], device='cuda:0', requires_grad=True)
K: tensor([ 0.6133, -0.3770, -0.0211, -0.3145, -0.7539, -0.0535,  0.2051, -0.3086, -0.1030, -0.2520,  0.2373, -0.3145,  0.3262, -0.4277, -0.3086, -1.0625,  0.4727,  0.0613, -0.2539,  0.6211,  0.4980, -0.5820,  0.4609, -0.1338,  0.4395,  0.1533, -0.3027,  0.1147,  0.3184, -0.4746,  1.7812,  0.2520,
        -0.2158,  0.0449,  0.3477, -0.5859, -0.2227, -0.1982,  0.6484,  0.9492, -0.2090, -0.3945, -0.2207, -0.6406,  0.2734, -0.4922, -0.3633, -0.7422,  0.2422,  0.1572, -0.7812, -0.2832,  0.9062, -0.3984,  0.4238, -0.3926, -0.7578, -0.2539,  0.1924, -0.7109,  0.6211,  0.3672,  0.2773,  0.5234],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0045, -0.0324,  0.0144,  ...,  0.0297,  0.0175,  0.0505],
        [ 0.0030, -0.0012,  0.0216,  ...,  0.0026, -0.0029,  0.0043],
        [-0.0222,  0.0341, -0.0276,  ...,  0.0193, -0.0064,  0.0007],
        ...,
        [-0.0025, -0.0116,  0.0151,  ..., -0.0101,  0.0102, -0.0473],
        [-0.0235,  0.0387,  0.0122,  ..., -0.0037, -0.0040,  0.0338],
        [ 0.0129, -0.0372, -0.0104,  ..., -0.0377,  0.0041, -0.0606]], device='cuda:0', requires_grad=True)
Q: tensor([-0.3984,  0.5000, -0.0522,  0.4297, -0.2715,  0.6602, -0.0439, -0.1328,  0.8984,  0.4668,  0.2441,  0.4707,  0.3184,  0.8438,  0.0233,  0.7383,  0.1001,  0.1621,  0.3145,  0.5078, -0.1245,  0.8711,  0.7773,  0.1406, -0.4766,  1.0859,  1.1328, -0.6055,  0.3340, -0.9414, -0.1943, -0.9180,
        -1.1562, -0.1289, -0.2793,  0.9219, -1.0703,  1.4297, -0.4746, -0.2295,  0.5625,  0.0254,  0.5781,  0.1206, -0.8906,  1.2500,  0.4688,  0.2480,  0.1108,  0.4199, -0.2012,  0.1016,  0.3203,  0.7148,  0.2373,  0.0466,  0.6289,  0.9453,  0.4590,  1.4062, -1.0312, -1.0938,  0.2930, -1.4531],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9688, -0.9648, -0.9688, -0.9648, -0.9648, -0.9648, -0.9609, -0.9648, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9727, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609, -0.9609, -0.9570],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9727, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609, -0.9609, -0.9570],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.7562],
        [0.6113],
        [0.5133],
        [0.4432],
        [0.3901],
        [0.3486],
        [0.3145],
        [0.2872],
        [0.2644],
        [0.2444],
        [0.2275],
        [0.2128],
        [0.1997],
        [0.1886]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.7305, 0.2715, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5703, 0.2129, 0.2148, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4707, 0.1758, 0.1768, 0.1768, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4004, 0.1484, 0.1504, 0.1504, 0.1514, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3457, 0.1299, 0.1309, 0.1309, 0.1309, 0.1318, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3066, 0.1143, 0.1152, 0.1152, 0.1157, 0.1162, 0.1167, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2734, 0.1025, 0.1030, 0.1035, 0.1040, 0.1040, 0.1045, 0.1045, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2480, 0.0928, 0.0933, 0.0938, 0.0942, 0.0942, 0.0947, 0.0947, 0.0947, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2266, 0.0845, 0.0854, 0.0854, 0.0859, 0.0859, 0.0864, 0.0864, 0.0864, 0.0864, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2090, 0.0781, 0.0786, 0.0786, 0.0791, 0.0791, 0.0796, 0.0796, 0.0796, 0.0796, 0.0796, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1934, 0.0723, 0.0728, 0.0728, 0.0732, 0.0732, 0.0737, 0.0737, 0.0737, 0.0737, 0.0737, 0.0737, 0.0000, 0.0000, 0.0000],
        [0.1797, 0.0674, 0.0679, 0.0679, 0.0684, 0.0684, 0.0684, 0.0684, 0.0688, 0.0688, 0.0688, 0.0688, 0.0688, 0.0000, 0.0000],
        [0.1680, 0.0630, 0.0635, 0.0635, 0.0640, 0.0640, 0.0640, 0.0640, 0.0645, 0.0645, 0.0645, 0.0645, 0.0645, 0.0645, 0.0000],
        [0.1582, 0.0591, 0.0596, 0.0596, 0.0598, 0.0601, 0.0603, 0.0603, 0.0603, 0.0603, 0.0603, 0.0605, 0.0605, 0.0603, 0.0605]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0038, -0.0287, -0.0389,  ...,  0.0198,  0.0059,  0.0220],
        [-0.0300, -0.0074,  0.0232,  ..., -0.0233, -0.0297,  0.0130],
        [ 0.0155,  0.0276,  0.0047,  ...,  0.0103,  0.0214,  0.0107],
        ...,
        [-0.0138, -0.0269, -0.0026,  ..., -0.0158,  0.0138,  0.0083],
        [-0.0158, -0.0063,  0.0210,  ..., -0.0142,  0.0225,  0.0115],
        [-0.0108, -0.0004, -0.0266,  ..., -0.0005, -0.0262, -0.0016]], device='cuda:0', requires_grad=True)
K: tensor([ 0.6133, -0.3770, -0.0197, -0.3125, -0.7578, -0.0532,  0.2051, -0.3086, -0.1030, -0.2539,  0.2354, -0.3164,  0.3262, -0.4297, -0.3066, -1.0703,  0.4746,  0.0615, -0.2520,  0.6250,  0.5000, -0.5820,  0.4609, -0.1338,  0.4395,  0.1533, -0.3047,  0.1152,  0.3184, -0.4746,  1.7812,  0.2520,
        -0.2158,  0.0437,  0.3516, -0.5859, -0.2217, -0.2002,  0.6484,  0.9531, -0.2080, -0.3945, -0.2197, -0.6406,  0.2734, -0.4941, -0.3633, -0.7422,  0.2422,  0.1562, -0.7773, -0.2852,  0.9062, -0.3965,  0.4258, -0.3906, -0.7578, -0.2539,  0.1943, -0.7148,  0.6211,  0.3672,  0.2793,  0.5234],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0045, -0.0324,  0.0144,  ...,  0.0297,  0.0175,  0.0505],
        [ 0.0030, -0.0012,  0.0216,  ...,  0.0026, -0.0029,  0.0043],
        [-0.0222,  0.0341, -0.0276,  ...,  0.0193, -0.0064,  0.0007],
        ...,
        [-0.0025, -0.0116,  0.0151,  ..., -0.0101,  0.0102, -0.0473],
        [-0.0235,  0.0387,  0.0122,  ..., -0.0037, -0.0040,  0.0338],
        [ 0.0129, -0.0372, -0.0104,  ..., -0.0377,  0.0041, -0.0606]], device='cuda:0', requires_grad=True)
Q: tensor([-0.3965,  0.5039, -0.0500,  0.4297, -0.2715,  0.6602, -0.0427, -0.1318,  0.8984,  0.4668,  0.2422,  0.4707,  0.3203,  0.8438,  0.0219,  0.7383,  0.1006,  0.1602,  0.3164,  0.5078, -0.1226,  0.8711,  0.7773,  0.1377, -0.4746,  1.0781,  1.1328, -0.6055,  0.3359, -0.9414, -0.1943, -0.9180,
        -1.1562, -0.1289, -0.2793,  0.9180, -1.0703,  1.4297, -0.4766, -0.2314,  0.5625,  0.0280,  0.5781,  0.1201, -0.8906,  1.2500,  0.4668,  0.2480,  0.1104,  0.4180, -0.2031,  0.1011,  0.3223,  0.7148,  0.2344,  0.0471,  0.6289,  0.9453,  0.4590,  1.4062, -1.0312, -1.0938,  0.2949, -1.4609],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9648, -0.9648],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9648, -0.9648],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9648, -0.9648],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9648, -0.9648],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9648, -0.9609],
        [ 0.0000, -0.9844, -0.9805, -0.9766, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9648, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609, -0.9609, -0.9570, -0.9609, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9648, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609, -0.9609, -0.9648, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9609, -0.9609, -0.9609, -0.9609],
        [ 0.0000, -0.9844, -0.9766, -0.9766, -0.9727, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9648, -0.9609],
        [ 0.0000, -0.9883, -0.9805, -0.9766, -0.9727, -0.9688, -0.9688, -0.9648, -0.9648, -0.9648, -0.9648, -0.9609, -0.9609, -0.9648, -0.9609]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.7559],
        [0.6112],
        [0.5133],
        [0.4432],
        [0.3900],
        [0.3484],
        [0.3146],
        [0.2872],
        [0.2643],
        [0.2444],
        [0.2273],
        [0.2128],
        [0.1997],
        [0.1886]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		( the:0.0039 the:0.0039 the:0.0039 the:0.0038 the:0.0038 the:0.0038 the:0.0038 the:0.0038)
 the
------
		( the:0.0039 the:0.0039 the:0.0038 the:0.0038 the:0.0038 the:0.0038 the:0.0038 the:0.0038)
 the the the the the the the the the the the the the the the
@ 50 train 9.7744 , allloss: 10.8120, dt: 5852.55ms, fracRes: 0.0173, norm(attn): 0.0674, norm(output): 0.1338, norm(x): 0.1307, norm(y): 1.0001, norm:79.1795, tok/sec: 22395.71, flops:17.98, batch-reuse:1
@ 51 train 9.7996 , allloss: 10.8784, dt: 5039.05ms, fracRes: 0.0190, norm(attn): 0.0693, norm(output): 0.1387, norm(x): 0.1381, norm(y): 1.0001, norm:64.5802, tok/sec: 26011.24, flops:20.88, batch-reuse:1
@ 52 train 9.7237 , allloss: 10.7697, dt: 5074.96ms, fracRes: 0.0209, norm(attn): 0.0698, norm(output): 0.1416, norm(x): 0.1460, norm(y): 1.0002, norm:90.8132, tok/sec: 25827.20, flops:20.73, batch-reuse:1
@ 53 train 9.7165 , allloss: 10.7986, dt: 5075.53ms, fracRes: 0.0231, norm(attn): 0.0698, norm(output): 0.1543, norm(x): 0.1538, norm(y): 1.0002, norm:67.3638, tok/sec: 25824.28, flops:20.73, batch-reuse:1
@ 54 train 9.7047 , allloss: 10.8068, dt: 5076.70ms, fracRes: 0.0256, norm(attn): 0.0703, norm(output): 0.1660, norm(x): 0.1620, norm(y): 1.0002, norm:58.4519, tok/sec: 25818.33, flops:20.73, batch-reuse:1
@ 55 train 9.7182 , allloss: 10.8448, dt: 5077.65ms, fracRes: 0.0286, norm(attn): 0.0703, norm(output): 0.1709, norm(x): 0.1697, norm(y): 1.0003, norm:56.5683, tok/sec: 25813.50, flops:20.72, batch-reuse:1
@ 56 train 9.6311 , allloss: 10.7807, dt: 5073.01ms, fracRes: 0.0321, norm(attn): 0.0703, norm(output): 0.1826, norm(x): 0.1772, norm(y): 1.0003, norm:45.2465, tok/sec: 25837.11, flops:20.74, batch-reuse:1
@ 57 train 9.5722 , allloss: 10.6836, dt: 5063.33ms, fracRes: 0.0360, norm(attn): 0.0698, norm(output): 0.1826, norm(x): 0.1848, norm(y): 1.0003, norm:89.2341, tok/sec: 25886.53, flops:20.78, batch-reuse:1
@ 58 train 9.5866 , allloss: 10.7343, dt: 5079.24ms, fracRes: 0.0402, norm(attn): 0.0684, norm(output): 0.1865, norm(x): 0.1918, norm(y): 1.0003, norm:58.5668, tok/sec: 25805.45, flops:20.72, batch-reuse:1
@ 59 train 9.4875 , allloss: 10.5988, dt: 5069.88ms, fracRes: 0.0453, norm(attn): 0.0669, norm(output): 0.1924, norm(x): 0.1982, norm(y): 1.0003, norm:75.8113, tok/sec: 25853.08, flops:20.75, batch-reuse:1
@ 60 train 9.4948 , allloss: 10.6215, dt: 5063.70ms, fracRes: 0.0497, norm(attn): 0.0591, norm(output): 0.1934, norm(x): 0.2039, norm(y): 1.0003, norm:46.9934, tok/sec: 25884.61, flops:20.78, batch-reuse:1
@ 61 train 9.4641 , allloss: 10.5778, dt: 5077.92ms, fracRes: 0.0555, norm(attn): 0.0540, norm(output): 0.2178, norm(x): 0.2101, norm(y): 1.0003, norm:37.5404, tok/sec: 25812.16, flops:20.72, batch-reuse:1
@ 62 train 9.4235 , allloss: 10.5181, dt: 5083.70ms, fracRes: 0.0598, norm(attn): 0.0442, norm(output): 0.2217, norm(x): 0.2159, norm(y): 1.0003, norm:34.4981, tok/sec: 25782.77, flops:20.70, batch-reuse:1
@ 63 train 9.4145 , allloss: 10.5175, dt: 5064.68ms, fracRes: 0.0605, norm(attn): 0.0330, norm(output): 0.2227, norm(x): 0.2216, norm(y): 1.0003, norm:27.3643, tok/sec: 25879.64, flops:20.77, batch-reuse:1
@ 64 train 9.3767 , allloss: 10.4845, dt: 5087.40ms, fracRes: 0.0570, norm(attn): 0.0255, norm(output): 0.2305, norm(x): 0.2276, norm(y): 1.0002, norm:26.2942, tok/sec: 25764.04, flops:20.68, batch-reuse:1
@ 65 train 9.3803 , allloss: 10.4957, dt: 5068.05ms, fracRes: 0.0487, norm(attn): 0.0231, norm(output): 0.2324, norm(x): 0.2348, norm(y): 1.0002, norm:29.2729, tok/sec: 25862.43, flops:20.76, batch-reuse:1
@ 66 train 9.3501 , allloss: 10.4819, dt: 5076.27ms, fracRes: 0.0435, norm(attn): 0.0247, norm(output): 0.2354, norm(x): 0.2429, norm(y): 1.0003, norm:28.0577, tok/sec: 25820.52, flops:20.73, batch-reuse:1
@ 67 train 9.3007 , allloss: 10.4664, dt: 5067.17ms, fracRes: 0.0366, norm(attn): 0.0261, norm(output): 0.2637, norm(x): 0.2509, norm(y): 1.0003, norm:26.9055, tok/sec: 25866.88, flops:20.76, batch-reuse:1
@ 68 train 9.3217 , allloss: 10.5169, dt: 5104.27ms, fracRes: 0.0317, norm(attn): 0.0272, norm(output): 0.2637, norm(x): 0.2583, norm(y): 1.0003, norm:25.3841, tok/sec: 25678.87, flops:20.61, batch-reuse:1
@ 69 train 9.2945 , allloss: 10.5251, dt: 5084.99ms, fracRes: 0.0289, norm(attn): 0.0277, norm(output): 0.2676, norm(x): 0.2647, norm(y): 1.0003, norm:32.8949, tok/sec: 25776.24, flops:20.69, batch-reuse:1
@ 70 train 9.2935 , allloss: 10.5517, dt: 5082.46ms, fracRes: 0.0249, norm(attn): 0.0286, norm(output): 0.2695, norm(x): 0.2694, norm(y): 1.0003, norm:35.1916, tok/sec: 25789.10, flops:20.70, batch-reuse:1
@ 71 train 9.2656 , allloss: 10.5307, dt: 5093.06ms, fracRes: 0.0253, norm(attn): 0.0289, norm(output): 0.2734, norm(x): 0.2727, norm(y): 1.0002, norm:41.0210, tok/sec: 25735.40, flops:20.66, batch-reuse:1
@ 72 train 9.2745 , allloss: 10.5521, dt: 5113.02ms, fracRes: 0.0211, norm(attn): 0.0305, norm(output): 0.2773, norm(x): 0.2738, norm(y): 1.0002, norm:47.2450, tok/sec: 25634.94, flops:20.58, batch-reuse:1
@ 73 train 9.2765 , allloss: 10.5123, dt: 5095.02ms, fracRes: 0.0192, norm(attn): 0.0327, norm(output): 0.2754, norm(x): 0.2730, norm(y): 1.0002, norm:51.1898, tok/sec: 25725.52, flops:20.65, batch-reuse:1
@ 74 train 9.2596 , allloss: 10.4658, dt: 5136.63ms, fracRes: 0.0207, norm(attn): 0.0332, norm(output): 0.2695, norm(x): 0.2704, norm(y): 1.0001, norm:60.7779, tok/sec: 25517.11, flops:20.48, batch-reuse:1
@ 75 train 9.5167 , allloss: 10.7172, dt: 5087.68ms, fracRes: 0.0157, norm(attn): 0.0339, norm(output): 0.2676, norm(x): 0.2644, norm(y): 1.0001, norm:55.7822, tok/sec: 25762.60, flops:20.68, batch-reuse:1
@ 76 train 9.2217 , allloss: 10.3854, dt: 5084.44ms, fracRes: 0.0186, norm(attn): 0.0342, norm(output): 0.2676, norm(x): 0.2607, norm(y): 1.0000, norm:93.6170, tok/sec: 25779.04, flops:20.69, batch-reuse:1
@ 77 train 9.4870 , allloss: 10.6265, dt: 5120.47ms, fracRes: 0.0149, norm(attn): 0.0352, norm(output): 0.2559, norm(x): 0.2498, norm(y): 1.0000, norm:62.3715, tok/sec: 25597.67, flops:20.55, batch-reuse:1
@ 78 train 9.3148 , allloss: 10.4254, dt: 5085.34ms, fracRes: 0.0151, norm(attn): 0.0378, norm(output): 0.2344, norm(x): 0.2445, norm(y): 0.9999, norm:66.0004, tok/sec: 25774.47, flops:20.69, batch-reuse:1
@ 79 train 9.1568 , allloss: 10.2454, dt: 5065.90ms, fracRes: 0.0185, norm(attn): 0.0422, norm(output): 0.2354, norm(x): 0.2390, norm(y): 0.9999, norm:59.2982, tok/sec: 25873.39, flops:20.77, batch-reuse:1
@ 80 train 9.1753 , allloss: 10.2422, dt: 5049.95ms, fracRes: 0.0172, norm(attn): 0.0466, norm(output): 0.2305, norm(x): 0.2303, norm(y): 0.9998, norm:46.2011, tok/sec: 25955.09, flops:20.84, batch-reuse:1
@ 81 train 9.1416 , allloss: 10.1667, dt: 5061.57ms, fracRes: 0.0194, norm(attn): 0.0554, norm(output): 0.2227, norm(x): 0.2215, norm(y): 0.9998, norm:55.5058, tok/sec: 25895.51, flops:20.79, batch-reuse:1
@ 82 train 9.0667 , allloss: 10.0588, dt: 5055.37ms, fracRes: 0.0193, norm(attn): 0.0659, norm(output): 0.2178, norm(x): 0.2125, norm(y): 0.9997, norm:57.5869, tok/sec: 25927.30, flops:20.81, batch-reuse:1
@ 83 train 8.9704 , allloss: 9.9592, dt: 5066.34ms, fracRes: 0.0314, norm(attn): 0.0718, norm(output): 0.2148, norm(x): 0.2047, norm(y): 0.9996, norm:49.7797, tok/sec: 25871.14, flops:20.77, batch-reuse:1
@ 84 train 8.7506 , allloss: 9.8562, dt: 5060.96ms, fracRes: 0.2038, norm(attn): 0.0410, norm(output): 0.2178, norm(x): 0.2127, norm(y): 0.9996, norm:343.4076, tok/sec: 25898.66, flops:20.79, batch-reuse:1
@ 85 train 8.6948 , allloss: 9.7719, dt: 5047.55ms, fracRes: 0.2849, norm(attn): 0.0354, norm(output): 0.2188, norm(x): 0.2118, norm(y): 0.9995, norm:113.7748, tok/sec: 25967.45, flops:20.85, batch-reuse:1
@ 86 train 8.6596 , allloss: 9.7225, dt: 5056.09ms, fracRes: 0.3295, norm(attn): 0.0342, norm(output): 0.2148, norm(x): 0.2062, norm(y): 0.9995, norm:87.6054, tok/sec: 25923.58, flops:20.81, batch-reuse:1
@ 87 train 8.6853 , allloss: 9.7759, dt: 5057.37ms, fracRes: 0.3755, norm(attn): 0.0294, norm(output): 0.1924, norm(x): 0.1983, norm(y): 0.9995, norm:85.8731, tok/sec: 25917.01, flops:20.80, batch-reuse:1
@ 88 train 8.6800 , allloss: 9.8098, dt: 5053.99ms, fracRes: 0.4253, norm(attn): 0.0250, norm(output): 0.1865, norm(x): 0.1889, norm(y): 0.9994, norm:96.6718, tok/sec: 25934.37, flops:20.82, batch-reuse:1
@ 89 train 8.6380 , allloss: 9.8082, dt: 5052.08ms, fracRes: 0.4763, norm(attn): 0.0216, norm(output): 0.1826, norm(x): 0.1793, norm(y): 0.9994, norm:80.9885, tok/sec: 25944.14, flops:20.83, batch-reuse:1
@ 90 train 8.6569 , allloss: 9.8757, dt: 5074.58ms, fracRes: 0.5266, norm(attn): 0.0209, norm(output): 0.1768, norm(x): 0.1703, norm(y): 0.9993, norm:68.3714, tok/sec: 25829.16, flops:20.73, batch-reuse:1
@ 91 train 8.6593 , allloss: 9.9432, dt: 5061.19ms, fracRes: 0.5785, norm(attn): 0.0214, norm(output): 0.1670, norm(x): 0.1628, norm(y): 0.9993, norm:55.4672, tok/sec: 25897.45, flops:20.79, batch-reuse:1
@ 92 train 8.6281 , allloss: 10.0038, dt: 5093.69ms, fracRes: 0.6291, norm(attn): 0.0198, norm(output): 0.1621, norm(x): 0.1564, norm(y): 0.9992, norm:62.9476, tok/sec: 25732.21, flops:20.66, batch-reuse:1
@ 93 train 8.6249 , allloss: 10.1045, dt: 5079.91ms, fracRes: 0.6746, norm(attn): 0.0183, norm(output): 0.1543, norm(x): 0.1513, norm(y): 0.9992, norm:73.0506, tok/sec: 25802.03, flops:20.71, batch-reuse:1
@ 94 train 8.7169 , allloss: 10.3285, dt: 5089.64ms, fracRes: 0.7122, norm(attn): 0.0166, norm(output): 0.1514, norm(x): 0.1471, norm(y): 0.9991, norm:78.0574, tok/sec: 25752.69, flops:20.67, batch-reuse:1
@ 95 train 8.6158 , allloss: 10.3273, dt: 5077.48ms, fracRes: 0.7461, norm(attn): 0.0159, norm(output): 0.1504, norm(x): 0.1435, norm(y): 0.9991, norm:85.8697, tok/sec: 25814.37, flops:20.72, batch-reuse:1
@ 96 train 8.5573 , allloss: 10.3335, dt: 5091.08ms, fracRes: 0.7758, norm(attn): 0.0135, norm(output): 0.1416, norm(x): 0.1412, norm(y): 0.9991, norm:90.6915, tok/sec: 25745.40, flops:20.67, batch-reuse:1
@ 97 train 8.5773 , allloss: 10.3744, dt: 5096.97ms, fracRes: 0.8030, norm(attn): 0.0127, norm(output): 0.1416, norm(x): 0.1397, norm(y): 0.9990, norm:89.0157, tok/sec: 25715.66, flops:20.64, batch-reuse:1
@ 98 train 8.5463 , allloss: 10.3225, dt: 5097.72ms, fracRes: 0.8266, norm(attn): 0.0104, norm(output): 0.1416, norm(x): 0.1391, norm(y): 0.9990, norm:79.2929, tok/sec: 25711.87, flops:20.64, batch-reuse:1
@ 99 train 8.5470 , allloss: 10.2782, dt: 5075.23ms, fracRes: 0.8484, norm(attn): 0.0094, norm(output): 0.1416, norm(x): 0.1388, norm(y): 0.9990, norm:61.1049, tok/sec: 25825.83, flops:20.73, batch-reuse:1
@ 100 train 8.5068 , allloss: 10.1835, dt: 5160.75ms, fracRes: 0.8672, norm(attn): 0.0078, norm(output): 0.1416, norm(x): 0.1390, norm(y): 0.9990, norm:41.7049, tok/sec: 25397.85, flops:20.39, batch-reuse:1
@ 101 train 8.4285 , allloss: 10.0411, dt: 5037.56ms, fracRes: 0.8848, norm(attn): 0.0062, norm(output): 0.1416, norm(x): 0.1393, norm(y): 0.9990, norm:36.7419, tok/sec: 26018.95, flops:20.89, batch-reuse:1
@ 102 train 8.4147 , allloss: 9.9430, dt: 5143.55ms, fracRes: 0.9022, norm(attn): 0.0049, norm(output): 0.1426, norm(x): 0.1390, norm(y): 0.9990, norm:30.1658, tok/sec: 25482.80, flops:20.46, batch-reuse:1
@ 103 train 8.3703 , allloss: 9.7583, dt: 5121.96ms, fracRes: 0.9192, norm(attn): 0.0043, norm(output): 0.1426, norm(x): 0.1383, norm(y): 0.9990, norm:23.4967, tok/sec: 25590.19, flops:20.54, batch-reuse:1
@ 104 train 8.3305 , allloss: 9.6091, dt: 5157.24ms, fracRes: 0.9284, norm(attn): 0.0035, norm(output): 0.1426, norm(x): 0.1394, norm(y): 0.9991, norm:18.5050, tok/sec: 25415.16, flops:20.40, batch-reuse:1
@ 105 train 8.2626 , allloss: 9.5418, dt: 5087.48ms, fracRes: 0.9303, norm(attn): 0.0034, norm(output): 0.1406, norm(x): 0.1409, norm(y): 0.9991, norm:15.1108, tok/sec: 25763.65, flops:20.68, batch-reuse:1
@ 106 train 8.2122 , allloss: 9.5589, dt: 5107.12ms, fracRes: 0.9283, norm(attn): 0.0036, norm(output): 0.1338, norm(x): 0.1369, norm(y): 0.9991, norm:14.9574, tok/sec: 25664.55, flops:20.60, batch-reuse:1
@ 107 train 8.1405 , allloss: 9.4933, dt: 5124.70ms, fracRes: 0.9293, norm(attn): 0.0037, norm(output): 0.1230, norm(x): 0.1334, norm(y): 0.9992, norm:15.4200, tok/sec: 25576.52, flops:20.53, batch-reuse:1
@ 108 train 8.1012 , allloss: 9.4523, dt: 5156.09ms, fracRes: 0.9294, norm(attn): 0.0041, norm(output): 0.1177, norm(x): 0.1271, norm(y): 0.9993, norm:16.0592, tok/sec: 25420.81, flops:20.41, batch-reuse:1
@ 109 train 8.0370 , allloss: 9.3878, dt: 5119.08ms, fracRes: 0.9277, norm(attn): 0.0049, norm(output): 0.1177, norm(x): 0.1166, norm(y): 0.9993, norm:14.7014, tok/sec: 25604.60, flops:20.55, batch-reuse:1
@ 110 train 8.0948 , allloss: 9.2634, dt: 5130.06ms, fracRes: 0.9329, norm(attn): 0.0046, norm(output): 0.1230, norm(x): 0.1281, norm(y): 0.9995, norm:11.7923, tok/sec: 25549.81, flops:20.51, batch-reuse:1
@ 111 train 8.0441 , allloss: 9.2093, dt: 5100.65ms, fracRes: 0.9277, norm(attn): 0.0054, norm(output): 0.1230, norm(x): 0.1092, norm(y): 0.9994, norm:11.7390, tok/sec: 25697.10, flops:20.63, batch-reuse:1
@ 112 train 8.0073 , allloss: 9.0222, dt: 5140.48ms, fracRes: 0.9316, norm(attn): 0.0056, norm(output): 0.1230, norm(x): 0.1178, norm(y): 0.9996, norm:7.7311, tok/sec: 25498.00, flops:20.47, batch-reuse:1
@ 113 train 7.9349 , allloss: 8.8661, dt: 5124.91ms, fracRes: 0.9318, norm(attn): 0.0058, norm(output): 0.1245, norm(x): 0.1134, norm(y): 0.9996, norm:6.9147, tok/sec: 25575.49, flops:20.53, batch-reuse:1
@ 114 train 7.9476 , allloss: 8.8999, dt: 5118.17ms, fracRes: 0.9277, norm(attn): 0.0062, norm(output): 0.1235, norm(x): 0.1029, norm(y): 0.9997, norm:15.3733, tok/sec: 25609.14, flops:20.56, batch-reuse:1
@ 115 train 7.8432 , allloss: 8.6296, dt: 5133.12ms, fracRes: 0.9341, norm(attn): 0.0056, norm(output): 0.1250, norm(x): 0.1182, norm(y): 0.9999, norm:6.9759, tok/sec: 25534.55, flops:20.50, batch-reuse:1
@ 116 train 7.7786 , allloss: 8.5053, dt: 5099.49ms, fracRes: 0.9358, norm(attn): 0.0053, norm(output): 0.1230, norm(x): 0.1258, norm(y): 1.0000, norm:5.7663, tok/sec: 25702.94, flops:20.63, batch-reuse:1
@ 117 train 7.7331 , allloss: 8.4312, dt: 5126.78ms, fracRes: 0.9365, norm(attn): 0.0052, norm(output): 0.1177, norm(x): 0.1275, norm(y): 1.0002, norm:5.4386, tok/sec: 25566.13, flops:20.52, batch-reuse:1
@ 118 train 7.7172 , allloss: 8.3915, dt: 5105.40ms, fracRes: 0.9369, norm(attn): 0.0050, norm(output): 0.1172, norm(x): 0.1277, norm(y): 1.0002, norm:5.1291, tok/sec: 25673.22, flops:20.61, batch-reuse:1
@ 119 train 7.6697 , allloss: 8.3323, dt: 5096.54ms, fracRes: 0.9369, norm(attn): 0.0050, norm(output): 0.1167, norm(x): 0.1256, norm(y): 1.0002, norm:5.2955, tok/sec: 25717.84, flops:20.65, batch-reuse:1
@ 120 train 7.7896 , allloss: 8.4389, dt: 5095.41ms, fracRes: 0.9374, norm(attn): 0.0049, norm(output): 0.1167, norm(x): 0.1293, norm(y): 1.0002, norm:4.8471, tok/sec: 25723.54, flops:20.65, batch-reuse:1
@ 121 train 7.8183 , allloss: 8.4471, dt: 5053.28ms, fracRes: 0.9377, norm(attn): 0.0052, norm(output): 0.1172, norm(x): 0.1287, norm(y): 1.0003, norm:6.0785, tok/sec: 25937.99, flops:20.82, batch-reuse:1
@ 122 train 7.7783 , allloss: 8.3937, dt: 5072.22ms, fracRes: 0.9375, norm(attn): 0.0054, norm(output): 0.1172, norm(x): 0.1237, norm(y): 1.0003, norm:6.2607, tok/sec: 25841.14, flops:20.74, batch-reuse:1
@ 123 train 7.6460 , allloss: 8.2497, dt: 5112.76ms, fracRes: 0.9373, norm(attn): 0.0054, norm(output): 0.1172, norm(x): 0.1194, norm(y): 1.0003, norm:5.3371, tok/sec: 25636.28, flops:20.58, batch-reuse:1
@ 124 train 7.6355 , allloss: 8.2462, dt: 5158.43ms, fracRes: 0.9372, norm(attn): 0.0055, norm(output): 0.1167, norm(x): 0.1188, norm(y): 1.0003, norm:5.0997, tok/sec: 25409.28, flops:20.40, batch-reuse:1
@ 125 train 7.6185 , allloss: 8.2215, dt: 5109.66ms, fracRes: 0.9369, norm(attn): 0.0056, norm(output): 0.1167, norm(x): 0.1130, norm(y): 1.0004, norm:4.6285, tok/sec: 25651.79, flops:20.59, batch-reuse:1
@ 126 train 7.6342 , allloss: 8.2264, dt: 5139.99ms, fracRes: 0.9364, norm(attn): 0.0058, norm(output): 0.1123, norm(x): 0.1082, norm(y): 1.0003, norm:6.8933, tok/sec: 25500.43, flops:20.47, batch-reuse:1
@ 127 train 7.5549 , allloss: 8.1438, dt: 5133.71ms, fracRes: 0.9368, norm(attn): 0.0058, norm(output): 0.1167, norm(x): 0.1099, norm(y): 1.0004, norm:7.6802, tok/sec: 25531.62, flops:20.50, batch-reuse:1
@ 128 train 7.4939 , allloss: 8.0764, dt: 5121.76ms, fracRes: 0.9373, norm(attn): 0.0056, norm(output): 0.1167, norm(x): 0.1117, norm(y): 1.0004, norm:5.6978, tok/sec: 25591.18, flops:20.54, batch-reuse:1
@ 129 train 7.6912 , allloss: 8.2611, dt: 5049.17ms, fracRes: 0.9377, norm(attn): 0.0056, norm(output): 0.1172, norm(x): 0.1126, norm(y): 1.0004, norm:6.4543, tok/sec: 25959.13, flops:20.84, batch-reuse:1
@ 130 train 7.5712 , allloss: 8.1421, dt: 5115.45ms, fracRes: 0.9372, norm(attn): 0.0059, norm(output): 0.1167, norm(x): 0.1084, norm(y): 1.0004, norm:5.9353, tok/sec: 25622.78, flops:20.57, batch-reuse:1
@ 131 train 7.6459 , allloss: 8.2515, dt: 5063.08ms, fracRes: 0.9340, norm(attn): 0.0066, norm(output): 0.1167, norm(x): 0.1042, norm(y): 1.0004, norm:623.9503, tok/sec: 25887.80, flops:20.78, batch-reuse:1
@ 132 train 11.7602 , allloss: 15.1245, dt: 5100.93ms, fracRes: 0.0603, norm(attn): 0.2471, norm(output): 0.1338, norm(x): 0.1353, norm(y): 0.9996, norm:121.9065, tok/sec: 25695.69, flops:20.63, batch-reuse:1
@ 133 train 11.1220 , allloss: 14.7308, dt: 5157.95ms, fracRes: 0.0474, norm(attn): 0.2461, norm(output): 0.1328, norm(x): 0.1281, norm(y): 0.9996, norm:131.2105, tok/sec: 25411.65, flops:20.40, batch-reuse:1
@ 134 train 8.5382 , allloss: 17.2467, dt: 5156.51ms, fracRes: 0.1409, norm(attn): 0.1045, norm(output): 0.1250, norm(x): 0.1240, norm(y): 1.0000, norm:2009.5392, tok/sec: 25418.74, flops:20.40, batch-reuse:1
@ 135 train 9.2539 , allloss: 17.4573, dt: 5144.33ms, fracRes: 0.0904, norm(attn): 0.0938, norm(output): 0.1328, norm(x): 0.1305, norm(y): 1.0001, norm:2109.6172, tok/sec: 25478.93, flops:20.45, batch-reuse:1
@ 136 train 8.9173 , allloss: 13.7134, dt: 5113.78ms, fracRes: 0.3274, norm(attn): 0.0723, norm(output): 0.1299, norm(x): 0.1275, norm(y): 1.0002, norm:9952.0068, tok/sec: 25631.14, flops:20.58, batch-reuse:1
@ 137 train 8.1778 , allloss: 9.2673, dt: 5134.49ms, fracRes: 0.8993, norm(attn): 0.0090, norm(output): 0.1826, norm(x): 0.1722, norm(y): 1.0005, norm:30.4734, tok/sec: 25527.74, flops:20.49, batch-reuse:1
@ 138 train 8.1152 , allloss: 9.0103, dt: 5176.20ms, fracRes: 0.9246, norm(attn): 0.0066, norm(output): 0.1865, norm(x): 0.1871, norm(y): 1.0006, norm:19.7132, tok/sec: 25322.05, flops:20.33, batch-reuse:1
@ 139 train 7.8955 , allloss: 8.6614, dt: 5103.78ms, fracRes: 0.9373, norm(attn): 0.0053, norm(output): 0.1885, norm(x): 0.1976, norm(y): 1.0006, norm:14.1620, tok/sec: 25681.34, flops:20.62, batch-reuse:1
@ 140 train 7.7084 , allloss: 8.4040, dt: 5115.17ms, fracRes: 0.9419, norm(attn): 0.0048, norm(output): 0.1875, norm(x): 0.1922, norm(y): 1.0007, norm:10.1941, tok/sec: 25624.18, flops:20.57, batch-reuse:1
@ 141 train 7.6026 , allloss: 8.2567, dt: 5071.71ms, fracRes: 0.9454, norm(attn): 0.0046, norm(output): 0.1875, norm(x): 0.1855, norm(y): 1.0007, norm:10.4062, tok/sec: 25843.74, flops:20.75, batch-reuse:1
@ 142 train 7.5984 , allloss: 8.3855, dt: 5101.53ms, fracRes: 0.9401, norm(attn): 0.0057, norm(output): 0.1729, norm(x): 0.2191, norm(y): 1.0009, norm:7.0029, tok/sec: 25692.70, flops:20.62, batch-reuse:1
@ 143 train 7.5366 , allloss: 8.3862, dt: 5089.58ms, fracRes: 0.9384, norm(attn): 0.0065, norm(output): 0.1572, norm(x): 0.2322, norm(y): 1.0010, norm:6.6906, tok/sec: 25752.99, flops:20.67, batch-reuse:1
@ 144 train 7.5162 , allloss: 8.3827, dt: 5107.77ms, fracRes: 0.9372, norm(attn): 0.0068, norm(output): 0.1543, norm(x): 0.2265, norm(y): 1.0009, norm:9.4375, tok/sec: 25661.29, flops:20.60, batch-reuse:1
@ 145 train 7.4840 , allloss: 8.3226, dt: 5101.81ms, fracRes: 0.9390, norm(attn): 0.0065, norm(output): 0.1562, norm(x): 0.2257, norm(y): 1.0009, norm:10.5605, tok/sec: 25691.27, flops:20.62, batch-reuse:1
@ 146 train 7.6032 , allloss: 8.4201, dt: 5079.16ms, fracRes: 0.9392, norm(attn): 0.0064, norm(output): 0.1572, norm(x): 0.2198, norm(y): 1.0009, norm:6.0558, tok/sec: 25805.83, flops:20.72, batch-reuse:1
@ 147 train 7.4675 , allloss: 8.2451, dt: 5093.88ms, fracRes: 0.9395, norm(attn): 0.0062, norm(output): 0.1709, norm(x): 0.2086, norm(y): 1.0009, norm:5.0485, tok/sec: 25731.29, flops:20.66, batch-reuse:1
@ 148 train 7.4459 , allloss: 8.1837, dt: 5068.29ms, fracRes: 0.9397, norm(attn): 0.0060, norm(output): 0.1719, norm(x): 0.1947, norm(y): 1.0008, norm:5.2911, tok/sec: 25861.19, flops:20.76, batch-reuse:1
@ 149 train 7.3298 , allloss: 8.0187, dt: 5100.48ms, fracRes: 0.9402, norm(attn): 0.0059, norm(output): 0.1719, norm(x): 0.1795, norm(y): 1.0008, norm:4.8139, tok/sec: 25697.96, flops:20.63, batch-reuse:1
@ 150 train 7.5292 , allloss: 8.1926, dt: 5120.59ms, fracRes: 0.9401, norm(attn): 0.0059, norm(output): 0.1709, norm(x): 0.1663, norm(y): 1.0007, norm:4.4863, tok/sec: 25597.06, flops:20.55, batch-reuse:1
@ 151 train 7.3286 , allloss: 7.9596, dt: 5081.29ms, fracRes: 0.9400, norm(attn): 0.0060, norm(output): 0.1699, norm(x): 0.1548, norm(y): 1.0007, norm:4.4798, tok/sec: 25795.04, flops:20.71, batch-reuse:1
@ 152 train 7.2944 , allloss: 7.9072, dt: 5072.87ms, fracRes: 0.9406, norm(attn): 0.0063, norm(output): 0.1562, norm(x): 0.1521, norm(y): 1.0007, norm:3.9929, tok/sec: 25837.85, flops:20.74, batch-reuse:1
@ 153 train 7.2964 , allloss: 7.9192, dt: 5096.98ms, fracRes: 0.9403, norm(attn): 0.0066, norm(output): 0.1553, norm(x): 0.1512, norm(y): 1.0008, norm:3.7899, tok/sec: 25715.64, flops:20.64, batch-reuse:1
@ 154 train 7.3584 , allloss: 7.9722, dt: 5110.25ms, fracRes: 0.9402, norm(attn): 0.0069, norm(output): 0.1553, norm(x): 0.1469, norm(y): 1.0008, norm:3.9949, tok/sec: 25648.83, flops:20.59, batch-reuse:1
@ 155 train 7.4842 , allloss: 8.0786, dt: 5123.72ms, fracRes: 0.9397, norm(attn): 0.0073, norm(output): 0.1426, norm(x): 0.1412, norm(y): 1.0007, norm:3.5794, tok/sec: 25581.41, flops:20.54, batch-reuse:1
@ 156 train 7.3333 , allloss: 7.9062, dt: 5101.53ms, fracRes: 0.9393, norm(attn): 0.0077, norm(output): 0.1436, norm(x): 0.1359, norm(y): 1.0006, norm:3.2728, tok/sec: 25692.66, flops:20.62, batch-reuse:1
@ 157 train 7.4268 , allloss: 8.0008, dt: 5090.69ms, fracRes: 0.9388, norm(attn): 0.0078, norm(output): 0.1543, norm(x): 0.1352, norm(y): 1.0007, norm:3.3557, tok/sec: 25747.37, flops:20.67, batch-reuse:1
@ 158 train 7.4069 , allloss: 7.9798, dt: 5090.98ms, fracRes: 0.9377, norm(attn): 0.0078, norm(output): 0.1543, norm(x): 0.1316, norm(y): 1.0007, norm:3.5302, tok/sec: 25745.93, flops:20.67, batch-reuse:1
@ 159 train 7.4471 , allloss: 8.0124, dt: 5084.33ms, fracRes: 0.9363, norm(attn): 0.0080, norm(output): 0.1475, norm(x): 0.1258, norm(y): 1.0006, norm:3.2829, tok/sec: 25779.58, flops:20.69, batch-reuse:1
@ 160 train 7.3229 , allloss: 7.8727, dt: 5099.76ms, fracRes: 0.9373, norm(attn): 0.0081, norm(output): 0.1504, norm(x): 0.1276, norm(y): 1.0007, norm:2.9448, tok/sec: 25701.59, flops:20.63, batch-reuse:1
@ 161 train 7.3281 , allloss: 7.8772, dt: 5126.87ms, fracRes: 0.9374, norm(attn): 0.0083, norm(output): 0.1523, norm(x): 0.1289, norm(y): 1.0007, norm:2.9572, tok/sec: 25565.70, flops:20.52, batch-reuse:1
@ 162 train 7.4132 , allloss: 7.9547, dt: 5062.57ms, fracRes: 0.9368, norm(attn): 0.0089, norm(output): 0.1426, norm(x): 0.1243, norm(y): 1.0007, norm:2.6491, tok/sec: 25890.42, flops:20.78, batch-reuse:1
@ 163 train 7.3354 , allloss: 7.8707, dt: 5089.64ms, fracRes: 0.9361, norm(attn): 0.0097, norm(output): 0.1406, norm(x): 0.1181, norm(y): 1.0007, norm:3.2999, tok/sec: 25752.73, flops:20.67, batch-reuse:1
@ 164 train 7.2313 , allloss: 7.7727, dt: 5087.91ms, fracRes: 0.9369, norm(attn): 0.0094, norm(output): 0.1396, norm(x): 0.1215, norm(y): 1.0008, norm:2.9764, tok/sec: 25761.48, flops:20.68, batch-reuse:1
@ 165 train 7.3331 , allloss: 7.8584, dt: 5100.27ms, fracRes: 0.9382, norm(attn): 0.0106, norm(output): 0.1396, norm(x): 0.1189, norm(y): 1.0008, norm:3.0108, tok/sec: 25699.05, flops:20.63, batch-reuse:1
@ 166 train 7.2958 , allloss: 7.8189, dt: 5076.62ms, fracRes: 0.9369, norm(attn): 0.0107, norm(output): 0.1387, norm(x): 0.1149, norm(y): 1.0007, norm:5.8178, tok/sec: 25818.74, flops:20.73, batch-reuse:1
@ 167 train 7.2831 , allloss: 7.8281, dt: 5131.48ms, fracRes: 0.9365, norm(attn): 0.0104, norm(output): 0.1396, norm(x): 0.1211, norm(y): 1.0008, norm:3.9802, tok/sec: 25542.72, flops:20.50, batch-reuse:1
@ 168 train 7.1934 , allloss: 7.7666, dt: 5115.06ms, fracRes: 0.9356, norm(attn): 0.0094, norm(output): 0.1338, norm(x): 0.1266, norm(y): 1.0009, norm:3.2927, tok/sec: 25624.72, flops:20.57, batch-reuse:1
@ 169 train 7.2507 , allloss: 7.8220, dt: 5054.87ms, fracRes: 0.9344, norm(attn): 0.0096, norm(output): 0.1299, norm(x): 0.1206, norm(y): 1.0009, norm:4.4083, tok/sec: 25929.85, flops:20.82, batch-reuse:1
@ 170 train 7.2236 , allloss: 7.7784, dt: 5083.54ms, fracRes: 0.9358, norm(attn): 0.0093, norm(output): 0.1318, norm(x): 0.1210, norm(y): 1.0009, norm:4.2976, tok/sec: 25783.59, flops:20.70, batch-reuse:1
@ 171 train 7.1969 , allloss: 7.7274, dt: 5110.18ms, fracRes: 0.9366, norm(attn): 0.0084, norm(output): 0.1328, norm(x): 0.1188, norm(y): 1.0009, norm:3.7881, tok/sec: 25649.18, flops:20.59, batch-reuse:1
@ 172 train 7.2294 , allloss: 7.7667, dt: 5113.46ms, fracRes: 0.9363, norm(attn): 0.0076, norm(output): 0.1270, norm(x): 0.1224, norm(y): 1.0011, norm:3.1309, tok/sec: 25632.74, flops:20.58, batch-reuse:1
@ 173 train 7.2034 , allloss: 7.7279, dt: 5105.67ms, fracRes: 0.9370, norm(attn): 0.0074, norm(output): 0.1235, norm(x): 0.1199, norm(y): 1.0011, norm:3.8920, tok/sec: 25671.87, flops:20.61, batch-reuse:1
@ 174 train 7.3541 , allloss: 7.8634, dt: 5174.19ms, fracRes: 0.9373, norm(attn): 0.0074, norm(output): 0.1240, norm(x): 0.1157, norm(y): 1.0010, norm:3.4971, tok/sec: 25331.89, flops:20.34, batch-reuse:1
@ 175 train 7.2663 , allloss: 7.7775, dt: 5073.73ms, fracRes: 0.9370, norm(attn): 0.0070, norm(output): 0.1240, norm(x): 0.1193, norm(y): 1.0010, norm:4.7509, tok/sec: 25833.46, flops:20.74, batch-reuse:1
@ 176 train 7.2577 , allloss: 7.7937, dt: 5107.84ms, fracRes: 0.9363, norm(attn): 0.0066, norm(output): 0.1318, norm(x): 0.1279, norm(y): 1.0011, norm:4.9642, tok/sec: 25660.95, flops:20.60, batch-reuse:1
@ 177 train 7.2143 , allloss: 7.7611, dt: 5105.32ms, fracRes: 0.9352, norm(attn): 0.0064, norm(output): 0.1328, norm(x): 0.1307, norm(y): 1.0011, norm:4.3540, tok/sec: 25673.64, flops:20.61, batch-reuse:1
@ 178 train 7.2664 , allloss: 7.8054, dt: 5094.85ms, fracRes: 0.9354, norm(attn): 0.0064, norm(output): 0.1338, norm(x): 0.1290, norm(y): 1.0011, norm:3.4639, tok/sec: 25726.39, flops:20.65, batch-reuse:1
@ 179 train 7.1221 , allloss: 7.6561, dt: 5057.17ms, fracRes: 0.9353, norm(attn): 0.0063, norm(output): 0.1328, norm(x): 0.1245, norm(y): 1.0010, norm:5.5832, tok/sec: 25918.04, flops:20.81, batch-reuse:1
@ 180 train 7.2609 , allloss: 7.7983, dt: 5066.56ms, fracRes: 0.9355, norm(attn): 0.0060, norm(output): 0.1260, norm(x): 0.1260, norm(y): 1.0011, norm:3.8800, tok/sec: 25870.03, flops:20.77, batch-reuse:1
@ 181 train 7.1865 , allloss: 7.7254, dt: 5070.82ms, fracRes: 0.9348, norm(attn): 0.0059, norm(output): 0.1245, norm(x): 0.1255, norm(y): 1.0010, norm:4.3052, tok/sec: 25848.30, flops:20.75, batch-reuse:1
@ 182 train 7.2133 , allloss: 7.7416, dt: 5094.45ms, fracRes: 0.9359, norm(attn): 0.0058, norm(output): 0.1357, norm(x): 0.1319, norm(y): 1.0011, norm:4.1279, tok/sec: 25728.40, flops:20.65, batch-reuse:1
@ 183 train 7.1690 , allloss: 7.7002, dt: 5104.10ms, fracRes: 0.9349, norm(attn): 0.0059, norm(output): 0.1396, norm(x): 0.1307, norm(y): 1.0011, norm:4.4421, tok/sec: 25679.73, flops:20.61, batch-reuse:1
@ 184 train 7.0133 , allloss: 7.5534, dt: 5100.69ms, fracRes: 0.9336, norm(attn): 0.0060, norm(output): 0.1387, norm(x): 0.1258, norm(y): 1.0010, norm:4.4936, tok/sec: 25696.91, flops:20.63, batch-reuse:1
@ 185 train 7.0802 , allloss: 7.6180, dt: 5106.00ms, fracRes: 0.9353, norm(attn): 0.0059, norm(output): 0.1348, norm(x): 0.1325, norm(y): 1.0014, norm:5.1546, tok/sec: 25670.21, flops:20.61, batch-reuse:1
@ 186 train 7.2711 , allloss: 7.8130, dt: 5083.06ms, fracRes: 0.9338, norm(attn): 0.0061, norm(output): 0.1328, norm(x): 0.1285, norm(y): 1.0013, norm:3.7947, tok/sec: 25786.05, flops:20.70, batch-reuse:1
@ 187 train 7.4319 , allloss: 7.9786, dt: 5084.55ms, fracRes: 0.9307, norm(attn): 0.0065, norm(output): 0.1348, norm(x): 0.1222, norm(y): 1.0009, norm:20.5150, tok/sec: 25778.47, flops:20.69, batch-reuse:1
@ 188 train 7.2292 , allloss: 7.7268, dt: 5117.52ms, fracRes: 0.9367, norm(attn): 0.0058, norm(output): 0.1396, norm(x): 0.1308, norm(y): 1.0011, norm:8.1775, tok/sec: 25612.43, flops:20.56, batch-reuse:1
@ 189 train 7.3474 , allloss: 7.8748, dt: 5152.93ms, fracRes: 0.9366, norm(attn): 0.0060, norm(output): 0.1416, norm(x): 0.1491, norm(y): 1.0015, norm:5.5496, tok/sec: 25436.41, flops:20.42, batch-reuse:1
@ 190 train 7.3055 , allloss: 7.8299, dt: 5112.20ms, fracRes: 0.9370, norm(attn): 0.0060, norm(output): 0.1416, norm(x): 0.1521, norm(y): 1.0016, norm:4.9610, tok/sec: 25639.04, flops:20.58, batch-reuse:1
@ 191 train 7.2365 , allloss: 7.7488, dt: 5089.99ms, fracRes: 0.9369, norm(attn): 0.0059, norm(output): 0.1416, norm(x): 0.1441, norm(y): 1.0014, norm:5.3418, tok/sec: 25750.92, flops:20.67, batch-reuse:1
@ 192 train 7.2744 , allloss: 7.8067, dt: 5128.62ms, fracRes: 0.9344, norm(attn): 0.0061, norm(output): 0.1416, norm(x): 0.1371, norm(y): 1.0012, norm:4.9840, tok/sec: 25556.97, flops:20.52, batch-reuse:1
@ 193 train 7.1823 , allloss: 7.7036, dt: 5126.66ms, fracRes: 0.9357, norm(attn): 0.0059, norm(output): 0.1406, norm(x): 0.1372, norm(y): 1.0011, norm:5.7378, tok/sec: 25566.75, flops:20.52, batch-reuse:1
@ 194 train 7.2938 , allloss: 7.7960, dt: 5065.95ms, fracRes: 0.9378, norm(attn): 0.0059, norm(output): 0.1396, norm(x): 0.1417, norm(y): 1.0012, norm:3.8085, tok/sec: 25873.13, flops:20.77, batch-reuse:1
@ 195 train 7.2323 , allloss: 7.7244, dt: 5091.00ms, fracRes: 0.9380, norm(attn): 0.0059, norm(output): 0.1396, norm(x): 0.1427, norm(y): 1.0012, norm:3.5254, tok/sec: 25745.83, flops:20.67, batch-reuse:1
@ 196 train 7.1489 , allloss: 7.6295, dt: 5048.88ms, fracRes: 0.9379, norm(attn): 0.0057, norm(output): 0.1396, norm(x): 0.1404, norm(y): 1.0011, norm:3.7842, tok/sec: 25960.62, flops:20.84, batch-reuse:1
@ 197 train 7.1263 , allloss: 7.6033, dt: 5104.56ms, fracRes: 0.9377, norm(attn): 0.0057, norm(output): 0.1406, norm(x): 0.1395, norm(y): 1.0011, norm:2.5135, tok/sec: 25677.45, flops:20.61, batch-reuse:1
@ 198 train 7.0857 , allloss: 7.5682, dt: 5105.17ms, fracRes: 0.9370, norm(attn): 0.0058, norm(output): 0.1416, norm(x): 0.1391, norm(y): 1.0012, norm:3.3056, tok/sec: 25674.37, flops:20.61, batch-reuse:1
@ 199 train 7.1680 , allloss: 7.6747, dt: 5084.88ms, fracRes: 0.9337, norm(attn): 0.0060, norm(output): 0.1416, norm(x): 0.1367, norm(y): 1.0013, norm:4.8177, tok/sec: 25776.79, flops:20.69, batch-reuse:1
@ 200 train 7.1888 , allloss: 7.6582, dt: 5095.77ms, fracRes: 0.9373, norm(attn): 0.0056, norm(output): 0.1406, norm(x): 0.1325, norm(y): 1.0012, norm:4.8474, tok/sec: 25721.71, flops:20.65, batch-reuse:1
@ 201 train 7.1676 , allloss: 7.6222, dt: 5094.56ms, fracRes: 0.9384, norm(attn): 0.0056, norm(output): 0.1396, norm(x): 0.1338, norm(y): 1.0013, norm:2.7868, tok/sec: 25727.82, flops:20.65, batch-reuse:1
@ 202 train 7.2042 , allloss: 7.6494, dt: 5079.93ms, fracRes: 0.9386, norm(attn): 0.0055, norm(output): 0.1406, norm(x): 0.1310, norm(y): 1.0013, norm:2.3536, tok/sec: 25801.94, flops:20.71, batch-reuse:1
@ 203 train 7.1764 , allloss: 7.6271, dt: 5079.84ms, fracRes: 0.9374, norm(attn): 0.0054, norm(output): 0.1426, norm(x): 0.1268, norm(y): 1.0011, norm:5.2798, tok/sec: 25802.41, flops:20.71, batch-reuse:1
@ 204 train 7.1397 , allloss: 7.5993, dt: 5048.23ms, fracRes: 0.9377, norm(attn): 0.0052, norm(output): 0.1426, norm(x): 0.1303, norm(y): 1.0013, norm:3.3669, tok/sec: 25963.94, flops:20.84, batch-reuse:1
@ 205 train 7.1066 , allloss: 7.5638, dt: 5127.15ms, fracRes: 0.9378, norm(attn): 0.0050, norm(output): 0.1416, norm(x): 0.1325, norm(y): 1.0013, norm:2.4686, tok/sec: 25564.28, flops:20.52, batch-reuse:1
@ 206 train 7.1463 , allloss: 7.6065, dt: 5111.88ms, fracRes: 0.9368, norm(attn): 0.0049, norm(output): 0.1426, norm(x): 0.1353, norm(y): 1.0013, norm:4.0815, tok/sec: 25640.65, flops:20.58, batch-reuse:1
@ 207 train 7.0319 , allloss: 7.4866, dt: 5050.00ms, fracRes: 0.9379, norm(attn): 0.0046, norm(output): 0.1494, norm(x): 0.1421, norm(y): 1.0015, norm:3.2879, tok/sec: 25954.86, flops:20.84, batch-reuse:1
@ 208 train 7.1071 , allloss: 7.5699, dt: 5095.59ms, fracRes: 0.9376, norm(attn): 0.0045, norm(output): 0.1553, norm(x): 0.1449, norm(y): 1.0015, norm:3.4298, tok/sec: 25722.65, flops:20.65, batch-reuse:1
@ 209 train 7.1617 , allloss: 7.6630, dt: 5108.19ms, fracRes: 0.9314, norm(attn): 0.0049, norm(output): 0.1582, norm(x): 0.1425, norm(y): 1.0011, norm:8.1404, tok/sec: 25659.17, flops:20.60, batch-reuse:1
@ 210 train 7.0875 , allloss: 7.5633, dt: 5079.17ms, fracRes: 0.9368, norm(attn): 0.0050, norm(output): 0.1709, norm(x): 0.1448, norm(y): 1.0013, norm:2.7145, tok/sec: 25805.81, flops:20.72, batch-reuse:1
@ 211 train 7.0133 , allloss: 7.4765, dt: 5103.68ms, fracRes: 0.9379, norm(attn): 0.0052, norm(output): 0.1699, norm(x): 0.1450, norm(y): 1.0014, norm:2.6914, tok/sec: 25681.87, flops:20.62, batch-reuse:1
@ 212 train 7.1054 , allloss: 7.5736, dt: 5103.06ms, fracRes: 0.9376, norm(attn): 0.0056, norm(output): 0.1699, norm(x): 0.1364, norm(y): 1.0011, norm:3.6941, tok/sec: 25684.97, flops:20.62, batch-reuse:1
@ 213 train 6.9866 , allloss: 7.4526, dt: 5076.13ms, fracRes: 0.9377, norm(attn): 0.0055, norm(output): 0.1699, norm(x): 0.1343, norm(y): 1.0011, norm:3.3411, tok/sec: 25821.25, flops:20.73, batch-reuse:1
@ 214 train 7.0269 , allloss: 7.4917, dt: 5108.28ms, fracRes: 0.9379, norm(attn): 0.0055, norm(output): 0.1699, norm(x): 0.1362, norm(y): 1.0012, norm:3.4175, tok/sec: 25658.72, flops:20.60, batch-reuse:1
@ 215 train 6.9279 , allloss: 7.3876, dt: 5125.31ms, fracRes: 0.9378, norm(attn): 0.0059, norm(output): 0.1709, norm(x): 0.1349, norm(y): 1.0010, norm:3.0602, tok/sec: 25573.50, flops:20.53, batch-reuse:1
@ 216 train 6.9614 , allloss: 7.4153, dt: 5118.32ms, fracRes: 0.9380, norm(attn): 0.0060, norm(output): 0.1709, norm(x): 0.1358, norm(y): 1.0011, norm:3.2785, tok/sec: 25608.38, flops:20.56, batch-reuse:1
@ 217 train 7.0311 , allloss: 7.4861, dt: 5104.48ms, fracRes: 0.9377, norm(attn): 0.0060, norm(output): 0.1699, norm(x): 0.1319, norm(y): 1.0010, norm:3.9634, tok/sec: 25677.85, flops:20.61, batch-reuse:1
@ 218 train 6.9917 , allloss: 7.4334, dt: 5065.81ms, fracRes: 0.9382, norm(attn): 0.0059, norm(output): 0.1592, norm(x): 0.1307, norm(y): 1.0010, norm:3.1944, tok/sec: 25873.86, flops:20.77, batch-reuse:1
@ 219 train 7.1126 , allloss: 7.5477, dt: 5077.31ms, fracRes: 0.9382, norm(attn): 0.0060, norm(output): 0.1621, norm(x): 0.1316, norm(y): 1.0010, norm:2.7332, tok/sec: 25815.23, flops:20.72, batch-reuse:1
@ 220 train 7.0400 , allloss: 7.4751, dt: 5061.88ms, fracRes: 0.9384, norm(attn): 0.0059, norm(output): 0.1699, norm(x): 0.1336, norm(y): 1.0011, norm:2.3792, tok/sec: 25893.92, flops:20.79, batch-reuse:1
@ 221 train 7.0509 , allloss: 7.4863, dt: 5093.44ms, fracRes: 0.9384, norm(attn): 0.0056, norm(output): 0.1709, norm(x): 0.1397, norm(y): 1.0011, norm:3.7144, tok/sec: 25733.47, flops:20.66, batch-reuse:1
@ 222 train 6.9930 , allloss: 7.4451, dt: 5134.03ms, fracRes: 0.9369, norm(attn): 0.0058, norm(output): 0.1709, norm(x): 0.1376, norm(y): 1.0008, norm:4.9311, tok/sec: 25530.04, flops:20.49, batch-reuse:1
@ 223 train 7.0043 , allloss: 7.4530, dt: 5103.41ms, fracRes: 0.9376, norm(attn): 0.0058, norm(output): 0.1709, norm(x): 0.1387, norm(y): 1.0010, norm:2.5785, tok/sec: 25683.21, flops:20.62, batch-reuse:1
@ 224 train 6.9186 , allloss: 7.3699, dt: 5068.19ms, fracRes: 0.9371, norm(attn): 0.0060, norm(output): 0.1709, norm(x): 0.1373, norm(y): 1.0009, norm:2.9652, tok/sec: 25861.68, flops:20.76, batch-reuse:1
@ 225 train 6.9416 , allloss: 7.3850, dt: 5098.44ms, fracRes: 0.9382, norm(attn): 0.0059, norm(output): 0.1709, norm(x): 0.1395, norm(y): 1.0012, norm:2.5239, tok/sec: 25708.25, flops:20.64, batch-reuse:1
@ 226 train 7.0121 , allloss: 7.4675, dt: 5057.87ms, fracRes: 0.9376, norm(attn): 0.0062, norm(output): 0.1738, norm(x): 0.1368, norm(y): 1.0009, norm:4.3137, tok/sec: 25914.45, flops:20.80, batch-reuse:1
@ 227 train 6.9820 , allloss: 7.4414, dt: 5098.08ms, fracRes: 0.9382, norm(attn): 0.0060, norm(output): 0.1768, norm(x): 0.1397, norm(y): 1.0011, norm:3.7494, tok/sec: 25710.06, flops:20.64, batch-reuse:1
@ 228 train 6.9532 , allloss: 7.4074, dt: 5112.39ms, fracRes: 0.9381, norm(attn): 0.0061, norm(output): 0.1719, norm(x): 0.1387, norm(y): 1.0010, norm:3.1787, tok/sec: 25638.10, flops:20.58, batch-reuse:1
@ 229 train 6.9954 , allloss: 7.4518, dt: 5131.14ms, fracRes: 0.9374, norm(attn): 0.0060, norm(output): 0.1719, norm(x): 0.1375, norm(y): 1.0008, norm:2.7137, tok/sec: 25544.44, flops:20.51, batch-reuse:1
@ 230 train 6.9724 , allloss: 7.4235, dt: 5065.43ms, fracRes: 0.9379, norm(attn): 0.0060, norm(output): 0.1709, norm(x): 0.1392, norm(y): 1.0010, norm:2.1443, tok/sec: 25875.81, flops:20.77, batch-reuse:1
@ 231 train 6.9018 , allloss: 7.3525, dt: 5089.50ms, fracRes: 0.9371, norm(attn): 0.0060, norm(output): 0.1699, norm(x): 0.1356, norm(y): 1.0008, norm:4.8732, tok/sec: 25753.40, flops:20.67, batch-reuse:1
@ 232 train 6.8742 , allloss: 7.3238, dt: 5106.34ms, fracRes: 0.9381, norm(attn): 0.0060, norm(output): 0.1699, norm(x): 0.1380, norm(y): 1.0010, norm:3.6622, tok/sec: 25668.47, flops:20.61, batch-reuse:1
@ 233 train 6.9507 , allloss: 7.3956, dt: 5114.05ms, fracRes: 0.9381, norm(attn): 0.0062, norm(output): 0.1699, norm(x): 0.1378, norm(y): 1.0010, norm:2.5462, tok/sec: 25629.77, flops:20.57, batch-reuse:1
@ 234 train 6.7840 , allloss: 7.2407, dt: 5109.43ms, fracRes: 0.9372, norm(attn): 0.0063, norm(output): 0.1709, norm(x): 0.1350, norm(y): 1.0009, norm:5.2268, tok/sec: 25652.96, flops:20.59, batch-reuse:1
@ 235 train 6.9163 , allloss: 7.3701, dt: 5092.93ms, fracRes: 0.9381, norm(attn): 0.0064, norm(output): 0.1699, norm(x): 0.1371, norm(y): 1.0011, norm:3.6144, tok/sec: 25736.06, flops:20.66, batch-reuse:1
@ 236 train 6.7757 , allloss: 7.2325, dt: 5105.20ms, fracRes: 0.9380, norm(attn): 0.0067, norm(output): 0.1709, norm(x): 0.1358, norm(y): 1.0009, norm:3.0015, tok/sec: 25674.23, flops:20.61, batch-reuse:1
@ 237 train 6.8753 , allloss: 7.3314, dt: 5070.70ms, fracRes: 0.9377, norm(attn): 0.0069, norm(output): 0.1709, norm(x): 0.1333, norm(y): 1.0008, norm:2.8024, tok/sec: 25848.91, flops:20.75, batch-reuse:1
@ 238 train 6.8492 , allloss: 7.2967, dt: 5108.36ms, fracRes: 0.9374, norm(attn): 0.0071, norm(output): 0.1670, norm(x): 0.1285, norm(y): 1.0006, norm:4.9117, tok/sec: 25658.36, flops:20.60, batch-reuse:1
@ 239 train 6.8473 , allloss: 7.2852, dt: 5081.88ms, fracRes: 0.9385, norm(attn): 0.0069, norm(output): 0.1562, norm(x): 0.1293, norm(y): 1.0009, norm:2.8598, tok/sec: 25792.01, flops:20.70, batch-reuse:1
@ 240 train 6.9119 , allloss: 7.3453, dt: 5082.65ms, fracRes: 0.9382, norm(attn): 0.0071, norm(output): 0.1562, norm(x): 0.1267, norm(y): 1.0007, norm:2.7311, tok/sec: 25788.10, flops:20.70, batch-reuse:1
@ 241 train 6.9037 , allloss: 7.3556, dt: 5113.72ms, fracRes: 0.9337, norm(attn): 0.0081, norm(output): 0.1562, norm(x): 0.1258, norm(y): 1.0006, norm:8.8837, tok/sec: 25631.46, flops:20.58, batch-reuse:1
@ 242 train 6.8932 , allloss: 7.3216, dt: 5088.70ms, fracRes: 0.9384, norm(attn): 0.0071, norm(output): 0.1543, norm(x): 0.1271, norm(y): 1.0010, norm:3.3725, tok/sec: 25757.47, flops:20.68, batch-reuse:1
@ 243 train 6.7265 , allloss: 7.1522, dt: 5113.68ms, fracRes: 0.9382, norm(attn): 0.0072, norm(output): 0.1562, norm(x): 0.1280, norm(y): 1.0009, norm:3.8295, tok/sec: 25631.66, flops:20.58, batch-reuse:1
@ 244 train 6.9280 , allloss: 7.3461, dt: 5094.94ms, fracRes: 0.9387, norm(attn): 0.0075, norm(output): 0.1562, norm(x): 0.1273, norm(y): 1.0009, norm:2.9804, tok/sec: 25725.93, flops:20.65, batch-reuse:1
@ 245 train 6.7375 , allloss: 7.1581, dt: 5095.60ms, fracRes: 0.9382, norm(attn): 0.0078, norm(output): 0.1670, norm(x): 0.1250, norm(y): 1.0007, norm:4.1787, tok/sec: 25722.60, flops:20.65, batch-reuse:1
@ 246 train 6.9555 , allloss: 7.3806, dt: 5111.23ms, fracRes: 0.9383, norm(attn): 0.0077, norm(output): 0.1562, norm(x): 0.1270, norm(y): 1.0009, norm:2.6500, tok/sec: 25643.91, flops:20.59, batch-reuse:1
@ 247 train 6.8392 , allloss: 7.2671, dt: 5064.19ms, fracRes: 0.9378, norm(attn): 0.0078, norm(output): 0.1562, norm(x): 0.1251, norm(y): 1.0007, norm:4.1357, tok/sec: 25882.11, flops:20.78, batch-reuse:1
@ 248 train 6.7721 , allloss: 7.1946, dt: 5224.85ms, fracRes: 0.9379, norm(attn): 0.0076, norm(output): 0.1553, norm(x): 0.1240, norm(y): 1.0008, norm:2.2062, tok/sec: 25086.27, flops:20.14, batch-reuse:1
@ 249 train 6.7374 , allloss: 7.1510, dt: 5136.15ms, fracRes: 0.9382, norm(attn): 0.0074, norm(output): 0.1475, norm(x): 0.1202, norm(y): 1.0007, norm:2.8696, tok/sec: 25519.52, flops:20.49, batch-reuse:1
@ 250 train 6.7925 , allloss: 7.2016, dt: 5084.06ms, fracRes: 0.9383, norm(attn): 0.0074, norm(output): 0.1426, norm(x): 0.1212, norm(y): 1.0007, norm:2.4831, tok/sec: 25780.99, flops:20.70, batch-reuse:1
@ 251 train 6.7089 , allloss: 7.1197, dt: 5069.54ms, fracRes: 0.9379, norm(attn): 0.0073, norm(output): 0.1543, norm(x): 0.1245, norm(y): 1.0008, norm:2.8834, tok/sec: 25854.82, flops:20.75, batch-reuse:1
@ 252 train 6.8769 , allloss: 7.2917, dt: 5107.64ms, fracRes: 0.9370, norm(attn): 0.0074, norm(output): 0.1523, norm(x): 0.1244, norm(y): 1.0006, norm:2.5482, tok/sec: 25661.95, flops:20.60, batch-reuse:1
@ 253 train 6.7333 , allloss: 7.1470, dt: 5115.32ms, fracRes: 0.9376, norm(attn): 0.0075, norm(output): 0.1426, norm(x): 0.1226, norm(y): 1.0007, norm:3.3009, tok/sec: 25623.42, flops:20.57, batch-reuse:1
@ 254 train 6.6710 , allloss: 7.0748, dt: 5127.48ms, fracRes: 0.9386, norm(attn): 0.0075, norm(output): 0.1416, norm(x): 0.1237, norm(y): 1.0010, norm:2.8525, tok/sec: 25562.67, flops:20.52, batch-reuse:1
@ 255 train 6.7048 , allloss: 7.1342, dt: 5136.38ms, fracRes: 0.9352, norm(attn): 0.0090, norm(output): 0.1543, norm(x): 0.1254, norm(y): 1.0005, norm:5.0522, tok/sec: 25518.37, flops:20.48, batch-reuse:1
@ 256 train 6.7220 , allloss: 7.1305, dt: 5099.96ms, fracRes: 0.9382, norm(attn): 0.0078, norm(output): 0.1426, norm(x): 0.1246, norm(y): 1.0007, norm:2.3873, tok/sec: 25700.58, flops:20.63, batch-reuse:1
@ 257 train 6.7947 , allloss: 7.2186, dt: 5085.07ms, fracRes: 0.9373, norm(attn): 0.0075, norm(output): 0.1416, norm(x): 0.1279, norm(y): 1.0008, norm:4.3916, tok/sec: 25775.86, flops:20.69, batch-reuse:1
@ 258 train 6.7162 , allloss: 7.1397, dt: 5099.97ms, fracRes: 0.9374, norm(attn): 0.0077, norm(output): 0.1406, norm(x): 0.1267, norm(y): 1.0007, norm:3.4703, tok/sec: 25700.52, flops:20.63, batch-reuse:1
@ 259 train 6.7213 , allloss: 7.1446, dt: 5114.69ms, fracRes: 0.9372, norm(attn): 0.0084, norm(output): 0.1416, norm(x): 0.1269, norm(y): 1.0004, norm:4.4906, tok/sec: 25626.60, flops:20.57, batch-reuse:1
@ 260 train 6.8089 , allloss: 7.2279, dt: 5104.26ms, fracRes: 0.9383, norm(attn): 0.0082, norm(output): 0.1416, norm(x): 0.1274, norm(y): 1.0006, norm:3.3452, tok/sec: 25678.95, flops:20.61, batch-reuse:1
@ 261 train 6.7322 , allloss: 7.1598, dt: 5121.14ms, fracRes: 0.9372, norm(attn): 0.0089, norm(output): 0.1406, norm(x): 0.1269, norm(y): 1.0005, norm:3.0482, tok/sec: 25594.31, flops:20.55, batch-reuse:1
@ 262 train 6.7998 , allloss: 7.2238, dt: 5116.29ms, fracRes: 0.9380, norm(attn): 0.0096, norm(output): 0.1396, norm(x): 0.1243, norm(y): 1.0007, norm:3.2021, tok/sec: 25618.54, flops:20.57, batch-reuse:1
@ 263 train 6.7450 , allloss: 7.1724, dt: 5119.08ms, fracRes: 0.9375, norm(attn): 0.0095, norm(output): 0.1396, norm(x): 0.1243, norm(y): 1.0008, norm:2.8616, tok/sec: 25604.61, flops:20.55, batch-reuse:1
@ 264 train 6.7252 , allloss: 7.1805, dt: 5102.10ms, fracRes: 0.9341, norm(attn): 0.0104, norm(output): 0.1406, norm(x): 0.1271, norm(y): 1.0005, norm:6.0655, tok/sec: 25689.81, flops:20.62, batch-reuse:1
@ 265 train 6.7323 , allloss: 7.1454, dt: 5157.97ms, fracRes: 0.9388, norm(attn): 0.0107, norm(output): 0.1416, norm(x): 0.1177, norm(y): 1.0002, norm:3.9612, tok/sec: 25411.57, flops:20.40, batch-reuse:1
@ 266 train 6.6890 , allloss: 7.0793, dt: 5101.60ms, fracRes: 0.9417, norm(attn): 0.0105, norm(output): 0.1387, norm(x): 0.1124, norm(y): 1.0004, norm:3.7722, tok/sec: 25692.32, flops:20.62, batch-reuse:1
@ 267 train 6.6860 , allloss: 7.1126, dt: 5108.19ms, fracRes: 0.9379, norm(attn): 0.0107, norm(output): 0.1348, norm(x): 0.1171, norm(y): 1.0006, norm:2.9212, tok/sec: 25659.19, flops:20.60, batch-reuse:1
@ 268 train 6.8061 , allloss: 7.2710, dt: 5128.74ms, fracRes: 0.9344, norm(attn): 0.0099, norm(output): 0.1396, norm(x): 0.1234, norm(y): 1.0004, norm:10.3000, tok/sec: 25556.37, flops:20.52, batch-reuse:1
@ 269 train 6.7140 , allloss: 7.1633, dt: 5123.10ms, fracRes: 0.9371, norm(attn): 0.0090, norm(output): 0.1387, norm(x): 0.1296, norm(y): 1.0008, norm:3.3940, tok/sec: 25584.53, flops:20.54, batch-reuse:1
@ 270 train 6.8174 , allloss: 7.2853, dt: 5071.48ms, fracRes: 0.9345, norm(attn): 0.0089, norm(output): 0.1338, norm(x): 0.1295, norm(y): 1.0010, norm:4.0010, tok/sec: 25844.93, flops:20.75, batch-reuse:1
@ 271 train 6.6745 , allloss: 7.1480, dt: 5094.78ms, fracRes: 0.9334, norm(attn): 0.0092, norm(output): 0.1387, norm(x): 0.1287, norm(y): 1.0007, norm:2.9093, tok/sec: 25726.70, flops:20.65, batch-reuse:1
@ 272 train 6.6890 , allloss: 7.1432, dt: 5106.77ms, fracRes: 0.9360, norm(attn): 0.0096, norm(output): 0.1396, norm(x): 0.1266, norm(y): 1.0005, norm:3.1167, tok/sec: 25666.33, flops:20.60, batch-reuse:1
@ 273 train 6.8214 , allloss: 7.2645, dt: 5091.80ms, fracRes: 0.9371, norm(attn): 0.0099, norm(output): 0.1377, norm(x): 0.1235, norm(y): 1.0005, norm:2.5627, tok/sec: 25741.80, flops:20.66, batch-reuse:1
@ 274 train 6.7160 , allloss: 7.1563, dt: 5134.91ms, fracRes: 0.9372, norm(attn): 0.0107, norm(output): 0.1348, norm(x): 0.1205, norm(y): 1.0003, norm:4.0250, tok/sec: 25525.65, flops:20.49, batch-reuse:1
@ 275 train 6.6715 , allloss: 7.1122, dt: 5107.08ms, fracRes: 0.9369, norm(attn): 0.0110, norm(output): 0.1279, norm(x): 0.1158, norm(y): 1.0004, norm:3.2664, tok/sec: 25664.77, flops:20.60, batch-reuse:1
@ 276 train 6.6591 , allloss: 7.0893, dt: 5084.07ms, fracRes: 0.9371, norm(attn): 0.0115, norm(output): 0.1367, norm(x): 0.1137, norm(y): 1.0002, norm:2.7067, tok/sec: 25780.90, flops:20.70, batch-reuse:1
@ 277 train 6.5207 , allloss: 6.9548, dt: 5108.42ms, fracRes: 0.9365, norm(attn): 0.0115, norm(output): 0.1387, norm(x): 0.1160, norm(y): 1.0003, norm:2.3259, tok/sec: 25658.02, flops:20.60, batch-reuse:1
@ 278 train 6.6590 , allloss: 7.1160, dt: 5122.71ms, fracRes: 0.9359, norm(attn): 0.0117, norm(output): 0.1230, norm(x): 0.1208, norm(y): 1.0006, norm:3.1426, tok/sec: 25586.44, flops:20.54, batch-reuse:1
@ 279 train 6.5942 , allloss: 7.1095, dt: 5091.44ms, fracRes: 0.9282, norm(attn): 0.0125, norm(output): 0.1328, norm(x): 0.1205, norm(y): 1.0004, norm:4.4596, tok/sec: 25743.63, flops:20.67, batch-reuse:1
@ 280 train 6.7498 , allloss: 7.2092, dt: 5136.07ms, fracRes: 0.9358, norm(attn): 0.0125, norm(output): 0.1387, norm(x): 0.1183, norm(y): 0.9999, norm:3.7100, tok/sec: 25519.92, flops:20.49, batch-reuse:1
@ 281 train 6.5926 , allloss: 7.0346, dt: 5097.64ms, fracRes: 0.9374, norm(attn): 0.0121, norm(output): 0.1187, norm(x): 0.1148, norm(y): 1.0002, norm:3.5109, tok/sec: 25712.31, flops:20.64, batch-reuse:1
@ 282 train 6.5511 , allloss: 6.9978, dt: 5100.04ms, fracRes: 0.9370, norm(attn): 0.0126, norm(output): 0.1191, norm(x): 0.1120, norm(y): 0.9999, norm:2.2782, tok/sec: 25700.19, flops:20.63, batch-reuse:1
@ 283 train 6.5175 , allloss: 6.9618, dt: 5064.78ms, fracRes: 0.9362, norm(attn): 0.0123, norm(output): 0.1172, norm(x): 0.1130, norm(y): 1.0000, norm:2.7023, tok/sec: 25879.12, flops:20.77, batch-reuse:1
@ 284 train 6.6190 , allloss: 7.0465, dt: 5135.92ms, fracRes: 0.9376, norm(attn): 0.0115, norm(output): 0.1162, norm(x): 0.1138, norm(y): 1.0003, norm:2.8291, tok/sec: 25520.63, flops:20.49, batch-reuse:1
@ 285 train 6.6085 , allloss: 7.0306, dt: 5122.34ms, fracRes: 0.9371, norm(attn): 0.0115, norm(output): 0.1172, norm(x): 0.1123, norm(y): 1.0001, norm:2.4703, tok/sec: 25588.30, flops:20.54, batch-reuse:1
@ 286 train 6.6307 , allloss: 7.0737, dt: 5109.00ms, fracRes: 0.9354, norm(attn): 0.0112, norm(output): 0.1172, norm(x): 0.1180, norm(y): 1.0001, norm:3.0314, tok/sec: 25655.12, flops:20.59, batch-reuse:1
@ 287 train 6.6230 , allloss: 7.0583, dt: 5110.73ms, fracRes: 0.9369, norm(attn): 0.0114, norm(output): 0.1157, norm(x): 0.1182, norm(y): 1.0003, norm:2.6268, tok/sec: 25646.42, flops:20.59, batch-reuse:1
@ 288 train 6.6385 , allloss: 7.0904, dt: 5087.18ms, fracRes: 0.9365, norm(attn): 0.0120, norm(output): 0.1162, norm(x): 0.1187, norm(y): 1.0001, norm:3.5357, tok/sec: 25765.18, flops:20.68, batch-reuse:1
@ 289 train 6.6099 , allloss: 7.0497, dt: 5103.65ms, fracRes: 0.9373, norm(attn): 0.0115, norm(output): 0.1099, norm(x): 0.1236, norm(y): 1.0003, norm:2.6774, tok/sec: 25682.02, flops:20.62, batch-reuse:1
@ 290 train 6.5844 , allloss: 7.0214, dt: 5139.59ms, fracRes: 0.9369, norm(attn): 0.0117, norm(output): 0.1099, norm(x): 0.1220, norm(y): 1.0001, norm:2.5976, tok/sec: 25502.41, flops:20.47, batch-reuse:1
@ 291 train 6.4714 , allloss: 6.8926, dt: 5090.81ms, fracRes: 0.9369, norm(attn): 0.0118, norm(output): 0.1074, norm(x): 0.1158, norm(y): 1.0001, norm:2.2265, tok/sec: 25746.78, flops:20.67, batch-reuse:1
@ 292 train 6.5299 , allloss: 6.9313, dt: 5069.35ms, fracRes: 0.9367, norm(attn): 0.0118, norm(output): 0.1001, norm(x): 0.1056, norm(y): 1.0001, norm:2.9262, tok/sec: 25855.80, flops:20.76, batch-reuse:1
@ 293 train 6.5841 , allloss: 6.9849, dt: 5091.36ms, fracRes: 0.9366, norm(attn): 0.0118, norm(output): 0.0996, norm(x): 0.1047, norm(y): 1.0001, norm:1.9379, tok/sec: 25744.02, flops:20.67, batch-reuse:1
@ 294 train 6.5680 , allloss: 6.9636, dt: 5113.29ms, fracRes: 0.9371, norm(attn): 0.0123, norm(output): 0.0991, norm(x): 0.1052, norm(y): 0.9999, norm:2.7476, tok/sec: 25633.59, flops:20.58, batch-reuse:1
@ 295 train 6.5949 , allloss: 7.0247, dt: 5109.90ms, fracRes: 0.9376, norm(attn): 0.0135, norm(output): 0.0942, norm(x): 0.1202, norm(y): 1.0001, norm:3.0893, tok/sec: 25650.61, flops:20.59, batch-reuse:1
@ 296 train 6.5161 , allloss: 6.9450, dt: 5082.89ms, fracRes: 0.9362, norm(attn): 0.0137, norm(output): 0.1016, norm(x): 0.1165, norm(y): 0.9996, norm:4.9758, tok/sec: 25786.91, flops:20.70, batch-reuse:1
@ 297 train 6.4423 , allloss: 6.8659, dt: 5082.52ms, fracRes: 0.9373, norm(attn): 0.0132, norm(output): 0.0942, norm(x): 0.1199, norm(y): 1.0001, norm:2.2665, tok/sec: 25788.78, flops:20.70, batch-reuse:1
@ 298 train 6.5805 , allloss: 7.0461, dt: 5116.92ms, fracRes: 0.9314, norm(attn): 0.0134, norm(output): 0.0938, norm(x): 0.1079, norm(y): 1.0000, norm:11.0455, tok/sec: 25615.39, flops:20.56, batch-reuse:1
@ 299 train 6.5771 , allloss: 6.9896, dt: 5099.62ms, fracRes: 0.9394, norm(attn): 0.0130, norm(output): 0.0913, norm(x): 0.1138, norm(y): 1.0003, norm:4.2113, tok/sec: 25702.28, flops:20.63, batch-reuse:1
@ 300 train 6.6079 , allloss: 6.9791, dt: 5152.07ms, fracRes: 0.9400, norm(attn): 0.0109, norm(output): 0.0947, norm(x): 0.0986, norm(y): 0.9996, norm:9.7073, tok/sec: 25440.65, flops:20.42, batch-reuse:1
@ 301 train 6.8288 , allloss: 7.3274, dt: 5114.72ms, fracRes: 0.9189, norm(attn): 0.0142, norm(output): 0.0962, norm(x): 0.0958, norm(y): 0.9997, norm:43.3445, tok/sec: 25626.45, flops:20.57, batch-reuse:1
@ 302 train 6.6686 , allloss: 7.0982, dt: 5171.68ms, fracRes: 0.9344, norm(attn): 0.0154, norm(output): 0.0938, norm(x): 0.0755, norm(y): 0.9993, norm:7.9690, tok/sec: 25344.18, flops:20.35, batch-reuse:1
@ 303 train 8.2609 , allloss: 9.8431, dt: 5137.63ms, fracRes: 0.7204, norm(attn): 0.0483, norm(output): 0.0942, norm(x): 0.0925, norm(y): 0.9997, norm:294.9632, tok/sec: 25512.15, flops:20.48, batch-reuse:1
@ 304 train 6.7217 , allloss: 7.3587, dt: 5069.62ms, fracRes: 0.9244, norm(attn): 0.0134, norm(output): 0.0967, norm(x): 0.0977, norm(y): 1.0002, norm:14.2413, tok/sec: 25854.40, flops:20.75, batch-reuse:1
@ 305 train 6.5882 , allloss: 7.1619, dt: 5114.45ms, fracRes: 0.9373, norm(attn): 0.0120, norm(output): 0.0938, norm(x): 0.1471, norm(y): 1.0011, norm:4.8434, tok/sec: 25627.76, flops:20.57, batch-reuse:1
@ 306 train 6.6605 , allloss: 7.2478, dt: 5094.78ms, fracRes: 0.9376, norm(attn): 0.0138, norm(output): 0.0947, norm(x): 0.1412, norm(y): 1.0004, norm:12.9130, tok/sec: 25726.74, flops:20.65, batch-reuse:1
@ 307 train 6.7496 , allloss: 7.3164, dt: 5112.86ms, fracRes: 0.9375, norm(attn): 0.0105, norm(output): 0.1006, norm(x): 0.1564, norm(y): 1.0007, norm:4.3706, tok/sec: 25635.74, flops:20.58, batch-reuse:1
@ 308 train 6.5411 , allloss: 7.0793, dt: 5091.99ms, fracRes: 0.9375, norm(attn): 0.0095, norm(output): 0.1011, norm(x): 0.1453, norm(y): 1.0005, norm:2.7326, tok/sec: 25740.80, flops:20.66, batch-reuse:1
@ 309 train 6.5796 , allloss: 7.1049, dt: 5091.30ms, fracRes: 0.9376, norm(attn): 0.0098, norm(output): 0.1006, norm(x): 0.1376, norm(y): 1.0003, norm:3.2606, tok/sec: 25744.29, flops:20.67, batch-reuse:1
@ 310 train 6.6582 , allloss: 7.1521, dt: 5146.31ms, fracRes: 0.9380, norm(attn): 0.0100, norm(output): 0.1128, norm(x): 0.1179, norm(y): 0.9995, norm:5.7738, tok/sec: 25469.14, flops:20.45, batch-reuse:1
@ 311 train 6.6285 , allloss: 7.1278, dt: 5109.54ms, fracRes: 0.9380, norm(attn): 0.0100, norm(output): 0.1016, norm(x): 0.1278, norm(y): 0.9998, norm:2.5375, tok/sec: 25652.43, flops:20.59, batch-reuse:1
@ 312 train 6.6982 , allloss: 7.1638, dt: 5133.25ms, fracRes: 0.9383, norm(attn): 0.0108, norm(output): 0.1011, norm(x): 0.1189, norm(y): 0.9997, norm:2.5304, tok/sec: 25533.94, flops:20.50, batch-reuse:1
@ 313 train 6.5064 , allloss: 6.9591, dt: 5115.54ms, fracRes: 0.9388, norm(attn): 0.0106, norm(output): 0.1104, norm(x): 0.1213, norm(y): 0.9993, norm:4.1081, tok/sec: 25622.32, flops:20.57, batch-reuse:1
@ 314 train 6.5046 , allloss: 6.9337, dt: 5079.82ms, fracRes: 0.9388, norm(attn): 0.0117, norm(output): 0.0957, norm(x): 0.1086, norm(y): 0.9996, norm:2.5493, tok/sec: 25802.47, flops:20.71, batch-reuse:1
@ 315 train 6.5172 , allloss: 6.9380, dt: 5088.14ms, fracRes: 0.9388, norm(attn): 0.0119, norm(output): 0.0947, norm(x): 0.1060, norm(y): 0.9996, norm:2.2241, tok/sec: 25760.31, flops:20.68, batch-reuse:1
@ 316 train 6.5211 , allloss: 6.9815, dt: 5150.08ms, fracRes: 0.9384, norm(attn): 0.0103, norm(output): 0.1006, norm(x): 0.1238, norm(y): 0.9994, norm:2.2868, tok/sec: 25450.47, flops:20.43, batch-reuse:1
@ 317 train 6.5615 , allloss: 7.0214, dt: 5125.51ms, fracRes: 0.9382, norm(attn): 0.0110, norm(output): 0.0942, norm(x): 0.1197, norm(y): 0.9995, norm:2.3868, tok/sec: 25572.50, flops:20.53, batch-reuse:1
@ 318 train 6.4463 , allloss: 6.9016, dt: 5094.19ms, fracRes: 0.9379, norm(attn): 0.0110, norm(output): 0.0977, norm(x): 0.1176, norm(y): 0.9991, norm:3.1408, tok/sec: 25729.71, flops:20.65, batch-reuse:1
@ 319 train 6.3697 , allloss: 6.8272, dt: 5057.91ms, fracRes: 0.9381, norm(attn): 0.0126, norm(output): 0.0942, norm(x): 0.1206, norm(y): 0.9992, norm:1.7993, tok/sec: 25914.25, flops:20.80, batch-reuse:1
@ 320 train 6.4788 , allloss: 6.9162, dt: 5127.56ms, fracRes: 0.9378, norm(attn): 0.0129, norm(output): 0.0942, norm(x): 0.1137, norm(y): 0.9991, norm:2.1717, tok/sec: 25562.26, flops:20.52, batch-reuse:1
@ 321 train 6.5121 , allloss: 6.9504, dt: 5271.93ms, fracRes: 0.9369, norm(attn): 0.0128, norm(output): 0.0947, norm(x): 0.1133, norm(y): 0.9989, norm:2.6250, tok/sec: 24862.24, flops:19.96, batch-reuse:1
@ 322 train 6.4041 , allloss: 6.9165, dt: 5140.67ms, fracRes: 0.9353, norm(attn): 0.0119, norm(output): 0.0952, norm(x): 0.1317, norm(y): 0.9990, norm:2.8808, tok/sec: 25497.07, flops:20.47, batch-reuse:1
@ 323 train 6.5146 , allloss: 6.9504, dt: 5079.75ms, fracRes: 0.9381, norm(attn): 0.0120, norm(output): 0.0869, norm(x): 0.1136, norm(y): 0.9995, norm:3.3753, tok/sec: 25802.82, flops:20.71, batch-reuse:1
@ 324 train 6.4332 , allloss: 6.8473, dt: 5103.84ms, fracRes: 0.9383, norm(attn): 0.0125, norm(output): 0.0903, norm(x): 0.1052, norm(y): 0.9992, norm:3.5256, tok/sec: 25681.03, flops:20.62, batch-reuse:1
@ 325 train 6.4735 , allloss: 6.9643, dt: 5113.25ms, fracRes: 0.9380, norm(attn): 0.0121, norm(output): 0.0928, norm(x): 0.1341, norm(y): 0.9992, norm:4.0634, tok/sec: 25633.81, flops:20.58, batch-reuse:1
@ 326 train 6.5271 , allloss: 6.9666, dt: 5072.13ms, fracRes: 0.9381, norm(attn): 0.0108, norm(output): 0.0928, norm(x): 0.1169, norm(y): 0.9992, norm:2.1906, tok/sec: 25841.63, flops:20.74, batch-reuse:1
@ 327 train 6.5720 , allloss: 6.9879, dt: 5117.85ms, fracRes: 0.9379, norm(attn): 0.0124, norm(output): 0.0933, norm(x): 0.1045, norm(y): 0.9989, norm:2.8432, tok/sec: 25610.76, flops:20.56, batch-reuse:1
@ 328 train 6.4631 , allloss: 6.8846, dt: 5117.38ms, fracRes: 0.9381, norm(attn): 0.0115, norm(output): 0.0933, norm(x): 0.1088, norm(y): 0.9990, norm:2.0985, tok/sec: 25613.11, flops:20.56, batch-reuse:1
@ 329 train 6.4518 , allloss: 6.8664, dt: 5095.25ms, fracRes: 0.9380, norm(attn): 0.0118, norm(output): 0.0933, norm(x): 0.1085, norm(y): 0.9988, norm:2.1636, tok/sec: 25724.33, flops:20.65, batch-reuse:1
@ 330 train 6.4543 , allloss: 6.8899, dt: 5142.14ms, fracRes: 0.9371, norm(attn): 0.0127, norm(output): 0.0938, norm(x): 0.1124, norm(y): 0.9984, norm:4.7150, tok/sec: 25489.75, flops:20.46, batch-reuse:1
@ 331 train 6.4700 , allloss: 6.8563, dt: 5097.57ms, fracRes: 0.9381, norm(attn): 0.0162, norm(output): 0.0854, norm(x): 0.0786, norm(y): 0.9981, norm:6.3633, tok/sec: 25712.64, flops:20.64, batch-reuse:1
@ 332 train 6.4109 , allloss: 6.8381, dt: 5108.19ms, fracRes: 0.9379, norm(attn): 0.0123, norm(output): 0.0898, norm(x): 0.1058, norm(y): 0.9987, norm:3.5030, tok/sec: 25659.21, flops:20.60, batch-reuse:1
@ 333 train 6.4584 , allloss: 6.8946, dt: 5112.91ms, fracRes: 0.9367, norm(attn): 0.0124, norm(output): 0.0864, norm(x): 0.1077, norm(y): 0.9987, norm:3.2454, tok/sec: 25635.48, flops:20.58, batch-reuse:1
@ 334 train 6.3971 , allloss: 6.8692, dt: 5083.79ms, fracRes: 0.9369, norm(attn): 0.0127, norm(output): 0.0933, norm(x): 0.1211, norm(y): 0.9985, norm:3.4834, tok/sec: 25782.32, flops:20.70, batch-reuse:1
@ 335 train 6.3620 , allloss: 6.8054, dt: 5126.35ms, fracRes: 0.9369, norm(attn): 0.0130, norm(output): 0.0869, norm(x): 0.1138, norm(y): 0.9989, norm:2.8881, tok/sec: 25568.28, flops:20.52, batch-reuse:1
@ 336 train 6.4237 , allloss: 6.8333, dt: 5078.29ms, fracRes: 0.9377, norm(attn): 0.0131, norm(output): 0.0933, norm(x): 0.1039, norm(y): 0.9984, norm:3.3026, tok/sec: 25810.27, flops:20.72, batch-reuse:1
@ 337 train 6.4103 , allloss: 6.8950, dt: 5087.05ms, fracRes: 0.9381, norm(attn): 0.0131, norm(output): 0.0874, norm(x): 0.1332, norm(y): 0.9989, norm:3.7998, tok/sec: 25765.81, flops:20.68, batch-reuse:1
@ 338 train 6.3559 , allloss: 6.7782, dt: 5117.13ms, fracRes: 0.9381, norm(attn): 0.0118, norm(output): 0.0903, norm(x): 0.1153, norm(y): 0.9986, norm:1.9714, tok/sec: 25614.34, flops:20.56, batch-reuse:1
@ 339 train 6.4634 , allloss: 6.8578, dt: 5115.12ms, fracRes: 0.9381, norm(attn): 0.0127, norm(output): 0.0898, norm(x): 0.1007, norm(y): 0.9983, norm:2.6648, tok/sec: 25624.41, flops:20.57, batch-reuse:1
@ 340 train 6.4374 , allloss: 6.8358, dt: 5126.64ms, fracRes: 0.9383, norm(attn): 0.0139, norm(output): 0.0850, norm(x): 0.0910, norm(y): 0.9985, norm:3.1886, tok/sec: 25566.85, flops:20.52, batch-reuse:1
@ 341 train 6.4798 , allloss: 7.0069, dt: 5117.55ms, fracRes: 0.9339, norm(attn): 0.0137, norm(output): 0.0947, norm(x): 0.1300, norm(y): 0.9982, norm:11.3574, tok/sec: 25612.28, flops:20.56, batch-reuse:1
@ 342 train 6.3552 , allloss: 6.7745, dt: 5142.89ms, fracRes: 0.9353, norm(attn): 0.0131, norm(output): 0.0923, norm(x): 0.0985, norm(y): 0.9980, norm:4.5903, tok/sec: 25486.08, flops:20.46, batch-reuse:1
@ 343 train 6.3777 , allloss: 6.7884, dt: 5083.33ms, fracRes: 0.9380, norm(attn): 0.0132, norm(output): 0.0835, norm(x): 0.0996, norm(y): 0.9984, norm:2.6848, tok/sec: 25784.68, flops:20.70, batch-reuse:1
@ 344 train 6.3628 , allloss: 6.7920, dt: 5107.46ms, fracRes: 0.9380, norm(attn): 0.0127, norm(output): 0.0864, norm(x): 0.1117, norm(y): 0.9984, norm:3.2066, tok/sec: 25662.83, flops:20.60, batch-reuse:1
@ 345 train 6.3841 , allloss: 6.8305, dt: 5120.46ms, fracRes: 0.9287, norm(attn): 0.0170, norm(output): 0.0933, norm(x): 0.0936, norm(y): 0.9977, norm:9.7392, tok/sec: 25597.72, flops:20.55, batch-reuse:1
@ 346 train 6.4232 , allloss: 6.8430, dt: 5081.77ms, fracRes: 0.9382, norm(attn): 0.0133, norm(output): 0.0879, norm(x): 0.1074, norm(y): 0.9984, norm:2.4576, tok/sec: 25792.58, flops:20.71, batch-reuse:1
@ 347 train 6.4399 , allloss: 7.0065, dt: 5115.97ms, fracRes: 0.9378, norm(attn): 0.0142, norm(output): 0.0889, norm(x): 0.1511, norm(y): 0.9987, norm:4.5137, tok/sec: 25620.17, flops:20.57, batch-reuse:1
@ 348 train 6.3894 , allloss: 6.8884, dt: 5113.47ms, fracRes: 0.9369, norm(attn): 0.0129, norm(output): 0.0938, norm(x): 0.1337, norm(y): 0.9985, norm:2.7070, tok/sec: 25632.70, flops:20.58, batch-reuse:1
@ 349 train 6.4217 , allloss: 6.8953, dt: 5131.70ms, fracRes: 0.9373, norm(attn): 0.0120, norm(output): 0.0942, norm(x): 0.1313, norm(y): 0.9982, norm:2.8754, tok/sec: 25541.63, flops:20.50, batch-reuse:1
@ 350 train 6.4576 , allloss: 6.8979, dt: 5122.81ms, fracRes: 0.9382, norm(attn): 0.0149, norm(output): 0.0859, norm(x): 0.0943, norm(y): 0.9987, norm:4.4855, tok/sec: 25585.94, flops:20.54, batch-reuse:1
@ 351 train 6.5024 , allloss: 6.9800, dt: 5133.28ms, fracRes: 0.9367, norm(attn): 0.0129, norm(output): 0.0952, norm(x): 0.1135, norm(y): 0.9979, norm:5.8069, tok/sec: 25533.77, flops:20.50, batch-reuse:1
@ 352 train 6.5052 , allloss: 6.9640, dt: 5139.71ms, fracRes: 0.9357, norm(attn): 0.0146, norm(output): 0.0928, norm(x): 0.0988, norm(y): 0.9981, norm:3.7840, tok/sec: 25501.84, flops:20.47, batch-reuse:1
@ 353 train 6.4378 , allloss: 6.9254, dt: 5121.91ms, fracRes: 0.9301, norm(attn): 0.0157, norm(output): 0.0864, norm(x): 0.0958, norm(y): 0.9982, norm:3.0808, tok/sec: 25590.43, flops:20.54, batch-reuse:1
@ 354 train 6.3878 , allloss: 6.8278, dt: 5112.31ms, fracRes: 0.9373, norm(attn): 0.0156, norm(output): 0.0889, norm(x): 0.1077, norm(y): 0.9980, norm:3.4668, tok/sec: 25638.49, flops:20.58, batch-reuse:1
@ 355 train 6.3731 , allloss: 6.8532, dt: 5116.47ms, fracRes: 0.9325, norm(attn): 0.0175, norm(output): 0.0938, norm(x): 0.1142, norm(y): 0.9978, norm:3.7093, tok/sec: 25617.67, flops:20.56, batch-reuse:1
@ 356 train 6.5071 , allloss: 6.9290, dt: 5075.54ms, fracRes: 0.9380, norm(attn): 0.0161, norm(output): 0.0874, norm(x): 0.0961, norm(y): 0.9982, norm:5.6958, tok/sec: 25824.24, flops:20.73, batch-reuse:1
@ 357 train 6.4394 , allloss: 6.9010, dt: 5187.52ms, fracRes: 0.9363, norm(attn): 0.0136, norm(output): 0.0938, norm(x): 0.1235, norm(y): 0.9979, norm:3.1873, tok/sec: 25266.81, flops:20.28, batch-reuse:1
@ 358 train 6.3833 , allloss: 6.8082, dt: 5104.69ms, fracRes: 0.9374, norm(attn): 0.0153, norm(output): 0.0938, norm(x): 0.1158, norm(y): 0.9978, norm:3.4351, tok/sec: 25676.76, flops:20.61, batch-reuse:1
@ 359 train 6.5838 , allloss: 7.0420, dt: 5092.44ms, fracRes: 0.9379, norm(attn): 0.0132, norm(output): 0.0938, norm(x): 0.1302, norm(y): 0.9982, norm:2.8226, tok/sec: 25738.55, flops:20.66, batch-reuse:1
@ 360 train 6.4418 , allloss: 6.9215, dt: 5094.72ms, fracRes: 0.9377, norm(attn): 0.0131, norm(output): 0.0942, norm(x): 0.1356, norm(y): 0.9980, norm:3.5748, tok/sec: 25727.00, flops:20.65, batch-reuse:1
@ 361 train 6.4149 , allloss: 6.8398, dt: 5097.46ms, fracRes: 0.9377, norm(attn): 0.0138, norm(output): 0.0938, norm(x): 0.1179, norm(y): 0.9980, norm:2.2628, tok/sec: 25713.22, flops:20.64, batch-reuse:1
@ 362 train 6.3228 , allloss: 6.7325, dt: 5157.03ms, fracRes: 0.9379, norm(attn): 0.0164, norm(output): 0.0908, norm(x): 0.1113, norm(y): 0.9980, norm:2.3340, tok/sec: 25416.20, flops:20.40, batch-reuse:1
@ 363 train 6.3586 , allloss: 6.7470, dt: 5111.21ms, fracRes: 0.9374, norm(attn): 0.0176, norm(output): 0.0879, norm(x): 0.0965, norm(y): 0.9978, norm:2.4850, tok/sec: 25644.01, flops:20.59, batch-reuse:1
@ 364 train 6.4201 , allloss: 6.8285, dt: 5130.26ms, fracRes: 0.9376, norm(attn): 0.0167, norm(output): 0.0859, norm(x): 0.1088, norm(y): 0.9981, norm:3.9146, tok/sec: 25548.82, flops:20.51, batch-reuse:1
@ 365 train 6.3984 , allloss: 6.9090, dt: 5136.86ms, fracRes: 0.9332, norm(attn): 0.0164, norm(output): 0.0938, norm(x): 0.1288, norm(y): 0.9973, norm:4.2248, tok/sec: 25515.98, flops:20.48, batch-reuse:1
@ 366 train 6.4370 , allloss: 6.8767, dt: 5142.17ms, fracRes: 0.9349, norm(attn): 0.0162, norm(output): 0.0933, norm(x): 0.1122, norm(y): 0.9975, norm:2.4708, tok/sec: 25489.62, flops:20.46, batch-reuse:1
@ 367 train 6.3111 , allloss: 6.7200, dt: 5076.92ms, fracRes: 0.9374, norm(attn): 0.0166, norm(output): 0.0859, norm(x): 0.1072, norm(y): 0.9980, norm:2.0792, tok/sec: 25817.25, flops:20.72, batch-reuse:1
@ 368 train 6.4583 , allloss: 6.8550, dt: 5102.21ms, fracRes: 0.9358, norm(attn): 0.0176, norm(output): 0.0898, norm(x): 0.0961, norm(y): 0.9975, norm:4.3810, tok/sec: 25689.27, flops:20.62, batch-reuse:1
@ 369 train 6.4025 , allloss: 6.8776, dt: 5098.50ms, fracRes: 0.9369, norm(attn): 0.0166, norm(output): 0.0786, norm(x): 0.1289, norm(y): 0.9983, norm:4.0434, tok/sec: 25707.94, flops:20.64, batch-reuse:1
@ 370 train 6.5359 , allloss: 7.0416, dt: 5115.29ms, fracRes: 0.9281, norm(attn): 0.0186, norm(output): 0.0864, norm(x): 0.1062, norm(y): 0.9977, norm:9.9161, tok/sec: 25623.56, flops:20.57, batch-reuse:1
@ 371 train 6.4857 , allloss: 6.9244, dt: 5110.35ms, fracRes: 0.9351, norm(attn): 0.0166, norm(output): 0.0933, norm(x): 0.1125, norm(y): 0.9974, norm:4.1352, tok/sec: 25648.34, flops:20.59, batch-reuse:1
@ 372 train 6.5397 , allloss: 6.9581, dt: 5149.73ms, fracRes: 0.9369, norm(attn): 0.0167, norm(output): 0.0859, norm(x): 0.1008, norm(y): 0.9978, norm:3.2028, tok/sec: 25452.23, flops:20.43, batch-reuse:1
@ 373 train 8.1996 , allloss: 9.9512, dt: 5135.31ms, fracRes: 0.7863, norm(attn): 0.1030, norm(output): 0.1211, norm(x): 0.1404, norm(y): 0.9968, norm:3820.9268, tok/sec: 25523.69, flops:20.49, batch-reuse:1
@ 374 train 8.2394 , allloss: 9.2337, dt: 5125.76ms, fracRes: 0.4093, norm(attn): 0.4238, norm(output): 0.0669, norm(x): 0.0717, norm(y): 0.9949, norm:182.6250, tok/sec: 25571.22, flops:20.53, batch-reuse:1
@ 375 train 7.0421 , allloss: 7.5320, dt: 5074.76ms, fracRes: 0.9410, norm(attn): 0.0166, norm(output): 0.0942, norm(x): 0.1057, norm(y): 0.9973, norm:14.2014, tok/sec: 25828.23, flops:20.73, batch-reuse:1
@ 376 train 6.9465 , allloss: 7.4906, dt: 5136.83ms, fracRes: 0.9334, norm(attn): 0.0171, norm(output): 0.0967, norm(x): 0.0984, norm(y): 0.9969, norm:12.6039, tok/sec: 25516.12, flops:20.48, batch-reuse:1
@ 377 train 6.7920 , allloss: 7.5655, dt: 5109.90ms, fracRes: 0.9249, norm(attn): 0.0194, norm(output): 0.0942, norm(x): 0.1097, norm(y): 0.9978, norm:13.5120, tok/sec: 25650.60, flops:20.59, batch-reuse:1
@ 378 train 6.6943 , allloss: 7.3737, dt: 5118.37ms, fracRes: 0.9360, norm(attn): 0.0177, norm(output): 0.0942, norm(x): 0.1473, norm(y): 0.9984, norm:11.0708, tok/sec: 25608.15, flops:20.56, batch-reuse:1
@ 379 train 6.9960 , allloss: 7.7754, dt: 5122.73ms, fracRes: 0.9237, norm(attn): 0.0204, norm(output): 0.1162, norm(x): 0.1159, norm(y): 0.9982, norm:26.4704, tok/sec: 25586.33, flops:20.54, batch-reuse:1
@ 380 train 6.8034 , allloss: 7.4562, dt: 5129.91ms, fracRes: 0.9339, norm(attn): 0.0167, norm(output): 0.1104, norm(x): 0.1391, norm(y): 0.9984, norm:5.6797, tok/sec: 25550.56, flops:20.51, batch-reuse:1
@ 381 train 6.7034 , allloss: 7.3960, dt: 5113.79ms, fracRes: 0.9293, norm(attn): 0.0187, norm(output): 0.1147, norm(x): 0.1530, norm(y): 0.9981, norm:6.5867, tok/sec: 25631.11, flops:20.58, batch-reuse:1
@ 382 train 6.5889 , allloss: 7.1381, dt: 5094.93ms, fracRes: 0.9365, norm(attn): 0.0176, norm(output): 0.1172, norm(x): 0.1384, norm(y): 0.9980, norm:2.6957, tok/sec: 25725.95, flops:20.65, batch-reuse:1
@ 383 train 6.5576 , allloss: 7.0632, dt: 5099.04ms, fracRes: 0.9369, norm(attn): 0.0192, norm(output): 0.1172, norm(x): 0.1251, norm(y): 0.9978, norm:2.9490, tok/sec: 25705.24, flops:20.63, batch-reuse:1
@ 384 train 6.5710 , allloss: 7.1259, dt: 5156.85ms, fracRes: 0.9344, norm(attn): 0.0208, norm(output): 0.1172, norm(x): 0.1396, norm(y): 0.9973, norm:4.4297, tok/sec: 25417.07, flops:20.40, batch-reuse:1
@ 385 train 6.5046 , allloss: 7.0148, dt: 5105.81ms, fracRes: 0.9345, norm(attn): 0.0215, norm(output): 0.1147, norm(x): 0.1237, norm(y): 0.9975, norm:3.2125, tok/sec: 25671.12, flops:20.61, batch-reuse:1
@ 386 train 6.6068 , allloss: 7.1238, dt: 5132.34ms, fracRes: 0.9355, norm(attn): 0.0176, norm(output): 0.1045, norm(x): 0.1320, norm(y): 0.9979, norm:3.1024, tok/sec: 25538.45, flops:20.50, batch-reuse:1
@ 387 train 6.5170 , allloss: 7.0308, dt: 5133.00ms, fracRes: 0.9341, norm(attn): 0.0195, norm(output): 0.1094, norm(x): 0.1235, norm(y): 0.9976, norm:2.5211, tok/sec: 25535.14, flops:20.50, batch-reuse:1
@ 388 train 6.4102 , allloss: 6.9140, dt: 5105.19ms, fracRes: 0.9336, norm(attn): 0.0197, norm(output): 0.1011, norm(x): 0.1153, norm(y): 0.9978, norm:2.5577, tok/sec: 25674.25, flops:20.61, batch-reuse:1
@ 389 train 6.4977 , allloss: 6.9895, dt: 5136.36ms, fracRes: 0.9296, norm(attn): 0.0190, norm(output): 0.1011, norm(x): 0.1151, norm(y): 0.9977, norm:2.9280, tok/sec: 25518.47, flops:20.48, batch-reuse:1
@ 390 train 6.5317 , allloss: 7.0318, dt: 5116.54ms, fracRes: 0.9311, norm(attn): 0.0176, norm(output): 0.1021, norm(x): 0.1223, norm(y): 0.9975, norm:2.2861, tok/sec: 25617.31, flops:20.56, batch-reuse:1
@ 391 train 6.4586 , allloss: 7.1000, dt: 5131.46ms, fracRes: 0.9241, norm(attn): 0.0210, norm(output): 0.1011, norm(x): 0.1236, norm(y): 0.9977, norm:6.9969, tok/sec: 25542.84, flops:20.50, batch-reuse:1
@ 392 train 6.5740 , allloss: 7.0592, dt: 5138.31ms, fracRes: 0.9362, norm(attn): 0.0176, norm(output): 0.1060, norm(x): 0.1329, norm(y): 0.9975, norm:2.5957, tok/sec: 25508.78, flops:20.48, batch-reuse:1
@ 393 train 6.4948 , allloss: 7.0196, dt: 5070.07ms, fracRes: 0.9368, norm(attn): 0.0176, norm(output): 0.1016, norm(x): 0.1474, norm(y): 0.9976, norm:2.7559, tok/sec: 25852.13, flops:20.75, batch-reuse:1
@ 394 train 6.4770 , allloss: 6.9649, dt: 5097.35ms, fracRes: 0.9368, norm(attn): 0.0194, norm(output): 0.1011, norm(x): 0.1257, norm(y): 0.9976, norm:2.4505, tok/sec: 25713.74, flops:20.64, batch-reuse:1
@ 395 train 6.5925 , allloss: 7.1177, dt: 5236.63ms, fracRes: 0.9347, norm(attn): 0.0205, norm(output): 0.1055, norm(x): 0.1346, norm(y): 0.9972, norm:4.0256, tok/sec: 25029.84, flops:20.09, batch-reuse:1
@ 396 train 6.4499 , allloss: 6.9516, dt: 5100.97ms, fracRes: 0.9370, norm(attn): 0.0216, norm(output): 0.0942, norm(x): 0.1296, norm(y): 0.9982, norm:4.1620, tok/sec: 25695.52, flops:20.63, batch-reuse:1
@ 397 train 6.5226 , allloss: 6.9877, dt: 5134.10ms, fracRes: 0.9375, norm(attn): 0.0238, norm(output): 0.0947, norm(x): 0.1215, norm(y): 0.9980, norm:2.6950, tok/sec: 25529.69, flops:20.49, batch-reuse:1
@ 398 train 6.5424 , allloss: 7.0522, dt: 5130.74ms, fracRes: 0.9357, norm(attn): 0.0226, norm(output): 0.1113, norm(x): 0.1379, norm(y): 0.9969, norm:4.2860, tok/sec: 25546.39, flops:20.51, batch-reuse:1
@ 399 train 6.4926 , allloss: 7.0703, dt: 5109.29ms, fracRes: 0.9361, norm(attn): 0.0228, norm(output): 0.0991, norm(x): 0.1585, norm(y): 0.9977, norm:2.7425, tok/sec: 25653.65, flops:20.59, batch-reuse:1
@ 400 train 6.5325 , allloss: 7.0322, dt: 5095.19ms, fracRes: 0.9369, norm(attn): 0.0226, norm(output): 0.0996, norm(x): 0.1361, norm(y): 0.9978, norm:2.2255, tok/sec: 25724.67, flops:20.65, batch-reuse:1
@ 401 train 6.5008 , allloss: 7.0037, dt: 5124.01ms, fracRes: 0.9369, norm(attn): 0.0231, norm(output): 0.1040, norm(x): 0.1388, norm(y): 0.9974, norm:2.5642, tok/sec: 25579.99, flops:20.53, batch-reuse:1
@ 402 train 6.4630 , allloss: 6.9237, dt: 5103.16ms, fracRes: 0.9375, norm(attn): 0.0238, norm(output): 0.0967, norm(x): 0.1191, norm(y): 0.9976, norm:1.9798, tok/sec: 25684.50, flops:20.62, batch-reuse:1
@ 403 train 6.5548 , allloss: 7.1356, dt: 5132.35ms, fracRes: 0.9371, norm(attn): 0.0234, norm(output): 0.0938, norm(x): 0.1585, norm(y): 0.9981, norm:5.4749, tok/sec: 25538.39, flops:20.50, batch-reuse:1
@ 404 train 6.4777 , allloss: 6.9470, dt: 5101.52ms, fracRes: 0.9344, norm(attn): 0.0271, norm(output): 0.1011, norm(x): 0.1151, norm(y): 0.9967, norm:4.3613, tok/sec: 25692.75, flops:20.62, batch-reuse:1
@ 405 train 6.4463 , allloss: 6.9301, dt: 5110.73ms, fracRes: 0.9360, norm(attn): 0.0243, norm(output): 0.0952, norm(x): 0.1272, norm(y): 0.9973, norm:2.0623, tok/sec: 25646.45, flops:20.59, batch-reuse:1
@ 406 train 6.4588 , allloss: 6.9065, dt: 5097.17ms, fracRes: 0.9368, norm(attn): 0.0249, norm(output): 0.0942, norm(x): 0.1149, norm(y): 0.9976, norm:3.8963, tok/sec: 25714.67, flops:20.64, batch-reuse:1
@ 407 train 6.6195 , allloss: 7.2202, dt: 5080.89ms, fracRes: 0.9340, norm(attn): 0.0222, norm(output): 0.1128, norm(x): 0.1540, norm(y): 0.9959, norm:11.2489, tok/sec: 25797.07, flops:20.71, batch-reuse:1
@ 408 train 6.5397 , allloss: 7.0513, dt: 5147.67ms, fracRes: 0.9310, norm(attn): 0.0225, norm(output): 0.1104, norm(x): 0.1196, norm(y): 0.9957, norm:5.1443, tok/sec: 25462.38, flops:20.44, batch-reuse:1
@ 409 train 6.3943 , allloss: 6.9226, dt: 5118.07ms, fracRes: 0.9338, norm(attn): 0.0233, norm(output): 0.1006, norm(x): 0.1132, norm(y): 0.9964, norm:2.7798, tok/sec: 25609.66, flops:20.56, batch-reuse:1
@ 410 train 6.4632 , allloss: 6.9783, dt: 5105.70ms, fracRes: 0.9365, norm(attn): 0.0198, norm(output): 0.0942, norm(x): 0.1397, norm(y): 0.9972, norm:3.3833, tok/sec: 25671.68, flops:20.61, batch-reuse:1
@ 411 train 6.4920 , allloss: 6.9598, dt: 5095.07ms, fracRes: 0.9359, norm(attn): 0.0233, norm(output): 0.1074, norm(x): 0.1197, norm(y): 0.9965, norm:4.3423, tok/sec: 25725.26, flops:20.65, batch-reuse:1
@ 412 train 6.4705 , allloss: 7.0447, dt: 5125.52ms, fracRes: 0.9346, norm(attn): 0.0220, norm(output): 0.0957, norm(x): 0.1447, norm(y): 0.9972, norm:3.1843, tok/sec: 25572.42, flops:20.53, batch-reuse:1
@ 413 train 6.1811 , allloss: 6.6573, dt: 5067.97ms, fracRes: 0.9358, norm(attn): 0.0216, norm(output): 0.1016, norm(x): 0.1289, norm(y): 0.9967, norm:2.8773, tok/sec: 25862.83, flops:20.76, batch-reuse:1
@ 414 train 6.4336 , allloss: 6.8876, dt: 5143.59ms, fracRes: 0.9346, norm(attn): 0.0227, norm(output): 0.1006, norm(x): 0.1140, norm(y): 0.9967, norm:3.3198, tok/sec: 25482.60, flops:20.46, batch-reuse:1
@ 415 train 6.3807 , allloss: 6.8104, dt: 5117.48ms, fracRes: 0.9368, norm(attn): 0.0222, norm(output): 0.1011, norm(x): 0.1142, norm(y): 0.9964, norm:2.5497, tok/sec: 25612.63, flops:20.56, batch-reuse:1
@ 416 train 6.5124 , allloss: 6.9469, dt: 5127.52ms, fracRes: 0.9365, norm(attn): 0.0234, norm(output): 0.0942, norm(x): 0.1002, norm(y): 0.9970, norm:3.0457, tok/sec: 25562.47, flops:20.52, batch-reuse:1
@ 417 train 6.4214 , allloss: 6.9132, dt: 5118.87ms, fracRes: 0.9357, norm(attn): 0.0210, norm(output): 0.1011, norm(x): 0.1365, norm(y): 0.9963, norm:4.5031, tok/sec: 25605.67, flops:20.55, batch-reuse:1
@ 418 train 6.5183 , allloss: 7.0348, dt: 5171.08ms, fracRes: 0.9252, norm(attn): 0.0248, norm(output): 0.1011, norm(x): 0.1101, norm(y): 0.9962, norm:4.6920, tok/sec: 25347.11, flops:20.35, batch-reuse:1
@ 419 train 6.4317 , allloss: 6.9381, dt: 5121.09ms, fracRes: 0.9337, norm(attn): 0.0203, norm(output): 0.1011, norm(x): 0.1325, norm(y): 0.9965, norm:2.7960, tok/sec: 25594.56, flops:20.55, batch-reuse:1
@ 420 train 6.3994 , allloss: 6.9328, dt: 5107.08ms, fracRes: 0.9243, norm(attn): 0.0234, norm(output): 0.0942, norm(x): 0.1210, norm(y): 0.9973, norm:3.3907, tok/sec: 25664.78, flops:20.60, batch-reuse:1
@ 421 train 6.5538 , allloss: 7.0237, dt: 5093.71ms, fracRes: 0.9353, norm(attn): 0.0234, norm(output): 0.0962, norm(x): 0.1157, norm(y): 0.9968, norm:3.6742, tok/sec: 25732.15, flops:20.66, batch-reuse:1
@ 422 train 6.4502 , allloss: 7.0190, dt: 5096.98ms, fracRes: 0.9353, norm(attn): 0.0211, norm(output): 0.0942, norm(x): 0.1519, norm(y): 0.9973, norm:3.1355, tok/sec: 25715.62, flops:20.64, batch-reuse:1
@ 423 train 6.4786 , allloss: 7.0186, dt: 5136.43ms, fracRes: 0.9296, norm(attn): 0.0220, norm(output): 0.1040, norm(x): 0.1248, norm(y): 0.9964, norm:4.3882, tok/sec: 25518.09, flops:20.48, batch-reuse:1
@ 424 train 6.4286 , allloss: 6.9179, dt: 5134.27ms, fracRes: 0.9365, norm(attn): 0.0201, norm(output): 0.1069, norm(x): 0.1237, norm(y): 0.9966, norm:2.3242, tok/sec: 25528.87, flops:20.49, batch-reuse:1
@ 425 train 6.5103 , allloss: 7.0020, dt: 5104.72ms, fracRes: 0.9370, norm(attn): 0.0209, norm(output): 0.1011, norm(x): 0.1170, norm(y): 0.9970, norm:4.1983, tok/sec: 25676.61, flops:20.61, batch-reuse:1
@ 426 train 6.5468 , allloss: 7.3263, dt: 5091.13ms, fracRes: 0.9206, norm(attn): 0.0243, norm(output): 0.1172, norm(x): 0.1515, norm(y): 0.9957, norm:27.0273, tok/sec: 25745.17, flops:20.67, batch-reuse:1
@ 427 train 6.5486 , allloss: 7.1606, dt: 5064.79ms, fracRes: 0.9272, norm(attn): 0.0245, norm(output): 0.1138, norm(x): 0.1326, norm(y): 0.9958, norm:7.1503, tok/sec: 25879.04, flops:20.77, batch-reuse:1
@ 428 train 6.8425 , allloss: 7.6355, dt: 5093.19ms, fracRes: 0.8856, norm(attn): 0.0535, norm(output): 0.1099, norm(x): 0.0968, norm(y): 0.9947, norm:90.8283, tok/sec: 25734.76, flops:20.66, batch-reuse:1
@ 429 train 6.5170 , allloss: 7.2337, dt: 5044.28ms, fracRes: 0.9219, norm(attn): 0.0264, norm(output): 0.1006, norm(x): 0.1299, norm(y): 0.9966, norm:11.3171, tok/sec: 25984.30, flops:20.86, batch-reuse:1
@ 430 train 6.5981 , allloss: 7.4908, dt: 5065.76ms, fracRes: 0.9321, norm(attn): 0.0295, norm(output): 0.0981, norm(x): 0.1700, norm(y): 0.9969, norm:10.5757, tok/sec: 25874.08, flops:20.77, batch-reuse:1
@ 431 train 6.5975 , allloss: 7.2608, dt: 5067.27ms, fracRes: 0.9334, norm(attn): 0.0270, norm(output): 0.1177, norm(x): 0.1312, norm(y): 0.9962, norm:8.9985, tok/sec: 25866.41, flops:20.76, batch-reuse:1
@ 432 train 6.5992 , allloss: 7.1874, dt: 5071.29ms, fracRes: 0.9286, norm(attn): 0.0280, norm(output): 0.1167, norm(x): 0.1328, norm(y): 0.9973, norm:6.1627, tok/sec: 25845.91, flops:20.75, batch-reuse:1
@ 433 train 6.5418 , allloss: 7.1501, dt: 5058.62ms, fracRes: 0.9348, norm(attn): 0.0242, norm(output): 0.1172, norm(x): 0.1620, norm(y): 0.9969, norm:3.9595, tok/sec: 25910.61, flops:20.80, batch-reuse:1
@ 434 train 6.5252 , allloss: 7.0175, dt: 5058.30ms, fracRes: 0.9365, norm(attn): 0.0215, norm(output): 0.1182, norm(x): 0.1352, norm(y): 0.9961, norm:3.1138, tok/sec: 25912.28, flops:20.80, batch-reuse:1
@ 435 train 6.4053 , allloss: 6.9869, dt: 5040.94ms, fracRes: 0.9359, norm(attn): 0.0210, norm(output): 0.1177, norm(x): 0.1475, norm(y): 0.9967, norm:2.4141, tok/sec: 26001.51, flops:20.87, batch-reuse:1
@ 436 train 6.5418 , allloss: 7.0572, dt: 5066.15ms, fracRes: 0.9368, norm(attn): 0.0216, norm(output): 0.1172, norm(x): 0.1401, norm(y): 0.9967, norm:2.0715, tok/sec: 25872.12, flops:20.77, batch-reuse:1
@ 437 train 6.4248 , allloss: 6.9602, dt: 5054.78ms, fracRes: 0.9360, norm(attn): 0.0232, norm(output): 0.1172, norm(x): 0.1346, norm(y): 0.9962, norm:2.4970, tok/sec: 25930.30, flops:20.82, batch-reuse:1
@ 438 train 6.5018 , allloss: 6.9940, dt: 5026.89ms, fracRes: 0.9369, norm(attn): 0.0234, norm(output): 0.1123, norm(x): 0.1293, norm(y): 0.9968, norm:2.9050, tok/sec: 26074.17, flops:20.93, batch-reuse:1
@ 439 train 6.3463 , allloss: 6.8652, dt: 5057.70ms, fracRes: 0.9349, norm(attn): 0.0231, norm(output): 0.1167, norm(x): 0.1417, norm(y): 0.9963, norm:2.8210, tok/sec: 25915.35, flops:20.80, batch-reuse:1
@ 440 train 6.3078 , allloss: 6.8267, dt: 5048.93ms, fracRes: 0.9368, norm(attn): 0.0219, norm(output): 0.1021, norm(x): 0.1482, norm(y): 0.9969, norm:1.9783, tok/sec: 25960.33, flops:20.84, batch-reuse:1
@ 441 train 6.3822 , allloss: 6.8879, dt: 5070.82ms, fracRes: 0.9368, norm(attn): 0.0222, norm(output): 0.1011, norm(x): 0.1479, norm(y): 0.9968, norm:1.9789, tok/sec: 25848.26, flops:20.75, batch-reuse:1
@ 442 train 6.4531 , allloss: 6.9122, dt: 5045.93ms, fracRes: 0.9350, norm(attn): 0.0238, norm(output): 0.1113, norm(x): 0.1258, norm(y): 0.9958, norm:2.6597, tok/sec: 25975.79, flops:20.85, batch-reuse:1
@ 443 train 6.4321 , allloss: 6.8813, dt: 5087.82ms, fracRes: 0.9372, norm(attn): 0.0229, norm(output): 0.1021, norm(x): 0.1265, norm(y): 0.9964, norm:2.0802, tok/sec: 25761.92, flops:20.68, batch-reuse:1
@ 444 train 6.4256 , allloss: 6.8856, dt: 5091.24ms, fracRes: 0.9361, norm(attn): 0.0225, norm(output): 0.1025, norm(x): 0.1296, norm(y): 0.9960, norm:1.9160, tok/sec: 25744.59, flops:20.67, batch-reuse:1
@ 445 train 6.3171 , allloss: 6.7626, dt: 5049.66ms, fracRes: 0.9351, norm(attn): 0.0236, norm(output): 0.0957, norm(x): 0.1161, norm(y): 0.9964, norm:2.0562, tok/sec: 25956.58, flops:20.84, batch-reuse:1
@ 446 train 6.3569 , allloss: 6.8402, dt: 5099.54ms, fracRes: 0.9343, norm(attn): 0.0228, norm(output): 0.0972, norm(x): 0.1309, norm(y): 0.9958, norm:3.1433, tok/sec: 25702.73, flops:20.63, batch-reuse:1
@ 447 train 6.4092 , allloss: 7.0505, dt: 5077.33ms, fracRes: 0.9210, norm(attn): 0.0272, norm(output): 0.0952, norm(x): 0.0967, norm(y): 0.9956, norm:12.2987, tok/sec: 25815.14, flops:20.72, batch-reuse:1
@ 448 train 6.3962 , allloss: 6.9506, dt: 5060.31ms, fracRes: 0.9369, norm(attn): 0.0232, norm(output): 0.0903, norm(x): 0.1573, norm(y): 0.9971, norm:4.4856, tok/sec: 25901.99, flops:20.79, batch-reuse:1
@ 449 train 6.3623 , allloss: 6.8625, dt: 5108.14ms, fracRes: 0.9347, norm(attn): 0.0225, norm(output): 0.1001, norm(x): 0.1367, norm(y): 0.9960, norm:2.7462, tok/sec: 25659.42, flops:20.60, batch-reuse:1
@ 450 train 6.3886 , allloss: 6.8424, dt: 5101.95ms, fracRes: 0.9350, norm(attn): 0.0237, norm(output): 0.0947, norm(x): 0.1109, norm(y): 0.9968, norm:3.3230, tok/sec: 25690.58, flops:20.62, batch-reuse:1
@ 451 train 6.4739 , allloss: 7.0988, dt: 5101.52ms, fracRes: 0.9283, norm(attn): 0.0398, norm(output): 0.1006, norm(x): 0.1339, norm(y): 0.9957, norm:6.2281, tok/sec: 25692.72, flops:20.62, batch-reuse:1
@ 452 train 6.5252 , allloss: 7.0668, dt: 5127.99ms, fracRes: 0.9150, norm(attn): 0.0693, norm(output): 0.0938, norm(x): 0.0921, norm(y): 0.9960, norm:27.4391, tok/sec: 25560.13, flops:20.52, batch-reuse:1
@ 453 train 6.6643 , allloss: 7.2149, dt: 5091.16ms, fracRes: 0.9349, norm(attn): 0.0300, norm(output): 0.0928, norm(x): 0.0794, norm(y): 0.9963, norm:59.0129, tok/sec: 25745.02, flops:20.67, batch-reuse:1
@ 454 train 6.8464 , allloss: 7.7775, dt: 5120.30ms, fracRes: 0.9068, norm(attn): 0.0374, norm(output): 0.0962, norm(x): 0.0982, norm(y): 0.9966, norm:161.7192, tok/sec: 25598.49, flops:20.55, batch-reuse:1
@ 455 train 6.9583 , allloss: 7.9521, dt: 5072.85ms, fracRes: 0.9065, norm(attn): 0.0337, norm(output): 0.0986, norm(x): 0.1073, norm(y): 0.9980, norm:33.9562, tok/sec: 25837.93, flops:20.74, batch-reuse:1
@ 456 train 6.8610 , allloss: 7.7242, dt: 5099.93ms, fracRes: 0.9255, norm(attn): 0.0327, norm(output): 0.0981, norm(x): 0.0906, norm(y): 0.9978, norm:43.4293, tok/sec: 25700.76, flops:20.63, batch-reuse:1
@ 457 train 7.3725 , allloss: 9.0527, dt: 5132.02ms, fracRes: 0.8745, norm(attn): 0.0498, norm(output): 0.1172, norm(x): 0.1080, norm(y): 0.9965, norm:109.5805, tok/sec: 25540.02, flops:20.50, batch-reuse:1
@ 458 train 7.9101 , allloss: 10.1225, dt: 5105.74ms, fracRes: 0.8913, norm(attn): 0.0708, norm(output): 0.1016, norm(x): 0.1078, norm(y): 0.9977, norm:25.0361, tok/sec: 25671.51, flops:20.61, batch-reuse:1
@ 459 train 7.5915 , allloss: 9.4500, dt: 5122.27ms, fracRes: 0.8868, norm(attn): 0.0608, norm(output): 0.1260, norm(x): 0.1088, norm(y): 0.9957, norm:31.0913, tok/sec: 25588.66, flops:20.54, batch-reuse:1
@ 460 train 7.6052 , allloss: 9.8891, dt: 5141.51ms, fracRes: 0.8163, norm(attn): 0.0698, norm(output): 0.1377, norm(x): 0.1419, norm(y): 0.9971, norm:161.7426, tok/sec: 25492.89, flops:20.46, batch-reuse:1
@ 461 train 7.8596 , allloss: 10.0866, dt: 5095.18ms, fracRes: 0.8144, norm(attn): 0.0747, norm(output): 0.1357, norm(x): 0.1429, norm(y): 0.9985, norm:97.0493, tok/sec: 25724.73, flops:20.65, batch-reuse:1
@ 462 train 7.7695 , allloss: 9.1546, dt: 5096.79ms, fracRes: 0.8543, norm(attn): 0.0640, norm(output): 0.1533, norm(x): 0.1418, norm(y): 0.9976, norm:20.5422, tok/sec: 25716.59, flops:20.64, batch-reuse:1
@ 463 train 7.5820 , allloss: 9.0141, dt: 5066.18ms, fracRes: 0.8542, norm(attn): 0.0708, norm(output): 0.1416, norm(x): 0.1429, norm(y): 0.9969, norm:50.2903, tok/sec: 25871.97, flops:20.77, batch-reuse:1
@ 464 train 7.4548 , allloss: 8.7816, dt: 5076.84ms, fracRes: 0.8971, norm(attn): 0.0486, norm(output): 0.1543, norm(x): 0.1538, norm(y): 0.9982, norm:14.9552, tok/sec: 25817.65, flops:20.73, batch-reuse:1
@ 465 train 7.3009 , allloss: 8.4208, dt: 5132.42ms, fracRes: 0.9126, norm(attn): 0.0400, norm(output): 0.1709, norm(x): 0.1634, norm(y): 0.9984, norm:9.2752, tok/sec: 25538.03, flops:20.50, batch-reuse:1
@ 466 train 7.1585 , allloss: 8.2153, dt: 5097.99ms, fracRes: 0.9126, norm(attn): 0.0381, norm(output): 0.1826, norm(x): 0.1671, norm(y): 0.9979, norm:6.5424, tok/sec: 25710.52, flops:20.64, batch-reuse:1
@ 467 train 7.1194 , allloss: 8.1209, dt: 5108.29ms, fracRes: 0.9183, norm(attn): 0.0371, norm(output): 0.1602, norm(x): 0.1966, norm(y): 1.0000, norm:14.1287, tok/sec: 25658.68, flops:20.60, batch-reuse:1
@ 468 train 7.4811 , allloss: 9.6927, dt: 5276.77ms, fracRes: 0.8301, norm(attn): 0.0527, norm(output): 0.1797, norm(x): 0.1823, norm(y): 0.9976, norm:880.6343, tok/sec: 24839.45, flops:19.94, batch-reuse:1
@ 469 train 9.3773 , allloss: 16.7251, dt: 5174.59ms, fracRes: 0.4453, norm(attn): 0.2061, norm(output): 0.3086, norm(x): 0.3239, norm(y): 0.9933, norm:9042.2607, tok/sec: 25329.91, flops:20.33, batch-reuse:1
@ 470 train 8.8193 , allloss: 13.5325, dt: 5113.88ms, fracRes: 0.5921, norm(attn): 0.1357, norm(output): 0.2598, norm(x): 0.2797, norm(y): 0.9950, norm:19059.1543, tok/sec: 25630.63, flops:20.57, batch-reuse:1
@ 471 train 7.3981 , allloss: 8.6008, dt: 5149.06ms, fracRes: 0.8919, norm(attn): 0.0518, norm(output): 0.1865, norm(x): 0.1807, norm(y): 0.9967, norm:20.8390, tok/sec: 25455.51, flops:20.43, batch-reuse:1
@ 472 train 7.1473 , allloss: 8.2467, dt: 5097.74ms, fracRes: 0.9170, norm(attn): 0.0398, norm(output): 0.1904, norm(x): 0.1923, norm(y): 0.9980, norm:26.4446, tok/sec: 25711.79, flops:20.64, batch-reuse:1
@ 473 train 7.0798 , allloss: 8.0696, dt: 5156.18ms, fracRes: 0.9289, norm(attn): 0.0361, norm(output): 0.2070, norm(x): 0.2184, norm(y): 0.9987, norm:7.3212, tok/sec: 25420.35, flops:20.41, batch-reuse:1
@ 474 train 6.7970 , allloss: 7.6898, dt: 5118.68ms, fracRes: 0.9364, norm(attn): 0.0332, norm(output): 0.2266, norm(x): 0.2344, norm(y): 0.9981, norm:3.7875, tok/sec: 25606.61, flops:20.56, batch-reuse:1
@ 475 train 6.7484 , allloss: 7.6667, dt: 5092.18ms, fracRes: 0.9363, norm(attn): 0.0294, norm(output): 0.2324, norm(x): 0.2464, norm(y): 0.9969, norm:4.2448, tok/sec: 25739.89, flops:20.66, batch-reuse:1
@ 476 train 6.7004 , allloss: 7.6617, dt: 5103.16ms, fracRes: 0.9369, norm(attn): 0.0273, norm(output): 0.2139, norm(x): 0.2505, norm(y): 0.9976, norm:3.5675, tok/sec: 25684.48, flops:20.62, batch-reuse:1
@ 477 train 6.7049 , allloss: 7.6234, dt: 5114.08ms, fracRes: 0.9359, norm(attn): 0.0286, norm(output): 0.2266, norm(x): 0.2271, norm(y): 0.9965, norm:3.1195, tok/sec: 25629.61, flops:20.57, batch-reuse:1
