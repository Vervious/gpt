Threshold: 0.1
Enable layer loss: False
MAX LEARNING RATE: 0.00015
Experiment name: 17-1minus-mlpconcat-crazystuff-5
MLPSCALE: 2
Experiment description: ```
Transformer, max LR 0.00015
Setting:
========
        self.compiler = BenCompilerNoOp(config)
        self.execute = BenExecute(config)
========
        y = self.ln_1(x)
        attn, xWeights, scores = self.attn(y, y, print_weights=print_weights)
        program = self.compiler(y)
        machineOutput = self.execute(program, attn)
        newx = xWeights * x + (1 - xWeights) * machineOutput
========
                x, metadata = block(x,print_weights=print_weights,step=i)
                _x_total = x
                _in = x.detach()
                _x, _ = block(_in,print_weights=False) # Do again... lol
                _xtraloss = _xtraloss + torch.linalg.norm(_x - _in, dim=-1, ord=2).mean()
========
VALUEMATRIX=True
REUSE_WEIGHTS=True
MLP_SCALE=2
MEASURE_SELF_CONTRIBUTION=False
NEW_ALL_LAYER_LOSS=False
MATRIX_NUM_PARAMS=4096
MLPMAT_INNER_SIZE=64
DELETE_SELF_CONTRIBUTION=False
EXTRACT_SELF_CONTRIBUTION=False
ATTENTION_SINK=True
IDENTITY_LOSS=True
```
![caption](img/17-1minus-mlpconcat-crazystuff-5.jpg)

Warmup steps: 1000
total desired batch size: 131072
Mini-batch size: 8*1024
=> calculated gradient accumulation steps: 16
=> calculated gradient accumulation steps: 16
Training max steps: 300001Num GPUs: 1{'block_size': 1024, 'vocab_size': 50304, 'n_layer': 12, 'n_head': 12, 'n_embd': 768}
num decayed parameter tensors: 6, with 45,318,144 parameters
num non-decayed parameter tensors: 6, with 5,376 parameters
@ 0 train 10.9803 , allloss: 30.0034, dt: 2598.68ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0499, norm(y): 0.9984, norm:21.8142, tok/sec: 50437.91, flops:19.65, batch-reuse:1
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5273, 0.4746, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3379, 0.3672, 0.2949, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2598, 0.2520, 0.2158, 0.2734, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2061, 0.1357, 0.2490, 0.2451, 0.1631, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1504, 0.1104, 0.2617, 0.1123, 0.1475, 0.2188, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1426, 0.1396, 0.1758, 0.1689, 0.0830, 0.1816, 0.1079, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1133, 0.1279, 0.1572, 0.1172, 0.1016, 0.1475, 0.0757, 0.1602, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1060, 0.1079, 0.1069, 0.1309, 0.1230, 0.1367, 0.1118, 0.1235, 0.0525, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1055, 0.0791, 0.0811, 0.0942, 0.1475, 0.1172, 0.0947, 0.0972, 0.0918, 0.0923, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0908, 0.0889, 0.0737, 0.0757, 0.0679, 0.1387, 0.0972, 0.1074, 0.1138, 0.0361, 0.1089, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0674, 0.0669, 0.0530, 0.0500, 0.0615, 0.1309, 0.0684, 0.0815, 0.0811, 0.0986, 0.0786, 0.1621, 0.0000, 0.0000, 0.0000],
        [0.0713, 0.0850, 0.1348, 0.0640, 0.0610, 0.0903, 0.0654, 0.0874, 0.0796, 0.0608, 0.0640, 0.0601, 0.0767, 0.0000, 0.0000],
        [0.0649, 0.0796, 0.0659, 0.0762, 0.0913, 0.0898, 0.1064, 0.0708, 0.0261, 0.0967, 0.0801, 0.0425, 0.0625, 0.0464, 0.0000],
        [0.0630, 0.0742, 0.0625, 0.0537, 0.0933, 0.0918, 0.0544, 0.0586, 0.0771, 0.0645, 0.0562, 0.0471, 0.0481, 0.0483, 0.1074]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0076, -0.0158,  ..., -0.0038, -0.0061, -0.0161],
        [ 0.0058, -0.0074, -0.0003,  ..., -0.0031, -0.0233,  0.0114],
        [-0.0513,  0.0041,  0.0048,  ...,  0.0060,  0.0041,  0.0066],
        ...,
        [ 0.0010,  0.0126,  0.0247,  ..., -0.0096, -0.0280, -0.0133],
        [-0.0120,  0.0033,  0.0717,  ..., -0.0087,  0.0105,  0.0003],
        [ 0.0088,  0.0180,  0.0234,  ...,  0.0240, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([-0.4863,  0.2637, -0.0466,  0.7188,  0.4512, -0.1377,  0.2148, -0.9219, -0.1602,  0.6406, -1.0000,  1.1406, -0.4902,  0.3047,  0.6172, -0.5195,  0.1367,  0.7266,  1.0000,  0.0649, -0.0688, -0.7617,  0.6484,  0.7812,  0.2178, -0.7695,  0.3457,  0.6875, -0.3105,  0.6445, -0.1680,  0.6562,
         0.4512,  0.3613, -0.1787, -0.3145, -0.0078, -1.1562, -0.6250, -0.1621,  0.2070,  0.3672,  0.4531, -0.3262,  0.2539,  0.2715, -0.6719, -0.0903, -0.3809,  0.1992,  0.0304, -0.4004,  0.8438, -0.0840,  1.2422, -0.0118,  0.3906, -0.4102,  0.0942,  1.0547, -0.4375,  0.2002, -0.0153, -0.8750],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0014,     -0.0316,     -0.0055,  ...,      0.0304,      0.0146,      0.0098],
        [    -0.0035,      0.0006,      0.0278,  ...,     -0.0081,      0.0157,     -0.0306],
        [    -0.0440,     -0.0080,      0.0493,  ...,      0.0144,     -0.0083,      0.0125],
        ...,
        [     0.0029,      0.0054,     -0.0069,  ...,     -0.0141,     -0.0102,      0.0218],
        [    -0.0145,     -0.0055,     -0.0004,  ...,      0.0106,      0.0001,      0.0282],
        [    -0.0234,     -0.0023,      0.0118,  ...,      0.0123,      0.0129,     -0.0218]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.5117, -0.0938, -0.1689,  0.6211,  1.3203,  0.1631,  0.5312, -0.4316, -0.5312,  0.1826,  0.0825,  0.4766,  0.3516,  0.5938, -0.2754, -0.2578,  0.0162, -0.2324, -0.1631, -0.6641,  0.2969,  0.5586,  1.0859,  0.2891,  0.2461,  0.5508, -0.1523,  0.0204, -0.3125,  0.1768,  0.4453,  0.7656,
        -0.2617,  0.0537, -0.0308,  0.0581,  0.7031, -1.1094, -0.1245,  0.5898,  0.3086,  0.0820,  0.1699,  0.9961, -0.0776,  0.1484, -0.2559,  0.5156,  0.4648,  0.1167,  0.3906, -0.1226,  0.3730, -0.2393,  0.1504, -0.2793, -0.8711,  0.6875,  0.7227,  0.9922, -0.8789, -0.9297, -0.3594,  0.3145],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.1055, -0.1533,  0.1143,  0.4375,  0.0491,  0.2617, -0.1328, -0.0610, -0.0903,  0.6445,  0.4824,  0.2539, -0.3438,  0.2295],
        [ 0.0000,  0.0845, -0.1318,  0.3047, -0.5352,  0.1377, -0.3184,  0.0359, -0.2168,  0.6289,  0.6562,  0.3730, -0.5430, -0.2314,  0.2363],
        [ 0.0000, -0.0242, -0.1846,  0.0503, -0.1064, -0.3027, -0.4375,  0.2871, -0.1514,  0.3574,  0.1777,  0.1138,  0.1943,  0.0420,  0.0427],
        [ 0.0000, -0.4160,  0.1875,  0.1719, -0.2363,  0.1191,  0.1138, -0.1187,  0.1543, -0.3672,  0.0708, -0.1660, -0.0542, -0.0623,  0.3262],
        [ 0.0000, -0.3105,  0.5508, -0.2949, -0.0219,  0.3730, -0.4492,  0.2969, -0.1621,  0.1719, -0.5469, -0.2061, -0.6172, -0.1758, -0.6133],
        [ 0.0000, -0.0190,  0.2100,  0.1699, -0.5430,  0.2422, -0.2793,  0.7070, -0.4238, -0.1953, -0.1060, -0.2471,  0.0264, -0.3613, -0.1650],
        [ 0.0000,  0.1216,  0.3242,  0.0315, -0.1094,  0.2617, -0.4023,  0.3457,  0.2012, -0.2285,  0.1377,  0.5977,  0.4102,  0.3809, -0.1484],
        [ 0.0000,  0.0177,  0.0089,  0.2090,  0.1484,  0.2559,  0.0510,  0.1523, -0.7070,  0.3477,  0.0276,  0.4180, -0.0159, -0.6641,  0.3691],
        [ 0.0000, -0.2910, -0.2637, -0.1167,  0.3320,  0.1016, -0.1069, -0.0859, -0.1436, -0.1348, -0.0464, -0.2539,  0.0327, -0.0055, -0.4180],
        [ 0.0000, -0.0217, -0.2129, -0.1816, -0.2949,  0.4258,  0.0669,  0.1670,  0.2246, -0.9258,  0.1807, -0.0742, -0.2734, -0.1396, -0.3262],
        [ 0.0000, -0.0036, -0.2383, -0.2949, -0.0894,  0.6641,  0.0183,  0.1963,  0.1865,  0.3848,  0.1543,  0.8828,  0.1050, -0.0830,  0.5469],
        [ 0.0000,  0.1768,  0.6406, -0.1035, -0.1543,  0.2422, -0.0864,  0.2070,  0.1147, -0.1562, -0.1079, -0.1680,  0.0742, -0.0277, -0.3867],
        [ 0.0000,  0.2021,  0.0146,  0.1602,  0.3379,  0.3242,  0.4941,  0.0879, -0.9102,  0.3965,  0.2061, -0.4277, -0.0386, -0.3379,  0.1924],
        [ 0.0000,  0.1631, -0.0102, -0.1631,  0.3926,  0.3730, -0.1484, -0.0762,  0.1973,  0.0217, -0.1167, -0.2949, -0.2695, -0.2676,  0.5312]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4657],
        [0.3441],
        [0.2453],
        [0.1997],
        [0.1587],
        [0.1351],
        [0.1159],
        [0.1040],
        [0.0973],
        [0.0840],
        [0.0815],
        [0.0711],
        [0.0675],
        [0.0623]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3906, 0.6094, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3301, 0.3828, 0.2852, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2773, 0.2695, 0.2178, 0.2344, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2051, 0.2246, 0.1660, 0.1973, 0.2070, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1523, 0.1104, 0.2139, 0.1680, 0.1895, 0.1660, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1426, 0.1582, 0.1426, 0.1250, 0.1758, 0.1138, 0.1416, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1367, 0.1206, 0.1318, 0.1235, 0.1152, 0.1299, 0.0923, 0.1504, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1196, 0.0825, 0.0806, 0.1357, 0.1060, 0.1289, 0.0923, 0.1177, 0.1357, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0874, 0.1138, 0.0825, 0.1138, 0.0801, 0.1338, 0.1250, 0.0923, 0.0781, 0.0933, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0732, 0.0933, 0.0542, 0.1299, 0.0747, 0.0569, 0.0869, 0.1196, 0.0723, 0.1621, 0.0767, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0786, 0.0698, 0.0781, 0.0688, 0.0703, 0.0579, 0.0708, 0.1187, 0.0996, 0.0723, 0.0996, 0.1152, 0.0000, 0.0000, 0.0000],
        [0.0806, 0.0476, 0.0608, 0.1270, 0.0588, 0.1182, 0.1328, 0.0500, 0.0801, 0.0879, 0.0518, 0.0806, 0.0249, 0.0000, 0.0000],
        [0.0603, 0.0713, 0.0544, 0.0630, 0.0649, 0.0796, 0.0613, 0.0698, 0.0747, 0.0898, 0.0757, 0.0737, 0.0747, 0.0874, 0.0000],
        [0.0708, 0.0684, 0.0557, 0.0923, 0.0728, 0.0977, 0.0654, 0.0596, 0.0547, 0.0613, 0.0732, 0.0515, 0.0510, 0.0693, 0.0554]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0076, -0.0158,  ..., -0.0038, -0.0061, -0.0161],
        [ 0.0058, -0.0074, -0.0003,  ..., -0.0031, -0.0233,  0.0114],
        [-0.0513,  0.0041,  0.0048,  ...,  0.0060,  0.0041,  0.0066],
        ...,
        [ 0.0010,  0.0126,  0.0247,  ..., -0.0096, -0.0280, -0.0133],
        [-0.0120,  0.0033,  0.0717,  ..., -0.0087,  0.0105,  0.0003],
        [ 0.0088,  0.0180,  0.0234,  ...,  0.0240, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([-0.7578,  0.3789,  0.6094, -0.4297,  1.3125,  0.1631, -0.6602, -0.3711,  0.2773, -0.8516, -0.3047,  0.9570,  0.2441,  0.2578,  0.1416, -0.5859, -0.9180,  0.4336, -0.2891, -0.8164,  0.8477, -0.7617, -0.3438,  0.5039,  0.3301,  0.2832,  0.3320,  0.0957,  1.1641, -0.3477, -0.5977, -0.1016,
        -0.1992, -0.0986, -0.2500,  0.0918, -0.7578, -0.4082, -0.2490,  0.1123, -0.2119,  0.8242, -0.4570, -0.1416, -0.0349,  0.0776,  1.1250,  0.7344, -0.3027,  0.4219, -0.4023,  0.1875, -0.3008,  0.6680,  0.0366,  0.6016,  0.5352, -0.2578,  0.8125,  0.9258, -0.3496,  1.2266, -0.5156, -1.4766],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0014,     -0.0316,     -0.0055,  ...,      0.0304,      0.0146,      0.0098],
        [    -0.0035,      0.0006,      0.0278,  ...,     -0.0081,      0.0157,     -0.0306],
        [    -0.0440,     -0.0080,      0.0493,  ...,      0.0144,     -0.0083,      0.0125],
        ...,
        [     0.0029,      0.0054,     -0.0069,  ...,     -0.0141,     -0.0102,      0.0218],
        [    -0.0145,     -0.0055,     -0.0004,  ...,      0.0106,      0.0001,      0.0282],
        [    -0.0234,     -0.0023,      0.0118,  ...,      0.0123,      0.0129,     -0.0218]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.5156,  0.6992, -0.1924, -0.2891, -0.0312,  0.2012,  0.4355, -0.8867,  0.2490, -0.8594,  0.0503, -0.1147,  0.5078, -0.6445, -0.1631, -0.1445,  0.5820,  0.0276,  0.5000,  0.0123,  0.0591,  0.1216, -0.0898,  0.5508,  0.3223,  0.6680,  0.2236, -0.3340, -0.2988, -0.3906, -0.9258, -0.5078,
         0.4512,  0.0625,  0.6641, -0.3242,  0.3887, -0.1553,  0.5391,  0.4082, -0.4414, -0.0659, -0.5039,  0.6016, -0.3633,  0.4688, -0.4316,  0.1611,  0.0085, -0.7070, -0.1035,  0.5430, -0.4043,  0.2715,  1.1719, -0.2695, -0.3164,  0.7500, -0.0962,  0.5078,  0.9609, -0.7461,  1.2656,  0.1807],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,      0.4434,      0.1660,      0.4844,      0.1416,     -0.2432,      0.0815,     -0.3203,     -0.0109,      0.4277,     -0.0022,     -0.1367,     -0.3672,     -0.0291,      0.4551],
        [     0.0000,      0.1475,     -0.1455,     -0.3145,     -0.1270,      0.0776,      0.2295,     -0.0781,     -0.3633,      0.2734,     -0.1177,     -0.0767,      0.0583,     -0.2148,      0.2314],
        [     0.0000,     -0.0299,     -0.2451,     -0.1719,     -0.1201,      0.0884,     -0.1738,      0.1514,     -0.1162,     -0.1455,     -0.3320,     -0.1245,     -0.3613,     -0.2354,     -0.7422],
        [     0.0000,      0.0923,     -0.2129,     -0.0366,      0.0085,     -0.0830,      0.1748,      0.4980,      0.1436,      0.4102,     -0.6719,      0.0574,     -0.2480,      0.0067,      0.2969],
        [     0.0000,     -0.3223,      0.3398,      0.1025,      0.2207,      0.0908,     -0.0425,      0.0613,      0.2910,     -0.4199,     -0.1299,      0.4629,     -0.1445,      0.2617,      0.3965],
        [     0.0000,      0.1089,      0.0013,     -0.1260,      0.2119,     -0.2227,     -0.0060,      0.3027,      0.0344,     -0.1387,     -0.3711,     -0.1709,     -0.2305,      0.0571,     -0.0574],
        [     0.0000,     -0.1270,     -0.0417,     -0.1050,     -0.1719,     -0.0557,     -0.3965,      0.0908,     -0.3164,     -0.0221,     -0.1270,     -0.2578,     -0.3340,     -0.0110,     -0.2100],
        [     0.0000,     -0.3730,     -0.3965,      0.1279,     -0.1226,      0.0723,     -0.2598,     -0.0176,      0.1260,      0.1250,      0.0991,     -0.3926,     -0.1797,     -0.1416,     -0.3320],
        [     0.0000,      0.2637,     -0.0579,      0.2637,     -0.0894,      0.4238,      0.3613,      0.0537,     -0.1118,      0.0625,     -0.3809,     -0.1021,      0.0001,     -0.2100,     -0.0483],
        [     0.0000,      0.2383,     -0.3027,      0.5664,      0.0192,     -0.2578,      0.1680,      0.4902,     -0.0146,      0.7930,      0.0449,      0.0101,     -0.2412,     -0.1865,      0.0135],
        [     0.0000,     -0.1128,     -0.0047,     -0.1299,     -0.1118,     -0.3027,     -0.1011,      0.4141,      0.2412,     -0.0835,      0.2373,      0.3867,      0.3008,      0.2461,     -0.4414],
        [     0.0000,     -0.5312,     -0.2812,      0.4492,     -0.3184,      0.3809,      0.4961,     -0.4766,     -0.0100,      0.0869,     -0.4453,     -0.0016,     -1.1719,     -0.2988,      0.4395],
        [     0.0000,      0.1660,     -0.1025,      0.0417,      0.0747,      0.2812,      0.0195,      0.1494,      0.2148,      0.3984,      0.2314,      0.2031,      0.2168,      0.3711,      0.2715],
        [     0.0000,     -0.0322,     -0.2402,      0.2695,      0.0267,      0.3262,     -0.0752,     -0.1709,     -0.2539,     -0.1416,      0.0383,     -0.3164,     -0.3262,     -0.0157,     -0.2412]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4722],
        [0.3085],
        [0.2380],
        [0.1937],
        [0.1631],
        [0.1425],
        [0.1156],
        [0.1137],
        [0.1023],
        [0.0914],
        [0.0770],
        [0.0758],
        [0.0722],
        [0.0646]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5117, 0.4883, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3086, 0.4141, 0.2773, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2637, 0.3125, 0.1895, 0.2354, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1924, 0.2012, 0.2344, 0.1514, 0.2207, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1992, 0.1206, 0.1196, 0.1973, 0.1826, 0.1816, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1816, 0.1396, 0.1260, 0.1245, 0.1270, 0.1553, 0.1455, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1709, 0.0957, 0.1318, 0.1250, 0.1279, 0.1016, 0.1196, 0.1270, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1191, 0.1201, 0.0894, 0.1108, 0.0796, 0.1064, 0.1050, 0.1641, 0.1050, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0859, 0.1143, 0.0938, 0.1416, 0.1108, 0.1060, 0.0742, 0.0898, 0.0747, 0.1094, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0898, 0.1055, 0.0515, 0.1177, 0.0859, 0.0947, 0.1035, 0.0649, 0.1230, 0.0815, 0.0820, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0864, 0.1055, 0.0854, 0.1196, 0.0459, 0.1250, 0.0608, 0.1001, 0.0474, 0.0801, 0.0537, 0.0898, 0.0000, 0.0000, 0.0000],
        [0.0579, 0.0645, 0.0464, 0.1416, 0.0991, 0.0723, 0.0679, 0.0854, 0.0610, 0.0664, 0.0664, 0.0957, 0.0752, 0.0000, 0.0000],
        [0.0603, 0.0732, 0.0532, 0.0762, 0.0977, 0.1094, 0.0571, 0.0630, 0.0728, 0.0708, 0.0454, 0.0732, 0.1035, 0.0439, 0.0000],
        [0.0835, 0.0586, 0.0801, 0.0537, 0.0801, 0.0574, 0.0452, 0.0747, 0.0435, 0.0610, 0.0762, 0.0640, 0.0713, 0.0742, 0.0762]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0076, -0.0158,  ..., -0.0038, -0.0061, -0.0161],
        [ 0.0058, -0.0074, -0.0003,  ..., -0.0031, -0.0233,  0.0114],
        [-0.0513,  0.0041,  0.0048,  ...,  0.0060,  0.0041,  0.0066],
        ...,
        [ 0.0010,  0.0126,  0.0247,  ..., -0.0096, -0.0280, -0.0133],
        [-0.0120,  0.0033,  0.0717,  ..., -0.0087,  0.0105,  0.0003],
        [ 0.0088,  0.0180,  0.0234,  ...,  0.0240, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([    -0.4648,      0.4141,      0.4414,     -0.8125,      0.9883,     -0.0435,     -0.3223,     -0.0659,      0.5234,     -0.1230,     -0.3281,     -0.4375,      0.8320,      0.2266,      0.5977,      0.2227,     -0.6055,      0.5352,     -0.0620,     -0.5703,      0.5586,     -0.0410,
            -0.2285,     -0.5117,      0.7070,      0.2754,     -0.6328,     -0.6445,      0.8242,     -0.4863,     -0.6992,      0.0297,     -0.6562,      0.3906,     -0.3008,      0.7031,      0.1348,     -0.1670,      0.5117,      0.0623,      0.3535,     -0.0004,     -0.6758,     -0.1504,
             0.3867,     -0.4746,     -0.1914,     -0.1001,      0.2139,     -0.1562,      0.0693,      0.3066,     -0.0684,     -0.0281,     -1.0625,      0.2773,     -0.4570,     -0.6133,      0.5078,      0.6055,     -0.6133,     -0.4238,     -0.6328,     -0.5820], device='cuda:0',
       dtype=torch.bfloat16)
Qweights
tensor([[     0.0014,     -0.0316,     -0.0055,  ...,      0.0304,      0.0146,      0.0098],
        [    -0.0035,      0.0006,      0.0278,  ...,     -0.0081,      0.0157,     -0.0306],
        [    -0.0440,     -0.0080,      0.0493,  ...,      0.0144,     -0.0083,      0.0125],
        ...,
        [     0.0029,      0.0054,     -0.0069,  ...,     -0.0141,     -0.0102,      0.0218],
        [    -0.0145,     -0.0055,     -0.0004,  ...,      0.0106,      0.0001,      0.0282],
        [    -0.0234,     -0.0023,      0.0118,  ...,      0.0123,      0.0129,     -0.0218]], device='cuda:0', requires_grad=True)
Q: tensor([-0.6250, -0.1309,  0.1035, -0.1436, -0.8203, -0.4258,  0.1572, -0.6836,  0.8281, -0.4414, -0.3340,  0.6406,  0.3047,  0.1162,  0.8555, -0.0762,  0.0063,  0.1338, -0.1484,  0.2441, -0.2949, -0.1230,  0.2285, -0.0688,  0.1582,  0.5938, -0.1650,  0.0962, -0.3301, -0.3105, -0.5625,  0.2754,
        -0.6367,  0.2617,  0.9062,  0.1523,  0.6562,  0.1426, -0.8164,  0.0579,  0.7734,  0.1328, -0.2344,  0.2158,  0.1367,  0.3457,  0.3613, -0.6172,  0.0674,  0.8359,  0.4316, -0.0640, -0.3008,  0.0718,  1.0859, -0.7344, -0.0854,  0.2871,  0.2891, -0.3555,  0.4316,  0.2246,  0.4453, -0.3535],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.0505, -0.3027,  0.1289, -0.1670, -0.0747,  0.1777, -0.2490,  0.5039,  0.2656,  0.4219, -0.0972, -0.1416, -0.1406, -0.2217],
        [ 0.0000,  0.2969, -0.1069, -0.0898,  0.2637,  0.2227,  0.4922,  0.5000,  0.3418,  0.3125, -0.2070,  0.0762, -0.1040, -0.1973,  0.1348],
        [ 0.0000,  0.1719, -0.3281, -0.1113, -0.1875, -0.3164,  0.1484, -0.5000,  0.4062,  0.2373, -0.3984,  0.2227, -0.2461, -0.2402, -0.1021],
        [ 0.0000,  0.0464,  0.2002, -0.2402,  0.1357, -0.2061, -0.7656,  0.1128, -0.2754, -0.0212, -0.2988,  0.2969, -0.1924, -0.1206, -0.5898],
        [ 0.0000, -0.5000, -0.5117, -0.0092, -0.0864, -0.0923,  0.0225, -0.1816, -0.0505, -0.1738,  0.0649, -0.2051,  0.0261, -0.0972,  0.0688],
        [ 0.0000, -0.2656, -0.3672, -0.3789, -0.3574, -0.1582, -0.2246, -0.4395, -0.3965, -0.3359, -0.1562,  0.4766,  0.3809,  0.1777, -0.3066],
        [ 0.0000, -0.5820, -0.2598, -0.3125, -0.2930, -0.5195, -0.3574, -0.2949,  0.0195, -0.2334, -0.0500, -0.2969, -0.3809,  0.1050, -0.4824],
        [ 0.0000,  0.0082, -0.2871, -0.0698, -0.4023, -0.1143, -0.1270,  0.3223, -0.1245, -0.3789, -0.4980,  0.1895, -0.2051, -0.0850,  0.3066],
        [ 0.0000,  0.2871,  0.0889,  0.4980,  0.2578,  0.2100, -0.1465,  0.0444, -0.1357,  0.2441, -0.0532, -0.0413,  0.4219, -0.2246, -0.1514],
        [ 0.0000,  0.1641, -0.5547,  0.2695, -0.0435,  0.0569,  0.1416, -0.3223,  0.3184, -0.0938, -0.0898,  0.2598, -0.1738, -0.1216,  0.0933],
        [ 0.0000,  0.1992, -0.0112,  0.3262, -0.6367,  0.3711, -0.3516,  0.1465, -0.5977, -0.0776, -0.4746,  0.0383, -0.4043,  0.3281,  0.2256],
        [ 0.0000,  0.1035, -0.2236,  0.8945,  0.5391,  0.2178,  0.1553,  0.3906,  0.0496,  0.1377,  0.1338,  0.5000,  0.2617,  0.1904, -0.1934],
        [ 0.0000,  0.1924, -0.1270,  0.2354,  0.4805,  0.5938, -0.0562,  0.0457,  0.1846,  0.1631, -0.2852,  0.1973,  0.5391, -0.3203, -0.1060],
        [ 0.0000, -0.3555, -0.0454, -0.4434, -0.0413, -0.3750, -0.6133, -0.1094, -0.6523, -0.3145, -0.0918, -0.2637, -0.1582, -0.1172, -0.0938]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4749],
        [0.3214],
        [0.2495],
        [0.1908],
        [0.1663],
        [0.1370],
        [0.1269],
        [0.1077],
        [0.0986],
        [0.0871],
        [0.0798],
        [0.0798],
        [0.0684],
        [0.0640]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4648, 0.5352, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2578, 0.3477, 0.3945, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2793, 0.2285, 0.2598, 0.2344, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1611, 0.2129, 0.2754, 0.1777, 0.1719, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1787, 0.1709, 0.1943, 0.1553, 0.1357, 0.1650, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1494, 0.1621, 0.1846, 0.1299, 0.1118, 0.1611, 0.1021, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1113, 0.1152, 0.1201, 0.1318, 0.1055, 0.1328, 0.1221, 0.1611, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0923, 0.1079, 0.1128, 0.1089, 0.0933, 0.1230, 0.1094, 0.1455, 0.1069, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0781, 0.0991, 0.1226, 0.0952, 0.0908, 0.1094, 0.0815, 0.1001, 0.1211, 0.1021, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0908, 0.0962, 0.1025, 0.0771, 0.0732, 0.0942, 0.0811, 0.1196, 0.0718, 0.0977, 0.0957, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0977, 0.1035, 0.0674, 0.0840, 0.0525, 0.0718, 0.0757, 0.1113, 0.0679, 0.0947, 0.0776, 0.0967, 0.0000, 0.0000, 0.0000],
        [0.0835, 0.0859, 0.0952, 0.0649, 0.0588, 0.0684, 0.0615, 0.0894, 0.0742, 0.0776, 0.0894, 0.0654, 0.0854, 0.0000, 0.0000],
        [0.0608, 0.0815, 0.0786, 0.0610, 0.0452, 0.0649, 0.0640, 0.0898, 0.0796, 0.0762, 0.0806, 0.0835, 0.0630, 0.0718, 0.0000],
        [0.0698, 0.0610, 0.0571, 0.0674, 0.0664, 0.0718, 0.0684, 0.0894, 0.0552, 0.0703, 0.0576, 0.0869, 0.0620, 0.0520, 0.0645]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0076, -0.0158,  ..., -0.0038, -0.0061, -0.0161],
        [ 0.0058, -0.0074, -0.0003,  ..., -0.0031, -0.0233,  0.0114],
        [-0.0513,  0.0041,  0.0048,  ...,  0.0060,  0.0041,  0.0066],
        ...,
        [ 0.0010,  0.0126,  0.0247,  ..., -0.0096, -0.0280, -0.0133],
        [-0.0120,  0.0033,  0.0717,  ..., -0.0087,  0.0105,  0.0003],
        [ 0.0088,  0.0180,  0.0234,  ...,  0.0240, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([ 0.7461,  0.4941, -0.3066,  0.1064, -0.2256, -0.0933, -0.5117,  1.0234, -0.0771, -0.1934, -0.3555, -0.6641,  0.2441,  0.2012,  0.2275,  0.0110,  0.1768,  0.8477, -0.2236, -0.2217, -0.0447,  0.3086,  0.0107,  0.6016,  0.7617, -0.3223, -0.6094, -0.5586,  0.2080, -1.1250, -0.4746,  0.0757,
        -0.3008,  0.6953,  0.5273,  0.0469, -0.1270, -0.1787,  0.0454, -0.4531, -0.8320,  0.9219,  1.1250, -0.0684, -0.5703,  0.0400,  0.5742, -0.5273,  0.1050,  0.3418,  0.3008,  0.6094, -0.6016, -0.7383, -0.2754, -0.1494,  0.3477,  0.5547,  0.2051,  0.1719,  0.6055,  0.6445, -0.0679, -0.2461],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0014,     -0.0316,     -0.0055,  ...,      0.0304,      0.0146,      0.0098],
        [    -0.0035,      0.0006,      0.0278,  ...,     -0.0081,      0.0157,     -0.0306],
        [    -0.0440,     -0.0080,      0.0493,  ...,      0.0144,     -0.0083,      0.0125],
        ...,
        [     0.0029,      0.0054,     -0.0069,  ...,     -0.0141,     -0.0102,      0.0218],
        [    -0.0145,     -0.0055,     -0.0004,  ...,      0.0106,      0.0001,      0.0282],
        [    -0.0234,     -0.0023,      0.0118,  ...,      0.0123,      0.0129,     -0.0218]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.2969, -0.5742,  0.1895,  0.8594, -0.2871, -0.1064,  0.1846, -0.0859,  1.1328,  0.3770, -0.2930, -0.1260,  0.0439,  0.5508,  1.1328,  0.1914,  0.0894, -0.6680, -0.7461, -0.0732,  0.2754,  0.8477, -0.3594,  0.3945, -0.0747,  0.2422,  0.2891,  1.0391, -0.1934, -0.2148,  0.5977,  0.6211,
        -0.8242, -0.3906,  1.0312, -0.7109,  0.0197, -0.2773, -0.3789, -0.0488, -0.6641,  0.7070, -0.0393,  0.9805, -0.0581,  0.0732, -0.2129, -0.3945, -0.5938,  0.3164,  0.0396, -0.3848,  0.3008,  0.9453, -0.3496,  0.4863, -0.6641, -1.0156,  0.1289, -0.2266, -0.0310, -0.1177,  0.6719, -0.6523],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.1436,  0.2363,  0.1650, -0.1670,  0.0801,  0.0461,  0.2520, -0.0139, -0.0488,  0.0315,  0.0275,  0.1475, -0.1406,  0.0134],
        [ 0.0000,  0.2988,  0.4219,  0.0339,  0.0339,  0.2695,  0.1738,  0.2256,  0.1592,  0.4102,  0.5273,  0.3516,  0.2949,  0.0038,  0.4297],
        [ 0.0000, -0.1992, -0.0723, -0.1729, -0.0481, -0.0713,  0.0977,  0.4082, -0.1514, -0.0214, -0.1807,  0.0422,  0.0277, -0.1523,  0.2480],
        [ 0.0000,  0.2812,  0.5391,  0.1021,  0.0679,  0.3516,  0.2305,  0.3574,  0.3359,  0.4023,  0.3359,  0.2949,  0.3047,  0.1157,  0.4746],
        [ 0.0000, -0.0476,  0.0835, -0.1396, -0.2754, -0.0806,  0.1045,  0.3184, -0.0466,  0.0172,  0.0349,  0.0981,  0.1147, -0.1514,  0.2812],
        [ 0.0000,  0.0791,  0.2080, -0.1445, -0.2910,  0.0728, -0.3848,  0.0554, -0.0786,  0.1025, -0.1426, -0.1226, -0.1943,  0.1836,  0.1807],
        [ 0.0000,  0.0325,  0.0742,  0.1650, -0.0535,  0.1787,  0.0918,  0.3672,  0.1230,  0.0771,  0.0854,  0.0947, -0.0781, -0.1104,  0.2080],
        [ 0.0000,  0.1543,  0.2021,  0.1621,  0.0079,  0.2871,  0.1699,  0.4551,  0.1484,  0.2295,  0.1025,  0.3984, -0.0825,  0.2266,  0.3379],
        [ 0.0000,  0.2402,  0.4492,  0.2002,  0.1523,  0.3359,  0.0410,  0.2461,  0.4395,  0.2656,  0.2598,  0.4414,  0.3320,  0.2285,  0.4023],
        [ 0.0000,  0.0588,  0.1240, -0.1621, -0.2109,  0.0391, -0.1128,  0.2773, -0.2324,  0.0757,  0.0540,  0.1035,  0.0283, -0.2852,  0.3398],
        [ 0.0000,  0.0586, -0.3672, -0.1484, -0.6211, -0.3066, -0.2520,  0.1328, -0.3633, -0.0271, -0.2285, -0.0089, -0.3086, -0.1885,  0.0188],
        [ 0.0000,  0.0309,  0.1348, -0.2480, -0.3477, -0.1963, -0.3008,  0.0693, -0.1138, -0.0708,  0.0708, -0.2412,  0.0231, -0.5820,  0.2363],
        [ 0.0000,  0.2930,  0.2539,  0.0050, -0.2988,  0.0618,  0.0515,  0.3887,  0.2695,  0.2256,  0.2812,  0.3164,  0.0320,  0.1631,  0.5703],
        [ 0.0000, -0.1318, -0.1973, -0.0299, -0.0491,  0.0292, -0.0166,  0.2480, -0.2354,  0.0103, -0.1904,  0.2207, -0.1147, -0.2949, -0.0757]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4992],
        [0.3325],
        [0.2595],
        [0.1956],
        [0.1670],
        [0.1453],
        [0.1250],
        [0.1107],
        [0.0952],
        [0.0871],
        [0.0779],
        [0.0738],
        [0.0640],
        [0.0677]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4648, 0.5352, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2539, 0.3535, 0.3926, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2715, 0.2227, 0.2578, 0.2471, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1787, 0.2178, 0.2578, 0.1875, 0.1582, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1670, 0.1699, 0.1973, 0.1543, 0.1279, 0.1826, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1338, 0.1855, 0.1807, 0.1357, 0.0947, 0.1543, 0.1157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1172, 0.1064, 0.1201, 0.1494, 0.0986, 0.1396, 0.1040, 0.1641, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1050, 0.1123, 0.1387, 0.1128, 0.0874, 0.1299, 0.0840, 0.1436, 0.0854, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0811, 0.1060, 0.1309, 0.0933, 0.0884, 0.0967, 0.0928, 0.1235, 0.0923, 0.0962, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0923, 0.1118, 0.1094, 0.0786, 0.0586, 0.0972, 0.0723, 0.1245, 0.0713, 0.0840, 0.0991, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0845, 0.0918, 0.0747, 0.0835, 0.0679, 0.0830, 0.0815, 0.1289, 0.0923, 0.0688, 0.0708, 0.0728, 0.0000, 0.0000, 0.0000],
        [0.0645, 0.0796, 0.1060, 0.0620, 0.0640, 0.0889, 0.0723, 0.1035, 0.0806, 0.0752, 0.0850, 0.0544, 0.0645, 0.0000, 0.0000],
        [0.0610, 0.1001, 0.0801, 0.0588, 0.0469, 0.0718, 0.0659, 0.1348, 0.0713, 0.0630, 0.0674, 0.0732, 0.0562, 0.0496, 0.0000],
        [0.0674, 0.0679, 0.0723, 0.0693, 0.0518, 0.0815, 0.0664, 0.0908, 0.0493, 0.0654, 0.0771, 0.0544, 0.0596, 0.0601, 0.0669]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0076, -0.0158,  ..., -0.0038, -0.0061, -0.0161],
        [ 0.0058, -0.0074, -0.0003,  ..., -0.0031, -0.0233,  0.0114],
        [-0.0513,  0.0041,  0.0048,  ...,  0.0060,  0.0041,  0.0066],
        ...,
        [ 0.0010,  0.0126,  0.0247,  ..., -0.0096, -0.0280, -0.0133],
        [-0.0120,  0.0033,  0.0717,  ..., -0.0087,  0.0105,  0.0003],
        [ 0.0088,  0.0180,  0.0234,  ...,  0.0240, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([ 1.0312,  0.3379, -0.5508,  0.3320, -0.0669,  0.2734, -0.4336,  1.1172,  0.0337, -0.0043,  0.4434, -1.0469,  0.4668, -0.1250,  0.2256,  0.5352,  0.3027,  0.8945, -0.4844, -0.5898,  0.6094,  0.6641, -0.2041,  0.1494,  0.5195,  0.3008, -0.7812, -0.5742,  0.1934, -0.8281, -0.5742, -0.3613,
         0.1279,  0.3086, -0.2441, -0.1387, -0.2734, -0.2812,  0.0674, -0.7695, -0.5820,  0.9141, -0.2656, -0.5781, -0.5273,  0.1973,  0.3633, -0.9492, -0.4961,  0.9844,  0.7852,  0.8086, -1.0938, -0.8555, -0.7734, -0.0464,  0.3398,  0.4941,  0.4121,  0.0069,  0.1914,  0.7305, -0.6992, -0.2969],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0014,     -0.0316,     -0.0055,  ...,      0.0304,      0.0146,      0.0098],
        [    -0.0035,      0.0006,      0.0278,  ...,     -0.0081,      0.0157,     -0.0306],
        [    -0.0440,     -0.0080,      0.0493,  ...,      0.0144,     -0.0083,      0.0125],
        ...,
        [     0.0029,      0.0054,     -0.0069,  ...,     -0.0141,     -0.0102,      0.0218],
        [    -0.0145,     -0.0055,     -0.0004,  ...,      0.0106,      0.0001,      0.0282],
        [    -0.0234,     -0.0023,      0.0118,  ...,      0.0123,      0.0129,     -0.0218]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.4551, -0.0752, -0.1934,  0.6289, -0.0229,  0.1992,  0.1846, -0.7617,  1.0703,  0.0698,  0.3066,  0.1592,  0.3887,  0.6914,  1.1719,  0.5859, -0.2734,  0.0664, -0.5781, -0.3750, -0.1079,  0.0776, -0.4551,  0.8086, -0.6211, -0.0623,  0.1943,  1.3281,  0.1084, -0.2070, -0.0322,  0.6094,
        -1.1172,  0.0417,  0.3984, -0.6289, -0.2910, -0.5391, -0.1807,  0.2578, -1.1484,  0.8164,  0.1138,  0.8047, -0.0679,  0.3887,  0.1045, -0.5938, -0.7617, -0.5430, -0.5586, -0.5820,  0.4238,  0.3281, -0.1338,  0.2520, -0.3281, -0.5898,  0.1143,  0.1162,  0.0864,  0.8555,  0.4336, -0.6445],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.1387,  0.2197,  0.0430, -0.1367,  0.0393, -0.1196,  0.5859, -0.4453, -0.2520, -0.0525, -0.2393, -0.1533, -0.0830, -0.1030],
        [ 0.0000,  0.3281,  0.4316,  0.1162, -0.0137,  0.2793,  0.1060,  0.3809,  0.1328,  0.2324,  0.2461,  0.1777,  0.1206,  0.1216,  0.3418],
        [ 0.0000, -0.1973, -0.0513, -0.0928, -0.1562, -0.1191,  0.0659,  0.2109, -0.0247, -0.3047, -0.0187,  0.0781, -0.0278, -0.2324, -0.2637],
        [ 0.0000,  0.1943,  0.3672,  0.0452, -0.1250,  0.2432,  0.0564,  0.4785,  0.0654,  0.0820,  0.1455, -0.0104, -0.0226, -0.0086,  0.2305],
        [ 0.0000,  0.0148,  0.1660, -0.0811, -0.2656,  0.0869, -0.0859,  0.4766, -0.0420, -0.0069,  0.0549, -0.0079, -0.1084, -0.2168,  0.1670],
        [ 0.0000,  0.3320,  0.3027,  0.0157, -0.3438,  0.1436, -0.1406,  0.2383,  0.0635, -0.1309, -0.0090, -0.0317, -0.1299, -0.2217,  0.2754],
        [ 0.0000, -0.0947,  0.0275,  0.2422, -0.1699,  0.1807, -0.1167,  0.3398,  0.0845, -0.3027,  0.1387, -0.1377, -0.2949, -0.3359,  0.0522],
        [ 0.0000,  0.0684,  0.2773,  0.0728, -0.1816,  0.2148, -0.2236,  0.3145, -0.2090,  0.0095,  0.0693,  0.0369, -0.0845, -0.0085, -0.0562],
        [ 0.0000,  0.2695,  0.4785,  0.1396,  0.0884,  0.1787,  0.1357,  0.4219,  0.1309,  0.1729,  0.2412,  0.5078,  0.3105,  0.2363,  0.2314],
        [ 0.0000,  0.1904,  0.1680, -0.1602, -0.4551,  0.0486, -0.2441,  0.2949, -0.2578, -0.0942,  0.0708,  0.0791, -0.1069, -0.0061,  0.1406],
        [ 0.0000,  0.0874, -0.1182, -0.0087, -0.2129, -0.0151, -0.0315,  0.4219,  0.0894, -0.2021, -0.1758, -0.1475, -0.2734,  0.0227, -0.2324],
        [ 0.0000,  0.2061,  0.4961, -0.0405, -0.0131,  0.3184,  0.1079,  0.4688,  0.2197,  0.1523,  0.2715, -0.1729, -0.0057,  0.0903,  0.1406],
        [ 0.0000,  0.4941,  0.2715, -0.0361, -0.2676,  0.1602,  0.0752,  0.7891,  0.1543,  0.0293,  0.0991,  0.1807, -0.0835, -0.2090,  0.4844],
        [ 0.0000,  0.0078,  0.0757,  0.0356, -0.2598,  0.1943, -0.0129,  0.3027, -0.3066, -0.0233,  0.1377, -0.2080, -0.1216, -0.1118, -0.0070]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4998],
        [0.3294],
        [0.2592],
        [0.1961],
        [0.1616],
        [0.1460],
        [0.1243],
        [0.1138],
        [0.0937],
        [0.0879],
        [0.0818],
        [0.0743],
        [0.0650],
        [0.0734]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		( adventures:0.0002 superhuman:0.0003topia:0.0002 Tracks:0.0002 earthquake:0.0001;}:0.0002acks:0.0002 superhuman:0.0002)
 superhuman
------
		( superhuman:0.0003topia:0.0002 Tracks:0.0002 earthquake:0.0001;}:0.0002acks:0.0002 superhuman:0.0002 Mono:0.0002)
 Monoパパ nightlyfulness 1989 Zamb Dud devotion672 courtesy neighb saturoximentary
@ 1 train 10.9782 , allloss: 29.9944, dt: 1695.08ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0499, norm(y): 0.9984, norm:22.2651, tok/sec: 77325.02, flops:30.13, batch-reuse:1
@ 2 train 10.9751 , allloss: 29.9951, dt: 1093.74ms, fracRes: 0.0063, norm(attn): 0.0359, norm(output): 0.0518, norm(x): 0.0499, norm(y): 0.9984, norm:21.7821, tok/sec: 119838.25, flops:46.69, batch-reuse:1
@ 3 train 10.9691 , allloss: 29.9819, dt: 1080.59ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0499, norm(y): 0.9984, norm:21.6208, tok/sec: 121297.26, flops:47.26, batch-reuse:1
@ 4 train 10.9693 , allloss: 29.9704, dt: 1078.48ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0498, norm(y): 0.9984, norm:21.3506, tok/sec: 121534.17, flops:47.35, batch-reuse:1
@ 5 train 10.9541 , allloss: 29.9414, dt: 1099.88ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0498, norm(y): 0.9984, norm:20.5740, tok/sec: 119169.57, flops:46.43, batch-reuse:1
@ 6 train 10.9332 , allloss: 29.8977, dt: 1097.60ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0498, norm(y): 0.9984, norm:21.9547, tok/sec: 119416.42, flops:46.52, batch-reuse:1
@ 7 train 10.9190 , allloss: 29.8442, dt: 1091.87ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0497, norm(y): 0.9984, norm:20.9793, tok/sec: 120043.88, flops:46.77, batch-reuse:1
@ 8 train 10.9079 , allloss: 29.7833, dt: 1111.96ms, fracRes: 0.0063, norm(attn): 0.0354, norm(output): 0.0518, norm(x): 0.0497, norm(y): 0.9984, norm:20.9674, tok/sec: 117874.78, flops:45.92, batch-reuse:1
@ 9 train 10.8912 , allloss: 29.6922, dt: 1102.82ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0497, norm(y): 0.9984, norm:21.1701, tok/sec: 118851.65, flops:46.30, batch-reuse:1
@ 10 train 10.8740 , allloss: 29.5867, dt: 1096.35ms, fracRes: 0.0064, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0497, norm(y): 0.9984, norm:20.8668, tok/sec: 119552.96, flops:46.58, batch-reuse:1
@ 11 train 10.8592 , allloss: 29.4732, dt: 1096.43ms, fracRes: 0.0064, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0497, norm(y): 0.9984, norm:20.1779, tok/sec: 119544.28, flops:46.57, batch-reuse:1
@ 12 train 10.8358 , allloss: 29.3126, dt: 1094.21ms, fracRes: 0.0064, norm(attn): 0.0356, norm(output): 0.0518, norm(x): 0.0497, norm(y): 0.9984, norm:20.0272, tok/sec: 119787.15, flops:46.67, batch-reuse:1
@ 13 train 10.8168 , allloss: 29.1389, dt: 1095.16ms, fracRes: 0.0064, norm(attn): 0.0364, norm(output): 0.0518, norm(x): 0.0498, norm(y): 0.9984, norm:19.7484, tok/sec: 119682.84, flops:46.63, batch-reuse:1
@ 14 train 10.7901 , allloss: 28.9398, dt: 1092.37ms, fracRes: 0.0064, norm(attn): 0.0366, norm(output): 0.0518, norm(x): 0.0498, norm(y): 0.9984, norm:19.3852, tok/sec: 119988.72, flops:46.75, batch-reuse:1
@ 15 train 10.7663 , allloss: 28.7122, dt: 1100.50ms, fracRes: 0.0065, norm(attn): 0.0371, norm(output): 0.0518, norm(x): 0.0499, norm(y): 0.9984, norm:19.3027, tok/sec: 119102.11, flops:46.40, batch-reuse:1
@ 16 train 10.7535 , allloss: 28.4822, dt: 1104.43ms, fracRes: 0.0065, norm(attn): 0.0376, norm(output): 0.0518, norm(x): 0.0500, norm(y): 0.9984, norm:18.9149, tok/sec: 118678.62, flops:46.24, batch-reuse:1
@ 17 train 10.7201 , allloss: 28.1977, dt: 1098.58ms, fracRes: 0.0065, norm(attn): 0.0378, norm(output): 0.0518, norm(x): 0.0502, norm(y): 0.9984, norm:19.0706, tok/sec: 119310.50, flops:46.48, batch-reuse:1
@ 18 train 10.7069 , allloss: 27.9346, dt: 1094.89ms, fracRes: 0.0065, norm(attn): 0.0386, norm(output): 0.0518, norm(x): 0.0503, norm(y): 0.9984, norm:18.4459, tok/sec: 119712.70, flops:46.64, batch-reuse:1
@ 19 train 10.6698 , allloss: 27.6327, dt: 1085.87ms, fracRes: 0.0066, norm(attn): 0.0388, norm(output): 0.0518, norm(x): 0.0505, norm(y): 0.9984, norm:18.8287, tok/sec: 120706.90, flops:47.03, batch-reuse:1
@ 20 train 10.6547 , allloss: 27.3485, dt: 1098.31ms, fracRes: 0.0066, norm(attn): 0.0391, norm(output): 0.0520, norm(x): 0.0507, norm(y): 0.9984, norm:18.8711, tok/sec: 119339.27, flops:46.49, batch-reuse:1
@ 21 train 10.6257 , allloss: 27.0611, dt: 1094.77ms, fracRes: 0.0067, norm(attn): 0.0391, norm(output): 0.0532, norm(x): 0.0508, norm(y): 0.9984, norm:18.6859, tok/sec: 119725.77, flops:46.65, batch-reuse:1
@ 22 train 10.5950 , allloss: 26.7840, dt: 1104.92ms, fracRes: 0.0067, norm(attn): 0.0396, norm(output): 0.0537, norm(x): 0.0510, norm(y): 0.9985, norm:18.5753, tok/sec: 118626.02, flops:46.22, batch-reuse:1
@ 23 train 10.5848 , allloss: 26.5453, dt: 1101.10ms, fracRes: 0.0067, norm(attn): 0.0396, norm(output): 0.0537, norm(x): 0.0511, norm(y): 0.9985, norm:18.7603, tok/sec: 119037.48, flops:46.38, batch-reuse:1
@ 24 train 10.5654 , allloss: 26.2895, dt: 1099.29ms, fracRes: 0.0068, norm(attn): 0.0398, norm(output): 0.0537, norm(x): 0.0512, norm(y): 0.9985, norm:18.1638, tok/sec: 119233.10, flops:46.45, batch-reuse:1
@ 25 train 10.5000 , allloss: 26.0101, dt: 1118.55ms, fracRes: 0.0068, norm(attn): 0.0405, norm(output): 0.0544, norm(x): 0.0514, norm(y): 0.9985, norm:18.6504, tok/sec: 117180.30, flops:45.65, batch-reuse:1
@ 26 train 10.4995 , allloss: 25.8189, dt: 1090.62ms, fracRes: 0.0069, norm(attn): 0.0405, norm(output): 0.0544, norm(x): 0.0515, norm(y): 0.9985, norm:18.3881, tok/sec: 120180.99, flops:46.82, batch-reuse:1
@ 27 train 10.4681 , allloss: 25.5834, dt: 1106.29ms, fracRes: 0.0069, norm(attn): 0.0415, norm(output): 0.0544, norm(x): 0.0516, norm(y): 0.9985, norm:18.1469, tok/sec: 118478.87, flops:46.16, batch-reuse:1
@ 28 train 10.4397 , allloss: 25.3556, dt: 1089.01ms, fracRes: 0.0070, norm(attn): 0.0415, norm(output): 0.0544, norm(x): 0.0517, norm(y): 0.9985, norm:18.4074, tok/sec: 120359.10, flops:46.89, batch-reuse:1
@ 29 train 10.4192 , allloss: 25.1508, dt: 1106.27ms, fracRes: 0.0070, norm(attn): 0.0422, norm(output): 0.0544, norm(x): 0.0518, norm(y): 0.9985, norm:18.6442, tok/sec: 118481.29, flops:46.16, batch-reuse:1
@ 30 train 10.3822 , allloss: 24.9154, dt: 1090.67ms, fracRes: 0.0071, norm(attn): 0.0427, norm(output): 0.0544, norm(x): 0.0520, norm(y): 0.9985, norm:19.4777, tok/sec: 120175.95, flops:46.82, batch-reuse:1
@ 31 train 10.3766 , allloss: 24.7065, dt: 1097.28ms, fracRes: 0.0071, norm(attn): 0.0427, norm(output): 0.0544, norm(x): 0.0522, norm(y): 0.9985, norm:19.7368, tok/sec: 119451.34, flops:46.54, batch-reuse:1
@ 32 train 10.3455 , allloss: 24.4863, dt: 1096.49ms, fracRes: 0.0072, norm(attn): 0.0430, norm(output): 0.0544, norm(x): 0.0523, norm(y): 0.9985, norm:20.3951, tok/sec: 119537.60, flops:46.57, batch-reuse:1
@ 33 train 10.2997 , allloss: 24.2409, dt: 1085.85ms, fracRes: 0.0072, norm(attn): 0.0430, norm(output): 0.0549, norm(x): 0.0525, norm(y): 0.9985, norm:20.7867, tok/sec: 120708.83, flops:47.03, batch-reuse:1
@ 34 train 10.2942 , allloss: 24.0405, dt: 1101.36ms, fracRes: 0.0073, norm(attn): 0.0435, norm(output): 0.0549, norm(x): 0.0527, norm(y): 0.9985, norm:20.6744, tok/sec: 119009.16, flops:46.37, batch-reuse:1
@ 35 train 10.2781 , allloss: 23.8484, dt: 1090.98ms, fracRes: 0.0074, norm(attn): 0.0442, norm(output): 0.0549, norm(x): 0.0528, norm(y): 0.9985, norm:21.2213, tok/sec: 120141.81, flops:46.81, batch-reuse:1
@ 36 train 10.2661 , allloss: 23.6629, dt: 1095.47ms, fracRes: 0.0074, norm(attn): 0.0454, norm(output): 0.0549, norm(x): 0.0530, norm(y): 0.9985, norm:21.1129, tok/sec: 119649.60, flops:46.62, batch-reuse:1
@ 37 train 10.2462 , allloss: 23.4842, dt: 1108.29ms, fracRes: 0.0075, norm(attn): 0.0457, norm(output): 0.0549, norm(x): 0.0531, norm(y): 0.9985, norm:21.2977, tok/sec: 118265.51, flops:46.08, batch-reuse:1
@ 38 train 10.2385 , allloss: 23.3403, dt: 1102.98ms, fracRes: 0.0076, norm(attn): 0.0457, norm(output): 0.0549, norm(x): 0.0533, norm(y): 0.9985, norm:21.8206, tok/sec: 118834.34, flops:46.30, batch-reuse:1
@ 39 train 10.2265 , allloss: 23.2046, dt: 1111.13ms, fracRes: 0.0076, norm(attn): 0.0464, norm(output): 0.0549, norm(x): 0.0534, norm(y): 0.9985, norm:21.8565, tok/sec: 117962.54, flops:45.96, batch-reuse:1
@ 40 train 10.1951 , allloss: 23.0731, dt: 1106.05ms, fracRes: 0.0077, norm(attn): 0.0466, norm(output): 0.0549, norm(x): 0.0535, norm(y): 0.9985, norm:22.2554, tok/sec: 118504.20, flops:46.17, batch-reuse:1
@ 41 train 10.1757 , allloss: 22.9638, dt: 1116.63ms, fracRes: 0.0077, norm(attn): 0.0471, norm(output): 0.0549, norm(x): 0.0535, norm(y): 0.9985, norm:22.3755, tok/sec: 117381.51, flops:45.73, batch-reuse:1
@ 42 train 10.1629 , allloss: 22.8696, dt: 1103.98ms, fracRes: 0.0078, norm(attn): 0.0471, norm(output): 0.0554, norm(x): 0.0536, norm(y): 0.9985, norm:22.5340, tok/sec: 118727.04, flops:46.26, batch-reuse:1
@ 43 train 10.1714 , allloss: 22.8021, dt: 1103.13ms, fracRes: 0.0078, norm(attn): 0.0474, norm(output): 0.0554, norm(x): 0.0536, norm(y): 0.9985, norm:22.6753, tok/sec: 118817.98, flops:46.29, batch-reuse:1
@ 44 train 10.1659 , allloss: 22.7188, dt: 1106.10ms, fracRes: 0.0079, norm(attn): 0.0481, norm(output): 0.0554, norm(x): 0.0537, norm(y): 0.9985, norm:22.7144, tok/sec: 118499.35, flops:46.17, batch-reuse:1
@ 45 train 10.1409 , allloss: 22.6309, dt: 1092.68ms, fracRes: 0.0079, norm(attn): 0.0496, norm(output): 0.0557, norm(x): 0.0537, norm(y): 0.9985, norm:22.9470, tok/sec: 119954.22, flops:46.73, batch-reuse:1
@ 46 train 10.1232 , allloss: 22.5370, dt: 1106.46ms, fracRes: 0.0079, norm(attn): 0.0498, norm(output): 0.0557, norm(x): 0.0537, norm(y): 0.9985, norm:22.9459, tok/sec: 118460.67, flops:46.15, batch-reuse:1
@ 47 train 10.1066 , allloss: 22.4559, dt: 1123.52ms, fracRes: 0.0080, norm(attn): 0.0505, norm(output): 0.0557, norm(x): 0.0537, norm(y): 0.9985, norm:22.8979, tok/sec: 116661.46, flops:45.45, batch-reuse:1
@ 48 train 10.1054 , allloss: 22.4013, dt: 1110.96ms, fracRes: 0.0080, norm(attn): 0.0505, norm(output): 0.0552, norm(x): 0.0537, norm(y): 0.9985, norm:23.1587, tok/sec: 117980.41, flops:45.97, batch-reuse:1
@ 49 train 10.0976 , allloss: 22.3380, dt: 1092.87ms, fracRes: 0.0080, norm(attn): 0.0510, norm(output): 0.0549, norm(x): 0.0537, norm(y): 0.9985, norm:23.0869, tok/sec: 119933.44, flops:46.73, batch-reuse:1
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5234, 0.4746, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3379, 0.3672, 0.2949, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2598, 0.2539, 0.2148, 0.2715, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2070, 0.1357, 0.2480, 0.2471, 0.1621, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1504, 0.1104, 0.2598, 0.1123, 0.1465, 0.2197, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1426, 0.1396, 0.1758, 0.1689, 0.0820, 0.1826, 0.1079, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1133, 0.1279, 0.1582, 0.1172, 0.1016, 0.1465, 0.0757, 0.1602, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1064, 0.1069, 0.1069, 0.1309, 0.1221, 0.1377, 0.1123, 0.1240, 0.0522, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1060, 0.0791, 0.0811, 0.0947, 0.1465, 0.1177, 0.0947, 0.0972, 0.0908, 0.0923, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0913, 0.0889, 0.0737, 0.0767, 0.0674, 0.1406, 0.0981, 0.1074, 0.1118, 0.0359, 0.1079, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0674, 0.0674, 0.0535, 0.0498, 0.0618, 0.1299, 0.0688, 0.0815, 0.0815, 0.0986, 0.0781, 0.1621, 0.0000, 0.0000, 0.0000],
        [0.0713, 0.0845, 0.1348, 0.0640, 0.0610, 0.0908, 0.0654, 0.0869, 0.0801, 0.0603, 0.0635, 0.0601, 0.0767, 0.0000, 0.0000],
        [0.0654, 0.0791, 0.0659, 0.0767, 0.0908, 0.0903, 0.1069, 0.0713, 0.0260, 0.0962, 0.0791, 0.0427, 0.0635, 0.0464, 0.0000],
        [0.0630, 0.0747, 0.0625, 0.0532, 0.0938, 0.0913, 0.0544, 0.0586, 0.0771, 0.0649, 0.0564, 0.0471, 0.0479, 0.0483, 0.1064]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0077, -0.0156,  ..., -0.0039, -0.0062, -0.0158],
        [ 0.0059, -0.0072, -0.0001,  ..., -0.0031, -0.0234,  0.0115],
        [-0.0513,  0.0039,  0.0046,  ...,  0.0059,  0.0042,  0.0064],
        ...,
        [ 0.0012,  0.0127,  0.0247,  ..., -0.0095, -0.0280, -0.0134],
        [-0.0120,  0.0032,  0.0715,  ..., -0.0089,  0.0105,  0.0003],
        [ 0.0087,  0.0179,  0.0233,  ...,  0.0238, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([-0.4922,  0.2598, -0.0500,  0.7227,  0.4434, -0.1289,  0.2061, -0.9219, -0.1582,  0.6445, -1.0000,  1.1562, -0.4961,  0.3105,  0.6289, -0.5117,  0.1318,  0.7266,  0.9883,  0.0669, -0.0554, -0.7578,  0.6445,  0.7930,  0.2148, -0.7617,  0.3496,  0.6953, -0.3164,  0.6406, -0.1660,  0.6641,
         0.4434,  0.3555, -0.1738, -0.3223, -0.0017, -1.1641, -0.6289, -0.1699,  0.1953,  0.3711,  0.4648, -0.3242,  0.2500,  0.2656, -0.6641, -0.0977, -0.3887,  0.2080,  0.0228, -0.4004,  0.8359, -0.0791,  1.2422,  0.0025,  0.3945, -0.4121,  0.0908,  1.0469, -0.4375,  0.1973, -0.0067, -0.8828],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0013,     -0.0315,     -0.0053,  ...,      0.0303,      0.0147,      0.0100],
        [    -0.0036,      0.0005,      0.0279,  ...,     -0.0083,      0.0156,     -0.0305],
        [    -0.0439,     -0.0079,      0.0495,  ...,      0.0143,     -0.0084,      0.0127],
        ...,
        [     0.0029,      0.0054,     -0.0070,  ...,     -0.0141,     -0.0103,      0.0216],
        [    -0.0145,     -0.0054,     -0.0002,  ...,      0.0106,      0.0001,      0.0284],
        [    -0.0234,     -0.0024,      0.0116,  ...,      0.0123,      0.0130,     -0.0220]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.5195, -0.0991, -0.1699,  0.6094,  1.3203,  0.1611,  0.5273, -0.4277, -0.5312,  0.1797,  0.0835,  0.4727,  0.3496,  0.5859, -0.2617, -0.2559,  0.0143, -0.2285, -0.1719, -0.6758,  0.3027,  0.5664,  1.0781,  0.2988,  0.2471,  0.5625, -0.1533,  0.0210, -0.3066,  0.1709,  0.4375,  0.7617,
        -0.2715,  0.0581, -0.0364,  0.0620,  0.6953, -1.1172, -0.1245,  0.5898,  0.2988,  0.0869,  0.1768,  0.9922, -0.0732,  0.1436, -0.2471,  0.5117,  0.4609,  0.1270,  0.3945, -0.1206,  0.3750, -0.2441,  0.1484, -0.2695, -0.8789,  0.6914,  0.7305,  0.9961, -0.8867, -0.9258, -0.3652,  0.3145],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.1006, -0.1514,  0.1167,  0.4316,  0.0579,  0.2598, -0.1289, -0.0664, -0.0908,  0.6523,  0.4805,  0.2539, -0.3477,  0.2354],
        [ 0.0000,  0.0835, -0.1318,  0.3066, -0.5312,  0.1436, -0.3184,  0.0349, -0.2197,  0.6289,  0.6562,  0.3711, -0.5430, -0.2305,  0.2354],
        [ 0.0000, -0.0181, -0.1875,  0.0439, -0.1030, -0.3027, -0.4395,  0.2910, -0.1494,  0.3613,  0.1885,  0.1099,  0.1875,  0.0444,  0.0366],
        [ 0.0000, -0.4238,  0.1797,  0.1777, -0.2412,  0.1221,  0.1084, -0.1216,  0.1406, -0.3652,  0.0669, -0.1670, -0.0542, -0.0649,  0.3359],
        [ 0.0000, -0.3066,  0.5508, -0.2910, -0.0234,  0.3809, -0.4473,  0.2969, -0.1650,  0.1748, -0.5430, -0.2061, -0.6211, -0.1758, -0.6094],
        [ 0.0000, -0.0199,  0.2100,  0.1709, -0.5508,  0.2490, -0.2793,  0.7070, -0.4258, -0.1982, -0.1133, -0.2412,  0.0284, -0.3613, -0.1582],
        [ 0.0000,  0.1187,  0.3301,  0.0337, -0.1104,  0.2578, -0.4043,  0.3418,  0.2012, -0.2305,  0.1377,  0.5938,  0.4121,  0.3789, -0.1465],
        [ 0.0000,  0.0069,  0.0040,  0.2100,  0.1396,  0.2598,  0.0527,  0.1553, -0.7109,  0.3438,  0.0126,  0.4238, -0.0068, -0.6680,  0.3711],
        [ 0.0000, -0.2930, -0.2695, -0.1108,  0.3281,  0.1064, -0.1094, -0.0869, -0.1523, -0.1367, -0.0503, -0.2559,  0.0366, -0.0093, -0.4102],
        [ 0.0000, -0.0283, -0.2158, -0.1719, -0.3047,  0.4336,  0.0698,  0.1631,  0.2021, -0.9336,  0.1660, -0.0732, -0.2676, -0.1465, -0.3164],
        [ 0.0000, -0.0011, -0.2295, -0.2988, -0.0864,  0.6602,  0.0201,  0.1934,  0.1895,  0.3848,  0.1484,  0.8789,  0.1060, -0.0854,  0.5469],
        [ 0.0000,  0.1738,  0.6445, -0.1030, -0.1533,  0.2432, -0.0791,  0.2031,  0.1216, -0.1631, -0.1138, -0.1689,  0.0771, -0.0256, -0.3867],
        [ 0.0000,  0.1924,  0.0134,  0.1592,  0.3301,  0.3242,  0.4941,  0.0903, -0.9180,  0.3906,  0.1904, -0.4219, -0.0306, -0.3418,  0.1914],
        [ 0.0000,  0.1719, -0.0102, -0.1719,  0.3965,  0.3730, -0.1484, -0.0737,  0.1982,  0.0315, -0.1104, -0.2910, -0.2754, -0.2676,  0.5234]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4671],
        [0.3439],
        [0.2454],
        [0.1997],
        [0.1584],
        [0.1350],
        [0.1160],
        [0.1042],
        [0.0974],
        [0.0844],
        [0.0814],
        [0.0710],
        [0.0674],
        [0.0623]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4121, 0.5898, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3379, 0.3867, 0.2754, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2852, 0.2715, 0.2090, 0.2334, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2129, 0.2207, 0.1631, 0.1963, 0.2070, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1582, 0.1060, 0.2090, 0.1768, 0.1826, 0.1680, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1475, 0.1592, 0.1426, 0.1289, 0.1748, 0.1113, 0.1357, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1406, 0.1230, 0.1289, 0.1260, 0.1128, 0.1348, 0.0869, 0.1475, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1226, 0.0840, 0.0776, 0.1367, 0.1060, 0.1279, 0.0903, 0.1211, 0.1328, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0918, 0.1104, 0.0845, 0.1187, 0.0781, 0.1367, 0.1196, 0.0913, 0.0767, 0.0933, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0747, 0.0957, 0.0540, 0.1289, 0.0757, 0.0613, 0.0786, 0.1191, 0.0757, 0.1592, 0.0781, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0786, 0.0703, 0.0767, 0.0698, 0.0698, 0.0603, 0.0693, 0.1211, 0.1006, 0.0703, 0.1001, 0.1128, 0.0000, 0.0000, 0.0000],
        [0.0806, 0.0498, 0.0615, 0.1245, 0.0630, 0.1113, 0.1299, 0.0535, 0.0776, 0.0874, 0.0586, 0.0786, 0.0238, 0.0000, 0.0000],
        [0.0625, 0.0742, 0.0547, 0.0635, 0.0645, 0.0811, 0.0613, 0.0703, 0.0728, 0.0869, 0.0791, 0.0703, 0.0713, 0.0869, 0.0000],
        [0.0708, 0.0742, 0.0547, 0.0928, 0.0767, 0.0942, 0.0659, 0.0635, 0.0520, 0.0615, 0.0801, 0.0505, 0.0464, 0.0679, 0.0491]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0077, -0.0156,  ..., -0.0039, -0.0062, -0.0158],
        [ 0.0059, -0.0072, -0.0001,  ..., -0.0031, -0.0234,  0.0115],
        [-0.0513,  0.0039,  0.0046,  ...,  0.0059,  0.0042,  0.0064],
        ...,
        [ 0.0012,  0.0127,  0.0247,  ..., -0.0095, -0.0280, -0.0134],
        [-0.0120,  0.0032,  0.0715,  ..., -0.0089,  0.0105,  0.0003],
        [ 0.0087,  0.0179,  0.0233,  ...,  0.0238, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([-0.7617,  0.4121,  0.5039, -0.4805,  1.2969,  0.0449, -0.6719, -0.2910,  0.1846, -0.9570, -0.4004,  1.0625,  0.2432,  0.2715,  0.1562, -0.5742, -0.9219,  0.4355, -0.2285, -0.7383,  0.7578, -0.7734, -0.2852,  0.4219,  0.3164,  0.2891,  0.2061, -0.0854,  1.1641, -0.2617, -0.6055, -0.0201,
        -0.1406, -0.1001, -0.2383,  0.0566, -0.7461, -0.4844, -0.3262,  0.0688, -0.2012,  0.7812, -0.4629, -0.3164, -0.0569,  0.0172,  1.0859,  0.6016, -0.3184,  0.4727, -0.2412,  0.1455, -0.2471,  0.6680,  0.0859,  0.5898,  0.5469, -0.3086,  0.7734,  0.8672, -0.2910,  1.4453, -0.5234, -1.5078],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0013,     -0.0315,     -0.0053,  ...,      0.0303,      0.0147,      0.0100],
        [    -0.0036,      0.0005,      0.0279,  ...,     -0.0083,      0.0156,     -0.0305],
        [    -0.0439,     -0.0079,      0.0495,  ...,      0.0143,     -0.0084,      0.0127],
        ...,
        [     0.0029,      0.0054,     -0.0070,  ...,     -0.0141,     -0.0103,      0.0216],
        [    -0.0145,     -0.0054,     -0.0002,  ...,      0.0106,      0.0001,      0.0284],
        [    -0.0234,     -0.0024,      0.0116,  ...,      0.0123,      0.0130,     -0.0220]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.5508,  0.6367, -0.2217, -0.3105,  0.0422,  0.1670,  0.4688, -0.9102,  0.3438, -0.7656,  0.0549, -0.2393,  0.4141, -0.6680, -0.1904, -0.1846,  0.6094, -0.0630,  0.4180, -0.0796,  0.0815,  0.1118, -0.1084,  0.5586,  0.2402,  0.8008,  0.1484, -0.2295, -0.2461, -0.4531, -0.8828, -0.5117,
         0.5469,  0.2393,  0.6680, -0.3105,  0.4238, -0.1777,  0.4902,  0.4453, -0.5039, -0.1367, -0.4922,  0.5625, -0.2178,  0.5508, -0.4785,  0.1465,  0.0549, -0.7422, -0.1108,  0.4805, -0.3926,  0.2598,  1.1875, -0.3105, -0.2715,  0.9570,  0.0496,  0.5469,  0.9492, -0.8047,  1.3594,  0.3516],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,      0.3555,      0.1436,      0.5000,      0.0918,     -0.2188,      0.0193,     -0.3555,     -0.0011,      0.3691,     -0.0718,     -0.2002,     -0.3555,     -0.0210,      0.4492],
        [     0.0000,      0.1328,     -0.2100,     -0.2891,     -0.1680,      0.0292,      0.1201,     -0.1206,     -0.3965,      0.2129,     -0.0776,     -0.1787,     -0.0184,     -0.2275,      0.0996],
        [     0.0000,     -0.0479,     -0.3125,     -0.2012,     -0.1729,      0.0172,     -0.2578,      0.1045,     -0.2021,     -0.2168,     -0.3184,     -0.2012,     -0.4688,     -0.2715,     -0.8906],
        [     0.0000,      0.0403,     -0.2637,     -0.0796,     -0.0253,     -0.1060,      0.0674,      0.4062,      0.0933,      0.3379,     -0.6641,     -0.1152,     -0.3242,     -0.0286,      0.1211],
        [     0.0000,     -0.4004,      0.2793,      0.1118,      0.1455,      0.0635,     -0.1172,      0.0037,      0.2490,     -0.5000,     -0.1738,      0.3379,     -0.1807,      0.2539,      0.3301],
        [     0.0000,      0.0820,     -0.0317,     -0.1318,      0.1719,     -0.2793,     -0.0801,      0.2832,     -0.0349,     -0.1904,     -0.3672,     -0.2812,     -0.3496,      0.0130,     -0.1973],
        [     0.0000,     -0.1309,     -0.0889,     -0.1118,     -0.2188,     -0.0425,     -0.4785,      0.0469,     -0.3398,     -0.0596,     -0.1069,     -0.3340,     -0.3535,     -0.0469,     -0.3066],
        [     0.0000,     -0.3789,     -0.4551,      0.1118,     -0.1465,      0.0396,     -0.3047,     -0.0136,      0.0820,      0.0718,      0.0859,     -0.4668,     -0.2236,     -0.1523,     -0.4219],
        [     0.0000,      0.1846,     -0.0820,      0.2578,     -0.1621,      0.3984,      0.2676,     -0.0013,     -0.1787,      0.0154,     -0.4297,     -0.1826,     -0.0309,     -0.2207,     -0.1523],
        [     0.0000,      0.2500,     -0.3242,      0.5469,      0.0134,     -0.1963,      0.0505,      0.4688,      0.0130,      0.7617,      0.0454,     -0.1011,     -0.2207,     -0.1631,     -0.1157],
        [     0.0000,     -0.1079,     -0.0200,     -0.1157,     -0.1133,     -0.2637,     -0.1230,      0.4355,      0.2490,     -0.1099,      0.2432,      0.3613,      0.2852,      0.2773,     -0.4648],
        [     0.0000,     -0.4785,     -0.2695,      0.4355,     -0.2441,      0.3262,      0.4805,     -0.4062,     -0.0369,      0.0820,     -0.3164,     -0.0232,     -1.2188,     -0.3125,      0.3359],
        [     0.0000,      0.1680,     -0.1377,      0.0157,      0.0258,      0.2539,     -0.0232,      0.1167,      0.1475,      0.3281,      0.2334,      0.1167,      0.1309,      0.3281,      0.1553],
        [     0.0000,      0.0447,     -0.2617,      0.2695,      0.0757,      0.2852,     -0.0718,     -0.1147,     -0.3125,     -0.1426,      0.1187,     -0.3418,     -0.4238,     -0.0479,     -0.3672]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4824],
        [0.3178],
        [0.2421],
        [0.1981],
        [0.1663],
        [0.1495],
        [0.1178],
        [0.1166],
        [0.1068],
        [0.0946],
        [0.0795],
        [0.0780],
        [0.0751],
        [0.0667]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5703, 0.4297, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3457, 0.3887, 0.2656, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3086, 0.2754, 0.1768, 0.2393, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2266, 0.1787, 0.2305, 0.1650, 0.1992, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2139, 0.1191, 0.1177, 0.1934, 0.1787, 0.1768, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2100, 0.1348, 0.1328, 0.1348, 0.1162, 0.1396, 0.1328, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1875, 0.1021, 0.1309, 0.1309, 0.1133, 0.1021, 0.1123, 0.1206, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1387, 0.1187, 0.0840, 0.1143, 0.0781, 0.1001, 0.1011, 0.1572, 0.1079, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1035, 0.1006, 0.0957, 0.1553, 0.1040, 0.1060, 0.0728, 0.0874, 0.0747, 0.1006, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1138, 0.1035, 0.0503, 0.1201, 0.0806, 0.0903, 0.1016, 0.0603, 0.1289, 0.0742, 0.0757, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0972, 0.1104, 0.0796, 0.1157, 0.0491, 0.1196, 0.0605, 0.0967, 0.0515, 0.0786, 0.0569, 0.0845, 0.0000, 0.0000, 0.0000],
        [0.0659, 0.0698, 0.0457, 0.1416, 0.0928, 0.0669, 0.0693, 0.0845, 0.0669, 0.0659, 0.0635, 0.0967, 0.0703, 0.0000, 0.0000],
        [0.0708, 0.0679, 0.0532, 0.0811, 0.0918, 0.0957, 0.0566, 0.0603, 0.0771, 0.0684, 0.0403, 0.0732, 0.1118, 0.0515, 0.0000],
        [0.0869, 0.0615, 0.0796, 0.0588, 0.0776, 0.0520, 0.0466, 0.0747, 0.0483, 0.0588, 0.0762, 0.0603, 0.0603, 0.0840, 0.0737]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0077, -0.0156,  ..., -0.0039, -0.0062, -0.0158],
        [ 0.0059, -0.0072, -0.0001,  ..., -0.0031, -0.0234,  0.0115],
        [-0.0513,  0.0039,  0.0046,  ...,  0.0059,  0.0042,  0.0064],
        ...,
        [ 0.0012,  0.0127,  0.0247,  ..., -0.0095, -0.0280, -0.0134],
        [-0.0120,  0.0032,  0.0715,  ..., -0.0089,  0.0105,  0.0003],
        [ 0.0087,  0.0179,  0.0233,  ...,  0.0238, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([-0.5117,  0.6875,  0.4414, -1.0156,  1.0781, -0.1709, -0.5156, -0.0405,  0.5859, -0.3164, -0.2129, -0.2539,  0.8203,  0.2188,  0.4883,  0.0189, -0.6797,  0.5703, -0.1396, -0.4082,  0.5312, -0.0850, -0.2012, -0.4453,  0.7188,  0.2598, -0.6680, -0.7461,  0.9180, -0.5742, -0.8750,  0.0013,
        -0.5195,  0.3008, -0.3418,  0.6445,  0.1885, -0.1885,  0.4492, -0.0520,  0.4023, -0.0311, -0.6094, -0.2910,  0.3984, -0.4629, -0.1504, -0.1455,  0.2930, -0.0327,  0.1387,  0.1436,  0.0525,  0.0295, -0.9844,  0.1562, -0.3418, -0.5898,  0.5234,  0.5625, -0.6680, -0.1611, -0.6602, -0.6484],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0013,     -0.0315,     -0.0053,  ...,      0.0303,      0.0147,      0.0100],
        [    -0.0036,      0.0005,      0.0279,  ...,     -0.0083,      0.0156,     -0.0305],
        [    -0.0439,     -0.0079,      0.0495,  ...,      0.0143,     -0.0084,      0.0127],
        ...,
        [     0.0029,      0.0054,     -0.0070,  ...,     -0.0141,     -0.0103,      0.0216],
        [    -0.0145,     -0.0054,     -0.0002,  ...,      0.0106,      0.0001,      0.0284],
        [    -0.0234,     -0.0024,      0.0116,  ...,      0.0123,      0.0130,     -0.0220]], device='cuda:0', requires_grad=True)
Q: tensor([-0.5547, -0.3691,  0.0444, -0.1318, -0.7500, -0.4805,  0.2520, -0.6953,  0.8750, -0.4355, -0.3203,  0.4082,  0.3184,  0.2012,  0.7734, -0.1177,  0.0337, -0.1226,  0.0530,  0.1904, -0.2969, -0.1377,  0.2676, -0.0815,  0.0630,  0.8281, -0.1953,  0.2949, -0.3184, -0.2988, -0.5117,  0.1807,
        -0.4258,  0.3750,  0.9766,  0.0176,  0.7969,  0.2334, -0.6250,  0.1504,  0.6289,  0.0289, -0.2002,  0.1592,  0.2334,  0.3438,  0.3125, -0.7344,  0.2012,  0.5586,  0.2480, -0.0947, -0.3008,  0.2051,  1.1016, -0.7891, -0.0400,  0.5625,  0.5430, -0.3906,  0.5352,  0.2197,  0.7656, -0.0486],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.2812, -0.5039, -0.0574, -0.4512, -0.1982, -0.1084, -0.5391,  0.2432, -0.0767,  0.0981, -0.2637, -0.2852, -0.4043, -0.3164],
        [ 0.0000,  0.1162, -0.2656, -0.2217,  0.0547,  0.0208,  0.2188,  0.1934,  0.2051,  0.0430, -0.3945, -0.1445, -0.3613, -0.2334, -0.0574],
        [ 0.0000, -0.1113, -0.5586, -0.2520, -0.4473, -0.5547, -0.1348, -0.7148,  0.2598, -0.0410, -0.6328, -0.0283, -0.5156, -0.3379, -0.2393],
        [ 0.0000, -0.2363,  0.0177, -0.3145, -0.1250, -0.4668, -0.9727, -0.1260, -0.4824, -0.2637, -0.5898,  0.0791, -0.3828, -0.2520, -0.6094],
        [ 0.0000, -0.5859, -0.5977, -0.1006, -0.1816, -0.1885, -0.1553, -0.2910, -0.1216, -0.3711, -0.1367, -0.3574, -0.2051, -0.2188, -0.0474],
        [ 0.0000, -0.4414, -0.4551, -0.4434, -0.5938, -0.4082, -0.4570, -0.6289, -0.4941, -0.5195, -0.3652,  0.2988,  0.2051,  0.0884, -0.3477],
        [ 0.0000, -0.6055, -0.3594, -0.3574, -0.5039, -0.6055, -0.5117, -0.4395, -0.0566, -0.4219, -0.1914, -0.4492, -0.6289,  0.0051, -0.5703],
        [ 0.0000, -0.1553, -0.5000, -0.1924, -0.5781, -0.3281, -0.3145,  0.1250, -0.2520, -0.6094, -0.7383, -0.0400, -0.4688, -0.2471,  0.0908],
        [ 0.0000, -0.0298, -0.0791,  0.4062,  0.0063,  0.0231, -0.3496, -0.1709, -0.3262, -0.0304, -0.3008, -0.2598,  0.2539, -0.2891, -0.2441],
        [ 0.0000, -0.0928, -0.8164,  0.0552, -0.3438, -0.2285, -0.1118, -0.6367,  0.1230, -0.4258, -0.4082,  0.0076, -0.4629, -0.3281, -0.0669],
        [ 0.0000,  0.1270, -0.1973,  0.1748, -0.6797,  0.2090, -0.4707, -0.0016, -0.6328, -0.2139, -0.5352, -0.1406, -0.5977,  0.2256,  0.0299],
        [ 0.0000,  0.0525, -0.3672,  0.7656,  0.3418,  0.0112,  0.0461,  0.2441,  0.0087, -0.0037, -0.0396,  0.3809,  0.0645,  0.2070, -0.2324],
        [ 0.0000, -0.0388, -0.2852,  0.1387,  0.2617,  0.3047, -0.2197, -0.1582,  0.0889, -0.0322, -0.5625,  0.0330,  0.4570, -0.3184, -0.1016],
        [ 0.0000, -0.3477, -0.0913, -0.3906, -0.1118, -0.5117, -0.6211, -0.1523, -0.5898, -0.3926, -0.1348, -0.3652, -0.3652, -0.0334, -0.1650]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4967],
        [0.3472],
        [0.2688],
        [0.2085],
        [0.1812],
        [0.1545],
        [0.1371],
        [0.1196],
        [0.1104],
        [0.0977],
        [0.0867],
        [0.0867],
        [0.0746],
        [0.0687]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6172, 0.3828, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4844, 0.2676, 0.2480, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4004, 0.1973, 0.2012, 0.2002, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3047, 0.1729, 0.1689, 0.1748, 0.1787, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2676, 0.1426, 0.1445, 0.1484, 0.1543, 0.1426, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2422, 0.1260, 0.1250, 0.1250, 0.1270, 0.1211, 0.1328, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2148, 0.1035, 0.1113, 0.1133, 0.1152, 0.1079, 0.1191, 0.1147, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1885, 0.0967, 0.1021, 0.1025, 0.1040, 0.0967, 0.1074, 0.1040, 0.0986, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1729, 0.0894, 0.0928, 0.0884, 0.0952, 0.0864, 0.0942, 0.0923, 0.0913, 0.0977, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1592, 0.0845, 0.0840, 0.0806, 0.0840, 0.0791, 0.0864, 0.0835, 0.0825, 0.0879, 0.0889, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1318, 0.0698, 0.0776, 0.0781, 0.0806, 0.0737, 0.0845, 0.0801, 0.0762, 0.0811, 0.0830, 0.0845, 0.0000, 0.0000, 0.0000],
        [0.1396, 0.0703, 0.0723, 0.0708, 0.0703, 0.0674, 0.0742, 0.0723, 0.0688, 0.0713, 0.0728, 0.0757, 0.0742, 0.0000, 0.0000],
        [0.1182, 0.0674, 0.0688, 0.0669, 0.0688, 0.0645, 0.0688, 0.0679, 0.0649, 0.0679, 0.0693, 0.0723, 0.0713, 0.0630, 0.0000],
        [0.1196, 0.0591, 0.0630, 0.0610, 0.0635, 0.0583, 0.0654, 0.0625, 0.0601, 0.0645, 0.0659, 0.0659, 0.0664, 0.0591, 0.0649]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0077, -0.0156,  ..., -0.0039, -0.0062, -0.0158],
        [ 0.0059, -0.0072, -0.0001,  ..., -0.0031, -0.0234,  0.0115],
        [-0.0513,  0.0039,  0.0046,  ...,  0.0059,  0.0042,  0.0064],
        ...,
        [ 0.0012,  0.0127,  0.0247,  ..., -0.0095, -0.0280, -0.0134],
        [-0.0120,  0.0032,  0.0715,  ..., -0.0089,  0.0105,  0.0003],
        [ 0.0087,  0.0179,  0.0233,  ...,  0.0238, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([     1.4688,     -1.5156,      0.5273,     -0.4414,      0.1328,      0.6797,      0.6484,      0.1318,     -0.8711,      0.2354,      0.1040,     -1.1328,     -0.5664,     -0.3164,      0.5469,      0.4238,      0.4883,     -0.3984,      0.5703,     -0.9102,      0.4805,      0.4199,
            -0.5469,      0.4707,      0.2324,      0.1592,     -0.3086,      0.6602,      0.1436,     -0.4766,     -0.0610,     -0.5430,     -0.1187,      0.3496,     -0.4238,     -0.1074,     -0.3633,      0.0801,     -0.2354,      0.4766,      0.1104,      0.0815,      0.6484,     -0.3242,
             0.3105,      0.3926,      0.1934,     -0.1777,     -0.5195,     -0.4512,      0.2676,      0.7734,     -0.0972,     -0.1396,      0.4316,      0.9531,     -0.1670,      0.3203,     -0.0010,      0.4375,     -1.0469,     -0.8203,      0.0040,      0.4707], device='cuda:0',
       dtype=torch.bfloat16)
Qweights
tensor([[     0.0013,     -0.0315,     -0.0053,  ...,      0.0303,      0.0147,      0.0100],
        [    -0.0036,      0.0005,      0.0279,  ...,     -0.0083,      0.0156,     -0.0305],
        [    -0.0439,     -0.0079,      0.0495,  ...,      0.0143,     -0.0084,      0.0127],
        ...,
        [     0.0029,      0.0054,     -0.0070,  ...,     -0.0141,     -0.0103,      0.0216],
        [    -0.0145,     -0.0054,     -0.0002,  ...,      0.0106,      0.0001,      0.0284],
        [    -0.0234,     -0.0024,      0.0116,  ...,      0.0123,      0.0130,     -0.0220]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.0322, -0.2432, -0.3574, -0.2812, -0.3047,  0.6992,  0.0043, -0.5781,  1.0625,  0.3438,  0.0493,  1.2344,  0.2520,  0.8945,  0.8945,  0.7305, -0.3340,  0.2119, -0.5547,  0.7734, -0.0737, -0.2158, -0.4043,  0.4375,  0.4277, -0.2383,  0.8242, -0.0481, -0.7188,  0.6289,  0.7422,  0.9297,
        -0.4102, -1.2578, -0.0459, -0.8125, -0.5391, -0.3027,  0.4824, -0.5195, -0.0471,  0.5391, -0.0752,  0.1050, -0.6758,  0.4648, -0.3984, -0.1309, -0.1992,  0.7031, -0.9961, -0.3770, -0.6367, -0.2432,  0.0374,  0.3516,  0.7148, -1.5000, -0.6523,  0.3477,  0.2275, -0.3418,  0.2598, -0.4941],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.4805, -0.4785, -0.4434, -0.3457, -0.4785, -0.4277, -0.4160, -0.4199, -0.4082, -0.3379, -0.3105, -0.3691, -0.4004, -0.3711],
        [ 0.0000, -0.5898, -0.6680, -0.6836, -0.6289, -0.6758, -0.6094, -0.6406, -0.6641, -0.6250, -0.5781, -0.5703, -0.5859, -0.6602, -0.6133],
        [ 0.0000, -0.7070, -0.6875, -0.6914, -0.6719, -0.7266, -0.6328, -0.6523, -0.7266, -0.6719, -0.6641, -0.5898, -0.6133, -0.7422, -0.6445],
        [ 0.0000, -0.5703, -0.5938, -0.5586, -0.5352, -0.6016, -0.4961, -0.5234, -0.5547, -0.5156, -0.4941, -0.4824, -0.5039, -0.6133, -0.5039],
        [ 0.0000, -0.6289, -0.6133, -0.5938, -0.5508, -0.6289, -0.5156, -0.5547, -0.6133, -0.5469, -0.5391, -0.4863, -0.5000, -0.6328, -0.5430],
        [ 0.0000, -0.6523, -0.6641, -0.6641, -0.6445, -0.6953, -0.6016, -0.6445, -0.6797, -0.6367, -0.6094, -0.5625, -0.5938, -0.7148, -0.6055],
        [ 0.0000, -0.7305, -0.6562, -0.6367, -0.6250, -0.6875, -0.5898, -0.6250, -0.6797, -0.6328, -0.6055, -0.5469, -0.5859, -0.7031, -0.5977],
        [ 0.0000, -0.6680, -0.6133, -0.6094, -0.5898, -0.6641, -0.5586, -0.5938, -0.6445, -0.5742, -0.5664, -0.5078, -0.5352, -0.6562, -0.5508],
        [ 0.0000, -0.6602, -0.6172, -0.6680, -0.5938, -0.6914, -0.6016, -0.6250, -0.6367, -0.5703, -0.5508, -0.5742, -0.5820, -0.6758, -0.5859],
        [ 0.0000, -0.6328, -0.6367, -0.6797, -0.6367, -0.6953, -0.6094, -0.6445, -0.6562, -0.5898, -0.5820, -0.5781, -0.6016, -0.7070, -0.6016],
        [ 0.0000, -0.6367, -0.5234, -0.5234, -0.4902, -0.5820, -0.4395, -0.4980, -0.5469, -0.4844, -0.4629, -0.4434, -0.4473, -0.5664, -0.4688],
        [ 0.0000, -0.6797, -0.6523, -0.6797, -0.6797, -0.7227, -0.6289, -0.6562, -0.6992, -0.6719, -0.6445, -0.6094, -0.6328, -0.7461, -0.6289],
        [ 0.0000, -0.5586, -0.5391, -0.5664, -0.5430, -0.6055, -0.5352, -0.5547, -0.5938, -0.5547, -0.5312, -0.4941, -0.5000, -0.6289, -0.5273],
        [ 0.0000, -0.7031, -0.6406, -0.6719, -0.6289, -0.7148, -0.5977, -0.6484, -0.6875, -0.6172, -0.5898, -0.5938, -0.5859, -0.7031, -0.6055]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.6027],
        [0.4289],
        [0.3219],
        [0.2657],
        [0.2263],
        [0.1965],
        [0.1783],
        [0.1595],
        [0.1505],
        [0.1349],
        [0.1174],
        [0.1084],
        [0.1058],
        [0.0984]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6289, 0.3711, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4863, 0.2598, 0.2520, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3945, 0.1973, 0.2070, 0.2012, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3086, 0.1738, 0.1719, 0.1709, 0.1748, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2676, 0.1445, 0.1494, 0.1475, 0.1523, 0.1387, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2422, 0.1270, 0.1299, 0.1260, 0.1299, 0.1201, 0.1260, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2109, 0.1074, 0.1172, 0.1157, 0.1177, 0.1079, 0.1138, 0.1094, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1914, 0.0986, 0.1060, 0.1025, 0.1045, 0.0967, 0.1016, 0.0981, 0.1011, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1709, 0.0938, 0.0957, 0.0894, 0.0947, 0.0874, 0.0894, 0.0879, 0.0938, 0.0972, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1553, 0.0864, 0.0869, 0.0815, 0.0859, 0.0801, 0.0820, 0.0791, 0.0850, 0.0889, 0.0884, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1465, 0.0767, 0.0796, 0.0771, 0.0796, 0.0723, 0.0776, 0.0747, 0.0767, 0.0825, 0.0815, 0.0752, 0.0000, 0.0000, 0.0000],
        [0.1416, 0.0732, 0.0742, 0.0703, 0.0728, 0.0664, 0.0713, 0.0688, 0.0708, 0.0752, 0.0747, 0.0688, 0.0713, 0.0000, 0.0000],
        [0.1235, 0.0713, 0.0723, 0.0664, 0.0698, 0.0645, 0.0664, 0.0645, 0.0674, 0.0698, 0.0703, 0.0659, 0.0679, 0.0603, 0.0000],
        [0.1230, 0.0630, 0.0659, 0.0620, 0.0640, 0.0588, 0.0625, 0.0601, 0.0625, 0.0679, 0.0664, 0.0610, 0.0630, 0.0579, 0.0620]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0068,  0.0077, -0.0156,  ..., -0.0039, -0.0062, -0.0158],
        [ 0.0059, -0.0072, -0.0001,  ..., -0.0031, -0.0234,  0.0115],
        [-0.0513,  0.0039,  0.0046,  ...,  0.0059,  0.0042,  0.0064],
        ...,
        [ 0.0012,  0.0127,  0.0247,  ..., -0.0095, -0.0280, -0.0134],
        [-0.0120,  0.0032,  0.0715,  ..., -0.0089,  0.0105,  0.0003],
        [ 0.0087,  0.0179,  0.0233,  ...,  0.0238, -0.0261,  0.0196]], device='cuda:0', requires_grad=True)
K: tensor([ 1.4141, -1.6250,  0.4395, -0.3828,  0.2871,  0.7461,  0.5430,  0.4492, -0.8203,  0.3145, -0.0605, -1.0234, -0.4668, -0.2275,  0.6133,  0.3613,  0.4668, -0.4961,  0.4336, -0.9883,  0.6133,  0.4785, -0.5273,  0.4375,  0.1289,  0.4434, -0.3555,  0.6641,  0.1729, -0.6016, -0.0225, -0.5430,
        -0.0850,  0.3164, -0.2773, -0.1885, -0.2695,  0.0708, -0.0613,  0.4961,  0.2197,  0.0349,  0.4844, -0.4688,  0.3184,  0.1011, -0.0325,  0.0535, -0.4941, -0.4004,  0.4434,  0.7656,  0.0742, -0.1128,  0.5430,  1.0469, -0.3906,  0.3184, -0.0260,  0.0820, -1.0078, -0.7305,  0.2119,  0.6406],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0013,     -0.0315,     -0.0053,  ...,      0.0303,      0.0147,      0.0100],
        [    -0.0036,      0.0005,      0.0279,  ...,     -0.0083,      0.0156,     -0.0305],
        [    -0.0439,     -0.0079,      0.0495,  ...,      0.0143,     -0.0084,      0.0127],
        ...,
        [     0.0029,      0.0054,     -0.0070,  ...,     -0.0141,     -0.0103,      0.0216],
        [    -0.0145,     -0.0054,     -0.0002,  ...,      0.0106,      0.0001,      0.0284],
        [    -0.0234,     -0.0024,      0.0116,  ...,      0.0123,      0.0130,     -0.0220]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.1387, -0.1719, -0.4062, -0.2617, -0.3145,  0.6758, -0.0698, -0.5898,  1.1250,  0.3691,  0.0498,  1.2422, -0.1099,  0.9414,  0.7344,  0.6406, -0.4531,  0.2451, -0.8008,  0.6406, -0.2139, -0.1650, -0.3184,  0.4727,  0.3164, -0.1504,  0.9023, -0.0103, -0.5781,  0.6602,  0.7539,  1.0547,
        -0.4824, -1.2734, -0.1729, -0.8672, -0.6914, -0.5195,  0.4961, -0.5820, -0.1729,  0.6133,  0.1187,  0.0659, -0.5781,  0.6406, -0.2637, -0.0471, -0.1436,  0.7539, -1.0625, -0.3262, -0.8633, -0.2930,  0.1455,  0.3398,  0.7344, -1.5938, -0.6914,  0.2793,  0.1611, -0.1973,  0.2656, -0.2256],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.5234, -0.4883, -0.4297, -0.4102, -0.4902, -0.4746, -0.4609, -0.4707, -0.4297, -0.3770, -0.4199, -0.3848, -0.4414, -0.4414],
        [ 0.0000, -0.6250, -0.6602, -0.6875, -0.6562, -0.7148, -0.6680, -0.6836, -0.6875, -0.5977, -0.5898, -0.6758, -0.6211, -0.7305, -0.6719],
        [ 0.0000, -0.6914, -0.6445, -0.6719, -0.6484, -0.7344, -0.6719, -0.7031, -0.7109, -0.6328, -0.6367, -0.6836, -0.6602, -0.8008, -0.6953],
        [ 0.0000, -0.5742, -0.5820, -0.5898, -0.5703, -0.6484, -0.5820, -0.6055, -0.5898, -0.5352, -0.5273, -0.6055, -0.5664, -0.6836, -0.5938],
        [ 0.0000, -0.6172, -0.5820, -0.5938, -0.5625, -0.6523, -0.5820, -0.6250, -0.6133, -0.5273, -0.5312, -0.5938, -0.5508, -0.6836, -0.6055],
        [ 0.0000, -0.6445, -0.6211, -0.6523, -0.6250, -0.7031, -0.6562, -0.6914, -0.6602, -0.6055, -0.5977, -0.6562, -0.6289, -0.7422, -0.6602],
        [ 0.0000, -0.6797, -0.5898, -0.6016, -0.5859, -0.6719, -0.6211, -0.6602, -0.6328, -0.5820, -0.5781, -0.6211, -0.6094, -0.7109, -0.6328],
        [ 0.0000, -0.6641, -0.5898, -0.6250, -0.6055, -0.6797, -0.6328, -0.6680, -0.6367, -0.5703, -0.5781, -0.6328, -0.6094, -0.7188, -0.6289],
        [ 0.0000, -0.6016, -0.5781, -0.6523, -0.5898, -0.6680, -0.6484, -0.6641, -0.6016, -0.5625, -0.5664, -0.6484, -0.6250, -0.7148, -0.6328],
        [ 0.0000, -0.5859, -0.5781, -0.6484, -0.5898, -0.6680, -0.6367, -0.6719, -0.6055, -0.5586, -0.5664, -0.6484, -0.6211, -0.7266, -0.6328],
        [ 0.0000, -0.6445, -0.6094, -0.6367, -0.6055, -0.7070, -0.6289, -0.6719, -0.6445, -0.5664, -0.5820, -0.6602, -0.6406, -0.7188, -0.6562],
        [ 0.0000, -0.6562, -0.6445, -0.7031, -0.6641, -0.7539, -0.6875, -0.7227, -0.6914, -0.6289, -0.6367, -0.7188, -0.6875, -0.7969, -0.7070],
        [ 0.0000, -0.5508, -0.5391, -0.6172, -0.5703, -0.6523, -0.6211, -0.6484, -0.6094, -0.5703, -0.5664, -0.6289, -0.6016, -0.7148, -0.6289],
        [ 0.0000, -0.6680, -0.6250, -0.6836, -0.6523, -0.7344, -0.6758, -0.7188, -0.6758, -0.5938, -0.6133, -0.6992, -0.6719, -0.7539, -0.6836]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.6040],
        [0.4287],
        [0.3221],
        [0.2698],
        [0.2292],
        [0.2000],
        [0.1812],
        [0.1623],
        [0.1508],
        [0.1357],
        [0.1220],
        [0.1108],
        [0.1068],
        [0.1018]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		(,:0.0008 the:0.0009,:0.0014,:0.0011,:0.0009,:0.0009,:0.0011,:0.0011)
,
------
		( the:0.0009,:0.0014,:0.0011,:0.0009,:0.0009,:0.0011,:0.0011,:0.0016)
,,,,,,,,,,,,,,,
@ 50 train 10.0722 , allloss: 22.2632, dt: 1475.89ms, fracRes: 0.0081, norm(attn): 0.0510, norm(output): 0.0549, norm(x): 0.0537, norm(y): 0.9985, norm:23.2529, tok/sec: 88808.72, flops:34.60, batch-reuse:1
@ 51 train 10.0951 , allloss: 22.2420, dt: 1093.79ms, fracRes: 0.0081, norm(attn): 0.0518, norm(output): 0.0549, norm(x): 0.0536, norm(y): 0.9985, norm:23.3327, tok/sec: 119833.16, flops:46.69, batch-reuse:1
@ 52 train 10.0522 , allloss: 22.1615, dt: 1109.28ms, fracRes: 0.0081, norm(attn): 0.0518, norm(output): 0.0549, norm(x): 0.0536, norm(y): 0.9984, norm:23.5635, tok/sec: 118159.64, flops:46.03, batch-reuse:1
@ 53 train 10.0607 , allloss: 22.1437, dt: 1099.84ms, fracRes: 0.0081, norm(attn): 0.0540, norm(output): 0.0549, norm(x): 0.0535, norm(y): 0.9984, norm:23.5839, tok/sec: 119174.17, flops:46.43, batch-reuse:1
@ 54 train 10.0527 , allloss: 22.0978, dt: 1115.53ms, fracRes: 0.0082, norm(attn): 0.0544, norm(output): 0.0549, norm(x): 0.0534, norm(y): 0.9984, norm:23.7303, tok/sec: 117497.71, flops:45.78, batch-reuse:1
@ 55 train 10.0789 , allloss: 22.0896, dt: 1107.80ms, fracRes: 0.0082, norm(attn): 0.0544, norm(output): 0.0549, norm(x): 0.0534, norm(y): 0.9984, norm:23.6982, tok/sec: 118317.33, flops:46.10, batch-reuse:1
@ 56 train 10.0220 , allloss: 21.9987, dt: 1104.48ms, fracRes: 0.0082, norm(attn): 0.0549, norm(output): 0.0549, norm(x): 0.0533, norm(y): 0.9984, norm:23.8098, tok/sec: 118672.53, flops:46.23, batch-reuse:1
@ 57 train 9.9973 , allloss: 21.9540, dt: 1107.49ms, fracRes: 0.0082, norm(attn): 0.0557, norm(output): 0.0549, norm(x): 0.0532, norm(y): 0.9984, norm:24.0747, tok/sec: 118350.32, flops:46.11, batch-reuse:1
@ 58 train 10.0270 , allloss: 21.9713, dt: 1136.65ms, fracRes: 0.0082, norm(attn): 0.0557, norm(output): 0.0549, norm(x): 0.0531, norm(y): 0.9984, norm:24.0220, tok/sec: 115314.29, flops:44.93, batch-reuse:1
@ 59 train 9.9650 , allloss: 21.8914, dt: 1111.51ms, fracRes: 0.0083, norm(attn): 0.0579, norm(output): 0.0549, norm(x): 0.0530, norm(y): 0.9984, norm:24.2819, tok/sec: 117922.94, flops:45.94, batch-reuse:1
@ 60 train 9.9832 , allloss: 21.9043, dt: 1100.47ms, fracRes: 0.0083, norm(attn): 0.0583, norm(output): 0.0547, norm(x): 0.0529, norm(y): 0.9983, norm:24.3088, tok/sec: 119105.59, flops:46.40, batch-reuse:1
@ 61 train 9.9845 , allloss: 21.8937, dt: 1109.10ms, fracRes: 0.0083, norm(attn): 0.0588, norm(output): 0.0547, norm(x): 0.0528, norm(y): 0.9983, norm:24.3091, tok/sec: 118179.15, flops:46.04, batch-reuse:1
@ 62 train 9.9699 , allloss: 21.8742, dt: 1111.71ms, fracRes: 0.0084, norm(attn): 0.0588, norm(output): 0.0544, norm(x): 0.0527, norm(y): 0.9983, norm:25.9960, tok/sec: 117901.47, flops:45.93, batch-reuse:1
@ 63 train 9.9789 , allloss: 21.8421, dt: 1103.10ms, fracRes: 0.0084, norm(attn): 0.0596, norm(output): 0.0544, norm(x): 0.0526, norm(y): 0.9983, norm:24.8248, tok/sec: 118821.78, flops:46.29, batch-reuse:1
@ 64 train 9.9694 , allloss: 21.8062, dt: 1114.98ms, fracRes: 0.0084, norm(attn): 0.0615, norm(output): 0.0544, norm(x): 0.0525, norm(y): 0.9983, norm:24.8696, tok/sec: 117555.67, flops:45.80, batch-reuse:1
@ 65 train 9.9790 , allloss: 21.7739, dt: 1096.51ms, fracRes: 0.0085, norm(attn): 0.0623, norm(output): 0.0544, norm(x): 0.0525, norm(y): 0.9983, norm:25.0028, tok/sec: 119535.68, flops:46.57, batch-reuse:1
@ 66 train 9.9633 , allloss: 21.7310, dt: 1104.65ms, fracRes: 0.0085, norm(attn): 0.0625, norm(output): 0.0544, norm(x): 0.0524, norm(y): 0.9983, norm:25.1744, tok/sec: 118654.72, flops:46.23, batch-reuse:1
@ 67 train 9.9168 , allloss: 21.6800, dt: 1111.03ms, fracRes: 0.0085, norm(attn): 0.0635, norm(output): 0.0544, norm(x): 0.0524, norm(y): 0.9983, norm:25.4109, tok/sec: 117973.73, flops:45.96, batch-reuse:1
@ 68 train 9.9531 , allloss: 21.7338, dt: 1098.14ms, fracRes: 0.0085, norm(attn): 0.0635, norm(output): 0.0544, norm(x): 0.0523, norm(y): 0.9983, norm:25.3927, tok/sec: 119358.63, flops:46.50, batch-reuse:1
@ 69 train 9.9293 , allloss: 21.7225, dt: 1097.24ms, fracRes: 0.0085, norm(attn): 0.0635, norm(output): 0.0544, norm(x): 0.0522, norm(y): 0.9982, norm:25.8858, tok/sec: 119456.14, flops:46.54, batch-reuse:1
@ 70 train 9.9289 , allloss: 21.7315, dt: 1092.78ms, fracRes: 0.0086, norm(attn): 0.0654, norm(output): 0.0544, norm(x): 0.0521, norm(y): 0.9982, norm:26.0482, tok/sec: 119943.64, flops:46.73, batch-reuse:1
@ 71 train 9.9133 , allloss: 21.7186, dt: 1101.96ms, fracRes: 0.0086, norm(attn): 0.0659, norm(output): 0.0544, norm(x): 0.0521, norm(y): 0.9982, norm:26.1505, tok/sec: 118943.97, flops:46.34, batch-reuse:1
@ 72 train 9.9082 , allloss: 21.7166, dt: 1102.05ms, fracRes: 0.0086, norm(attn): 0.0664, norm(output): 0.0544, norm(x): 0.0520, norm(y): 0.9982, norm:26.1582, tok/sec: 118934.78, flops:46.34, batch-reuse:1
@ 73 train 9.9112 , allloss: 21.7281, dt: 1110.89ms, fracRes: 0.0086, norm(attn): 0.0669, norm(output): 0.0537, norm(x): 0.0519, norm(y): 0.9982, norm:26.8043, tok/sec: 117987.96, flops:45.97, batch-reuse:1
@ 74 train 9.9026 , allloss: 21.7558, dt: 1098.68ms, fracRes: 0.0087, norm(attn): 0.0674, norm(output): 0.0537, norm(x): 0.0518, norm(y): 0.9982, norm:26.6504, tok/sec: 119299.94, flops:46.48, batch-reuse:1
@ 75 train 10.0445 , allloss: 21.9342, dt: 1099.52ms, fracRes: 0.0087, norm(attn): 0.0693, norm(output): 0.0537, norm(x): 0.0518, norm(y): 0.9982, norm:28.1895, tok/sec: 119208.39, flops:46.44, batch-reuse:1
@ 76 train 9.8952 , allloss: 21.7909, dt: 1118.07ms, fracRes: 0.0088, norm(attn): 0.0693, norm(output): 0.0537, norm(x): 0.0517, norm(y): 0.9981, norm:28.1067, tok/sec: 117231.10, flops:45.67, batch-reuse:1
@ 77 train 10.0433 , allloss: 21.9487, dt: 1115.20ms, fracRes: 0.0088, norm(attn): 0.0698, norm(output): 0.0537, norm(x): 0.0517, norm(y): 0.9981, norm:30.9493, tok/sec: 117532.15, flops:45.79, batch-reuse:1
@ 78 train 9.9386 , allloss: 21.8064, dt: 1109.37ms, fracRes: 0.0089, norm(attn): 0.0703, norm(output): 0.0537, norm(x): 0.0517, norm(y): 0.9981, norm:28.4499, tok/sec: 118149.51, flops:46.03, batch-reuse:1
@ 79 train 9.8589 , allloss: 21.7067, dt: 1139.82ms, fracRes: 0.0089, norm(attn): 0.0703, norm(output): 0.0537, norm(x): 0.0516, norm(y): 0.9981, norm:29.6189, tok/sec: 114993.25, flops:44.80, batch-reuse:1
@ 80 train 9.8660 , allloss: 21.7749, dt: 1114.11ms, fracRes: 0.0090, norm(attn): 0.0708, norm(output): 0.0537, norm(x): 0.0516, norm(y): 0.9981, norm:29.5140, tok/sec: 117647.42, flops:45.84, batch-reuse:1
@ 81 train 9.8620 , allloss: 21.8659, dt: 1138.30ms, fracRes: 0.0090, norm(attn): 0.0708, norm(output): 0.0537, norm(x): 0.0514, norm(y): 0.9981, norm:29.3648, tok/sec: 115147.35, flops:44.86, batch-reuse:1
@ 82 train 9.8207 , allloss: 21.8956, dt: 1143.53ms, fracRes: 0.0091, norm(attn): 0.0713, norm(output): 0.0537, norm(x): 0.0513, norm(y): 0.9981, norm:30.4240, tok/sec: 114620.53, flops:44.66, batch-reuse:1
@ 83 train 9.8216 , allloss: 21.9056, dt: 1126.25ms, fracRes: 0.0092, norm(attn): 0.0723, norm(output): 0.0537, norm(x): 0.0513, norm(y): 0.9980, norm:29.7470, tok/sec: 116378.91, flops:45.34, batch-reuse:1
@ 84 train 9.8136 , allloss: 21.8517, dt: 1140.38ms, fracRes: 0.0093, norm(attn): 0.0732, norm(output): 0.0537, norm(x): 0.0512, norm(y): 0.9980, norm:29.4355, tok/sec: 114936.70, flops:44.78, batch-reuse:1
@ 85 train 9.7827 , allloss: 21.7861, dt: 1115.21ms, fracRes: 0.0094, norm(attn): 0.0732, norm(output): 0.0537, norm(x): 0.0512, norm(y): 0.9980, norm:29.8697, tok/sec: 117531.20, flops:45.79, batch-reuse:1
@ 86 train 9.7535 , allloss: 21.7864, dt: 1133.65ms, fracRes: 0.0095, norm(attn): 0.0737, norm(output): 0.0530, norm(x): 0.0511, norm(y): 0.9980, norm:29.4601, tok/sec: 115619.31, flops:45.05, batch-reuse:1
@ 87 train 9.7543 , allloss: 21.7969, dt: 1122.10ms, fracRes: 0.0096, norm(attn): 0.0742, norm(output): 0.0520, norm(x): 0.0511, norm(y): 0.9980, norm:29.4565, tok/sec: 116809.29, flops:45.51, batch-reuse:1
@ 88 train 9.7545 , allloss: 21.7965, dt: 1140.07ms, fracRes: 0.0097, norm(attn): 0.0752, norm(output): 0.0518, norm(x): 0.0510, norm(y): 0.9980, norm:29.8956, tok/sec: 114968.48, flops:44.79, batch-reuse:1
@ 89 train 9.7183 , allloss: 21.7356, dt: 1133.17ms, fracRes: 0.0098, norm(attn): 0.0752, norm(output): 0.0518, norm(x): 0.0509, norm(y): 0.9980, norm:29.7435, tok/sec: 115668.25, flops:45.06, batch-reuse:1
@ 90 train 9.7074 , allloss: 21.7310, dt: 1127.50ms, fracRes: 0.0099, norm(attn): 0.0757, norm(output): 0.0518, norm(x): 0.0509, norm(y): 0.9979, norm:29.6392, tok/sec: 116250.55, flops:45.29, batch-reuse:1
@ 91 train 9.7265 , allloss: 21.7810, dt: 1150.53ms, fracRes: 0.0101, norm(attn): 0.0771, norm(output): 0.0518, norm(x): 0.0508, norm(y): 0.9979, norm:30.0143, tok/sec: 113922.88, flops:44.38, batch-reuse:1
@ 92 train 9.6805 , allloss: 21.7500, dt: 1144.62ms, fracRes: 0.0102, norm(attn): 0.0771, norm(output): 0.0518, norm(x): 0.0507, norm(y): 0.9979, norm:29.6370, tok/sec: 114511.40, flops:44.61, batch-reuse:1
@ 93 train 9.6908 , allloss: 21.7901, dt: 1143.46ms, fracRes: 0.0103, norm(attn): 0.0776, norm(output): 0.0518, norm(x): 0.0506, norm(y): 0.9979, norm:29.2562, tok/sec: 114627.39, flops:44.66, batch-reuse:1
@ 94 train 9.7478 , allloss: 21.8390, dt: 1138.51ms, fracRes: 0.0105, norm(attn): 0.0776, norm(output): 0.0518, norm(x): 0.0505, norm(y): 0.9979, norm:30.1573, tok/sec: 115125.65, flops:44.85, batch-reuse:1
@ 95 train 9.6785 , allloss: 21.7245, dt: 1131.02ms, fracRes: 0.0107, norm(attn): 0.0781, norm(output): 0.0518, norm(x): 0.0504, norm(y): 0.9979, norm:29.6337, tok/sec: 115888.45, flops:45.15, batch-reuse:1
@ 96 train 9.6353 , allloss: 21.6989, dt: 1132.55ms, fracRes: 0.0109, norm(attn): 0.0786, norm(output): 0.0518, norm(x): 0.0503, norm(y): 0.9978, norm:29.6517, tok/sec: 115731.46, flops:45.09, batch-reuse:1
@ 97 train 9.6503 , allloss: 21.7224, dt: 1119.19ms, fracRes: 0.0110, norm(attn): 0.0786, norm(output): 0.0510, norm(x): 0.0502, norm(y): 0.9978, norm:30.5081, tok/sec: 117113.17, flops:45.63, batch-reuse:1
@ 98 train 9.6060 , allloss: 21.5998, dt: 1142.03ms, fracRes: 0.0112, norm(attn): 0.0791, norm(output): 0.0510, norm(x): 0.0501, norm(y): 0.9978, norm:28.5486, tok/sec: 114771.40, flops:44.71, batch-reuse:1
@ 99 train 9.6305 , allloss: 21.5694, dt: 1139.64ms, fracRes: 0.0114, norm(attn): 0.0806, norm(output): 0.0510, norm(x): 0.0500, norm(y): 0.9978, norm:29.1283, tok/sec: 115011.77, flops:44.81, batch-reuse:1
@ 100 train 9.6037 , allloss: 21.5324, dt: 1122.27ms, fracRes: 0.0116, norm(attn): 0.0811, norm(output): 0.0510, norm(x): 0.0500, norm(y): 0.9978, norm:28.4081, tok/sec: 116791.95, flops:45.50, batch-reuse:1
@ 101 train 9.5791 , allloss: 21.4756, dt: 1122.29ms, fracRes: 0.0119, norm(attn): 0.0811, norm(output): 0.0510, norm(x): 0.0499, norm(y): 0.9977, norm:28.9306, tok/sec: 116790.21, flops:45.50, batch-reuse:1
@ 102 train 9.5849 , allloss: 21.3854, dt: 1126.51ms, fracRes: 0.0121, norm(attn): 0.0811, norm(output): 0.0510, norm(x): 0.0498, norm(y): 0.9977, norm:27.8159, tok/sec: 116352.23, flops:45.33, batch-reuse:1
@ 103 train 9.5833 , allloss: 21.2734, dt: 1123.44ms, fracRes: 0.0124, norm(attn): 0.0830, norm(output): 0.0510, norm(x): 0.0498, norm(y): 0.9977, norm:27.1019, tok/sec: 116670.50, flops:45.45, batch-reuse:1
@ 104 train 9.5645 , allloss: 21.1267, dt: 1148.02ms, fracRes: 0.0127, norm(attn): 0.0854, norm(output): 0.0510, norm(x): 0.0497, norm(y): 0.9977, norm:26.8721, tok/sec: 114172.18, flops:44.48, batch-reuse:1
@ 105 train 9.5307 , allloss: 20.9595, dt: 1135.83ms, fracRes: 0.0130, norm(attn): 0.0854, norm(output): 0.0510, norm(x): 0.0497, norm(y): 0.9977, norm:27.6382, tok/sec: 115397.17, flops:44.96, batch-reuse:1
@ 106 train 9.5480 , allloss: 20.8614, dt: 1113.47ms, fracRes: 0.0133, norm(attn): 0.0854, norm(output): 0.0510, norm(x): 0.0497, norm(y): 0.9977, norm:26.9399, tok/sec: 117714.76, flops:45.86, batch-reuse:1
@ 107 train 9.5030 , allloss: 20.7007, dt: 1129.94ms, fracRes: 0.0136, norm(attn): 0.0859, norm(output): 0.0510, norm(x): 0.0496, norm(y): 0.9977, norm:26.7241, tok/sec: 115999.22, flops:45.19, batch-reuse:1
@ 108 train 9.4863 , allloss: 20.5643, dt: 1137.67ms, fracRes: 0.0139, norm(attn): 0.0864, norm(output): 0.0510, norm(x): 0.0496, norm(y): 0.9976, norm:26.8410, tok/sec: 115211.42, flops:44.89, batch-reuse:1
@ 109 train 9.4473 , allloss: 20.4448, dt: 1119.97ms, fracRes: 0.0141, norm(attn): 0.0864, norm(output): 0.0510, norm(x): 0.0496, norm(y): 0.9976, norm:27.0178, tok/sec: 117032.10, flops:45.60, batch-reuse:1
@ 110 train 9.4845 , allloss: 20.4015, dt: 1148.32ms, fracRes: 0.0143, norm(attn): 0.0874, norm(output): 0.0510, norm(x): 0.0495, norm(y): 0.9976, norm:26.6636, tok/sec: 114142.88, flops:44.47, batch-reuse:1
@ 111 train 9.4564 , allloss: 20.2969, dt: 1141.05ms, fracRes: 0.0145, norm(attn): 0.0884, norm(output): 0.0508, norm(x): 0.0494, norm(y): 0.9976, norm:27.6731, tok/sec: 114869.22, flops:44.75, batch-reuse:1
@ 112 train 9.4358 , allloss: 20.2167, dt: 1138.31ms, fracRes: 0.0146, norm(attn): 0.0884, norm(output): 0.0510, norm(x): 0.0494, norm(y): 0.9976, norm:25.8846, tok/sec: 115146.24, flops:44.86, batch-reuse:1
@ 113 train 9.4152 , allloss: 20.1293, dt: 1133.62ms, fracRes: 0.0148, norm(attn): 0.0908, norm(output): 0.0508, norm(x): 0.0493, norm(y): 0.9976, norm:27.4230, tok/sec: 115622.95, flops:45.05, batch-reuse:1
@ 114 train 9.4222 , allloss: 20.1139, dt: 1129.75ms, fracRes: 0.0149, norm(attn): 0.0913, norm(output): 0.0508, norm(x): 0.0492, norm(y): 0.9975, norm:26.0823, tok/sec: 116018.22, flops:45.20, batch-reuse:1
@ 115 train 9.4045 , allloss: 20.0812, dt: 1143.80ms, fracRes: 0.0149, norm(attn): 0.0913, norm(output): 0.0505, norm(x): 0.0491, norm(y): 0.9975, norm:27.0785, tok/sec: 114593.00, flops:44.65, batch-reuse:1
@ 116 train 9.3883 , allloss: 20.0813, dt: 1141.77ms, fracRes: 0.0150, norm(attn): 0.0913, norm(output): 0.0505, norm(x): 0.0490, norm(y): 0.9975, norm:26.3895, tok/sec: 114797.19, flops:44.72, batch-reuse:1
@ 117 train 9.3774 , allloss: 20.0618, dt: 1125.34ms, fracRes: 0.0151, norm(attn): 0.0913, norm(output): 0.0505, norm(x): 0.0488, norm(y): 0.9975, norm:27.6888, tok/sec: 116473.37, flops:45.38, batch-reuse:1
@ 118 train 9.3621 , allloss: 20.0180, dt: 1127.33ms, fracRes: 0.0152, norm(attn): 0.0928, norm(output): 0.0505, norm(x): 0.0487, norm(y): 0.9974, norm:27.7424, tok/sec: 116268.00, flops:45.30, batch-reuse:1
@ 119 train 9.3633 , allloss: 19.9632, dt: 1132.95ms, fracRes: 0.0153, norm(attn): 0.0933, norm(output): 0.0505, norm(x): 0.0486, norm(y): 0.9974, norm:27.5941, tok/sec: 115691.23, flops:45.07, batch-reuse:1
@ 120 train 9.4159 , allloss: 20.0036, dt: 1121.64ms, fracRes: 0.0155, norm(attn): 0.0933, norm(output): 0.0505, norm(x): 0.0485, norm(y): 0.9974, norm:28.0751, tok/sec: 116857.74, flops:45.53, batch-reuse:1
@ 121 train 9.4157 , allloss: 20.0136, dt: 1149.12ms, fracRes: 0.0156, norm(attn): 0.0938, norm(output): 0.0505, norm(x): 0.0484, norm(y): 0.9974, norm:28.3985, tok/sec: 114063.04, flops:44.44, batch-reuse:1
@ 122 train 9.3948 , allloss: 20.0331, dt: 1130.41ms, fracRes: 0.0157, norm(attn): 0.0938, norm(output): 0.0498, norm(x): 0.0483, norm(y): 0.9974, norm:31.6505, tok/sec: 115951.27, flops:45.17, batch-reuse:1
@ 123 train 9.3270 , allloss: 20.0256, dt: 1135.06ms, fracRes: 0.0159, norm(attn): 0.0938, norm(output): 0.0498, norm(x): 0.0482, norm(y): 0.9973, norm:32.4860, tok/sec: 115475.58, flops:44.99, batch-reuse:1
@ 124 train 9.3340 , allloss: 19.9982, dt: 1123.06ms, fracRes: 0.0161, norm(attn): 0.0942, norm(output): 0.0498, norm(x): 0.0482, norm(y): 0.9973, norm:32.6679, tok/sec: 116709.88, flops:45.47, batch-reuse:1
@ 125 train 9.3227 , allloss: 20.0771, dt: 1120.41ms, fracRes: 0.0163, norm(attn): 0.0942, norm(output): 0.0496, norm(x): 0.0481, norm(y): 0.9973, norm:29.0490, tok/sec: 116985.60, flops:45.58, batch-reuse:1
@ 126 train 9.2900 , allloss: 20.0918, dt: 1128.34ms, fracRes: 0.0164, norm(attn): 0.0942, norm(output): 0.0496, norm(x): 0.0481, norm(y): 0.9973, norm:30.6842, tok/sec: 116163.62, flops:45.26, batch-reuse:1
@ 127 train 9.2745 , allloss: 20.0111, dt: 1131.37ms, fracRes: 0.0166, norm(attn): 0.0942, norm(output): 0.0498, norm(x): 0.0482, norm(y): 0.9973, norm:34.4050, tok/sec: 115852.24, flops:45.14, batch-reuse:1
@ 128 train 9.2505 , allloss: 20.1587, dt: 1148.10ms, fracRes: 0.0169, norm(attn): 0.0962, norm(output): 0.0498, norm(x): 0.0481, norm(y): 0.9973, norm:34.8766, tok/sec: 114163.81, flops:44.48, batch-reuse:1
@ 129 train 9.3102 , allloss: 20.1926, dt: 1136.28ms, fracRes: 0.0170, norm(attn): 0.0947, norm(output): 0.0498, norm(x): 0.0482, norm(y): 0.9973, norm:34.2431, tok/sec: 115351.60, flops:44.94, batch-reuse:1
@ 130 train 9.2548 , allloss: 20.0900, dt: 1144.07ms, fracRes: 0.0173, norm(attn): 0.0991, norm(output): 0.0498, norm(x): 0.0481, norm(y): 0.9972, norm:33.2976, tok/sec: 114566.62, flops:44.64, batch-reuse:1
@ 131 train 9.2523 , allloss: 20.1385, dt: 1128.94ms, fracRes: 0.0175, norm(attn): 0.0967, norm(output): 0.0498, norm(x): 0.0482, norm(y): 0.9972, norm:33.9404, tok/sec: 116101.48, flops:45.23, batch-reuse:1
@ 132 train 9.2310 , allloss: 19.9950, dt: 1130.82ms, fracRes: 0.0179, norm(attn): 0.0991, norm(output): 0.0498, norm(x): 0.0482, norm(y): 0.9972, norm:30.9979, tok/sec: 115909.12, flops:45.16, batch-reuse:1
@ 133 train 9.2289 , allloss: 20.0849, dt: 1144.42ms, fracRes: 0.0181, norm(attn): 0.0996, norm(output): 0.0496, norm(x): 0.0481, norm(y): 0.9972, norm:31.6010, tok/sec: 114531.08, flops:44.62, batch-reuse:1
@ 134 train 9.2107 , allloss: 20.0254, dt: 1144.87ms, fracRes: 0.0183, norm(attn): 0.0996, norm(output): 0.0505, norm(x): 0.0482, norm(y): 0.9972, norm:38.8799, tok/sec: 114485.90, flops:44.60, batch-reuse:1
@ 135 train 9.2034 , allloss: 19.9687, dt: 1112.72ms, fracRes: 0.0187, norm(attn): 0.1011, norm(output): 0.0496, norm(x): 0.0480, norm(y): 0.9972, norm:41.0451, tok/sec: 117794.51, flops:45.89, batch-reuse:1
@ 136 train 9.1997 , allloss: 19.9782, dt: 1121.94ms, fracRes: 0.0189, norm(attn): 0.1011, norm(output): 0.0496, norm(x): 0.0481, norm(y): 0.9972, norm:33.8400, tok/sec: 116826.07, flops:45.52, batch-reuse:1
@ 137 train 9.1626 , allloss: 19.9507, dt: 1124.46ms, fracRes: 0.0192, norm(attn): 0.1016, norm(output): 0.0496, norm(x): 0.0479, norm(y): 0.9971, norm:31.4628, tok/sec: 116564.50, flops:45.41, batch-reuse:1
@ 138 train 9.1433 , allloss: 19.8198, dt: 1141.67ms, fracRes: 0.0195, norm(attn): 0.1021, norm(output): 0.0496, norm(x): 0.0479, norm(y): 0.9971, norm:36.5507, tok/sec: 114806.99, flops:44.73, batch-reuse:1
@ 139 train 9.0808 , allloss: 19.8683, dt: 1098.92ms, fracRes: 0.0201, norm(attn): 0.1021, norm(output): 0.0496, norm(x): 0.0478, norm(y): 0.9971, norm:42.3206, tok/sec: 119273.30, flops:46.47, batch-reuse:1
@ 140 train 9.1540 , allloss: 19.8230, dt: 1109.80ms, fracRes: 0.0204, norm(attn): 0.1021, norm(output): 0.0496, norm(x): 0.0478, norm(y): 0.9971, norm:39.8213, tok/sec: 118104.03, flops:46.01, batch-reuse:1
@ 141 train 9.1414 , allloss: 19.8074, dt: 1129.08ms, fracRes: 0.0210, norm(attn): 0.1035, norm(output): 0.0496, norm(x): 0.0476, norm(y): 0.9970, norm:37.1125, tok/sec: 116086.94, flops:45.23, batch-reuse:1
@ 142 train 9.1557 , allloss: 19.8186, dt: 1126.15ms, fracRes: 0.0215, norm(attn): 0.1035, norm(output): 0.0496, norm(x): 0.0476, norm(y): 0.9970, norm:32.0011, tok/sec: 116389.80, flops:45.35, batch-reuse:1
@ 143 train 9.1355 , allloss: 19.8900, dt: 1128.48ms, fracRes: 0.0223, norm(attn): 0.1074, norm(output): 0.0496, norm(x): 0.0473, norm(y): 0.9970, norm:32.0739, tok/sec: 116148.72, flops:45.25, batch-reuse:1
@ 144 train 9.1015 , allloss: 19.7715, dt: 1121.96ms, fracRes: 0.0228, norm(attn): 0.1079, norm(output): 0.0496, norm(x): 0.0472, norm(y): 0.9970, norm:35.1822, tok/sec: 116824.06, flops:45.51, batch-reuse:1
@ 145 train 9.1202 , allloss: 19.8591, dt: 1127.66ms, fracRes: 0.0238, norm(attn): 0.1099, norm(output): 0.0481, norm(x): 0.0470, norm(y): 0.9969, norm:36.3316, tok/sec: 116233.91, flops:45.28, batch-reuse:1
@ 146 train 9.1417 , allloss: 19.7602, dt: 1113.70ms, fracRes: 0.0244, norm(attn): 0.1089, norm(output): 0.0481, norm(x): 0.0471, norm(y): 0.9969, norm:39.3228, tok/sec: 117690.92, flops:45.85, batch-reuse:1
@ 147 train 9.0740 , allloss: 19.6743, dt: 1107.59ms, fracRes: 0.0255, norm(attn): 0.1113, norm(output): 0.0481, norm(x): 0.0468, norm(y): 0.9969, norm:29.6995, tok/sec: 118339.62, flops:46.11, batch-reuse:1
@ 148 train 9.0538 , allloss: 19.5442, dt: 1115.05ms, fracRes: 0.0262, norm(attn): 0.1113, norm(output): 0.0481, norm(x): 0.0468, norm(y): 0.9969, norm:26.6617, tok/sec: 117547.98, flops:45.80, batch-reuse:1
@ 149 train 8.9955 , allloss: 19.4452, dt: 1145.38ms, fracRes: 0.0271, norm(attn): 0.1152, norm(output): 0.0481, norm(x): 0.0466, norm(y): 0.9969, norm:29.2899, tok/sec: 114435.36, flops:44.58, batch-reuse:1
@ 150 train 9.0527 , allloss: 19.3324, dt: 1121.54ms, fracRes: 0.0277, norm(attn): 0.1157, norm(output): 0.0479, norm(x): 0.0466, norm(y): 0.9968, norm:28.3322, tok/sec: 116867.62, flops:45.53, batch-reuse:1
@ 151 train 8.9675 , allloss: 19.1654, dt: 1144.49ms, fracRes: 0.0285, norm(attn): 0.1177, norm(output): 0.0479, norm(x): 0.0464, norm(y): 0.9968, norm:29.7890, tok/sec: 114524.80, flops:44.62, batch-reuse:1
@ 152 train 8.9272 , allloss: 18.9879, dt: 1148.85ms, fracRes: 0.0288, norm(attn): 0.1177, norm(output): 0.0479, norm(x): 0.0464, norm(y): 0.9968, norm:35.3088, tok/sec: 114089.91, flops:44.45, batch-reuse:1
@ 153 train 8.9446 , allloss: 18.9273, dt: 1147.34ms, fracRes: 0.0294, norm(attn): 0.1191, norm(output): 0.0479, norm(x): 0.0462, norm(y): 0.9968, norm:45.3594, tok/sec: 114239.77, flops:44.51, batch-reuse:1
@ 154 train 8.9673 , allloss: 18.7972, dt: 1120.79ms, fracRes: 0.0297, norm(attn): 0.1191, norm(output): 0.0479, norm(x): 0.0464, norm(y): 0.9968, norm:36.4490, tok/sec: 116945.93, flops:45.56, batch-reuse:1
@ 155 train 8.9778 , allloss: 18.7227, dt: 1123.29ms, fracRes: 0.0299, norm(attn): 0.1230, norm(output): 0.0479, norm(x): 0.0464, norm(y): 0.9967, norm:25.7936, tok/sec: 116686.27, flops:45.46, batch-reuse:1
@ 156 train 8.9278 , allloss: 18.6512, dt: 1114.36ms, fracRes: 0.0301, norm(attn): 0.1230, norm(output): 0.0474, norm(x): 0.0463, norm(y): 0.9967, norm:32.4463, tok/sec: 117620.39, flops:45.82, batch-reuse:1
@ 157 train 8.9605 , allloss: 18.5544, dt: 1142.23ms, fracRes: 0.0303, norm(attn): 0.1235, norm(output): 0.0474, norm(x): 0.0464, norm(y): 0.9967, norm:40.4376, tok/sec: 114750.54, flops:44.71, batch-reuse:1
@ 158 train 8.9254 , allloss: 18.4366, dt: 1148.19ms, fracRes: 0.0307, norm(attn): 0.1245, norm(output): 0.0471, norm(x): 0.0463, norm(y): 0.9967, norm:35.9544, tok/sec: 114155.23, flops:44.47, batch-reuse:1
@ 159 train 8.9329 , allloss: 18.4190, dt: 1127.90ms, fracRes: 0.0306, norm(attn): 0.1240, norm(output): 0.0479, norm(x): 0.0464, norm(y): 0.9967, norm:36.6396, tok/sec: 116209.07, flops:45.28, batch-reuse:1
@ 160 train 8.8971 , allloss: 18.3656, dt: 1118.10ms, fracRes: 0.0313, norm(attn): 0.1250, norm(output): 0.0471, norm(x): 0.0462, norm(y): 0.9966, norm:33.3057, tok/sec: 117227.05, flops:45.67, batch-reuse:1
@ 161 train 8.8790 , allloss: 18.2439, dt: 1113.20ms, fracRes: 0.0315, norm(attn): 0.1245, norm(output): 0.0474, norm(x): 0.0463, norm(y): 0.9966, norm:32.7698, tok/sec: 117743.04, flops:45.87, batch-reuse:1
@ 162 train 8.9018 , allloss: 18.2725, dt: 1137.89ms, fracRes: 0.0321, norm(attn): 0.1260, norm(output): 0.0471, norm(x): 0.0461, norm(y): 0.9966, norm:35.2019, tok/sec: 115188.15, flops:44.88, batch-reuse:1
@ 163 train 8.8690 , allloss: 18.1772, dt: 1154.27ms, fracRes: 0.0322, norm(attn): 0.1260, norm(output): 0.0471, norm(x): 0.0463, norm(y): 0.9966, norm:38.1504, tok/sec: 113554.07, flops:44.24, batch-reuse:1
@ 164 train 8.8156 , allloss: 18.0790, dt: 1127.66ms, fracRes: 0.0332, norm(attn): 0.1270, norm(output): 0.0471, norm(x): 0.0460, norm(y): 0.9966, norm:43.6678, tok/sec: 116234.01, flops:45.28, batch-reuse:1
@ 165 train 8.8500 , allloss: 18.1415, dt: 1139.51ms, fracRes: 0.0326, norm(attn): 0.1260, norm(output): 0.0471, norm(x): 0.0462, norm(y): 0.9966, norm:38.8450, tok/sec: 115024.55, flops:44.81, batch-reuse:1
@ 166 train 8.7785 , allloss: 18.0212, dt: 1143.84ms, fracRes: 0.0338, norm(attn): 0.1299, norm(output): 0.0471, norm(x): 0.0459, norm(y): 0.9966, norm:38.9308, tok/sec: 114589.18, flops:44.64, batch-reuse:1
@ 167 train 8.7622 , allloss: 18.0571, dt: 1121.68ms, fracRes: 0.0338, norm(attn): 0.1270, norm(output): 0.0471, norm(x): 0.0459, norm(y): 0.9965, norm:36.9181, tok/sec: 116853.36, flops:45.53, batch-reuse:1
@ 168 train 8.7679 , allloss: 17.9054, dt: 1131.88ms, fracRes: 0.0346, norm(attn): 0.1318, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9965, norm:45.6307, tok/sec: 115799.77, flops:45.12, batch-reuse:1
@ 169 train 8.7716 , allloss: 17.9902, dt: 1139.46ms, fracRes: 0.0341, norm(attn): 0.1299, norm(output): 0.0471, norm(x): 0.0459, norm(y): 0.9965, norm:36.5999, tok/sec: 115029.63, flops:44.82, batch-reuse:1
@ 170 train 8.7640 , allloss: 17.8744, dt: 1140.38ms, fracRes: 0.0350, norm(attn): 0.1318, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9965, norm:37.9342, tok/sec: 114936.66, flops:44.78, batch-reuse:1
@ 171 train 8.7519 , allloss: 17.9030, dt: 1119.04ms, fracRes: 0.0350, norm(attn): 0.1270, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9965, norm:35.3260, tok/sec: 117128.54, flops:45.63, batch-reuse:1
@ 172 train 8.7331 , allloss: 17.8435, dt: 1123.49ms, fracRes: 0.0365, norm(attn): 0.1328, norm(output): 0.0469, norm(x): 0.0455, norm(y): 0.9964, norm:41.0147, tok/sec: 116664.95, flops:45.45, batch-reuse:1
@ 173 train 8.7196 , allloss: 17.8593, dt: 1140.18ms, fracRes: 0.0360, norm(attn): 0.1318, norm(output): 0.0469, norm(x): 0.0456, norm(y): 0.9964, norm:42.8129, tok/sec: 114956.94, flops:44.79, batch-reuse:1
@ 174 train 8.7766 , allloss: 17.8494, dt: 1131.36ms, fracRes: 0.0373, norm(attn): 0.1338, norm(output): 0.0469, norm(x): 0.0455, norm(y): 0.9964, norm:36.5847, tok/sec: 115853.90, flops:45.14, batch-reuse:1
@ 175 train 8.7301 , allloss: 17.8458, dt: 1142.78ms, fracRes: 0.0372, norm(attn): 0.1328, norm(output): 0.0469, norm(x): 0.0456, norm(y): 0.9964, norm:36.3516, tok/sec: 114696.24, flops:44.69, batch-reuse:1
@ 176 train 8.7375 , allloss: 17.8230, dt: 1149.90ms, fracRes: 0.0379, norm(attn): 0.1328, norm(output): 0.0471, norm(x): 0.0457, norm(y): 0.9964, norm:46.6025, tok/sec: 113985.71, flops:44.41, batch-reuse:1
@ 177 train 8.7242 , allloss: 17.7389, dt: 1149.90ms, fracRes: 0.0397, norm(attn): 0.1367, norm(output): 0.0471, norm(x): 0.0455, norm(y): 0.9964, norm:52.9163, tok/sec: 113986.02, flops:44.41, batch-reuse:1
@ 178 train 8.7471 , allloss: 17.7491, dt: 1148.94ms, fracRes: 0.0401, norm(attn): 0.1338, norm(output): 0.0471, norm(x): 0.0459, norm(y): 0.9964, norm:42.1057, tok/sec: 114080.91, flops:44.45, batch-reuse:1
@ 179 train 8.6833 , allloss: 17.5323, dt: 1139.82ms, fracRes: 0.0414, norm(attn): 0.1348, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9964, norm:40.5888, tok/sec: 114993.42, flops:44.80, batch-reuse:1
@ 180 train 8.7335 , allloss: 17.8505, dt: 1148.21ms, fracRes: 0.0415, norm(attn): 0.1348, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9964, norm:77.7027, tok/sec: 114153.50, flops:44.47, batch-reuse:1
@ 181 train 8.7250 , allloss: 17.5548, dt: 1125.11ms, fracRes: 0.0432, norm(attn): 0.1367, norm(output): 0.0471, norm(x): 0.0459, norm(y): 0.9964, norm:52.1519, tok/sec: 116496.74, flops:45.39, batch-reuse:1
@ 182 train 8.7145 , allloss: 17.7268, dt: 1120.11ms, fracRes: 0.0436, norm(attn): 0.1348, norm(output): 0.0474, norm(x): 0.0460, norm(y): 0.9964, norm:45.9880, tok/sec: 117016.90, flops:45.59, batch-reuse:1
@ 183 train 8.6772 , allloss: 17.6657, dt: 1120.30ms, fracRes: 0.0449, norm(attn): 0.1387, norm(output): 0.0471, norm(x): 0.0457, norm(y): 0.9964, norm:57.7325, tok/sec: 116997.55, flops:45.58, batch-reuse:1
@ 184 train 8.5976 , allloss: 17.5911, dt: 1143.72ms, fracRes: 0.0459, norm(attn): 0.1348, norm(output): 0.0471, norm(x): 0.0459, norm(y): 0.9964, norm:38.6841, tok/sec: 114601.03, flops:44.65, batch-reuse:1
@ 185 train 8.6270 , allloss: 17.5398, dt: 1130.74ms, fracRes: 0.0477, norm(attn): 0.1387, norm(output): 0.0471, norm(x): 0.0459, norm(y): 0.9964, norm:40.6939, tok/sec: 115916.58, flops:45.16, batch-reuse:1
@ 186 train 8.6819 , allloss: 17.7736, dt: 1140.76ms, fracRes: 0.0479, norm(attn): 0.1377, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9963, norm:37.0923, tok/sec: 114898.44, flops:44.76, batch-reuse:1
@ 187 train 8.7191 , allloss: 17.6861, dt: 1126.65ms, fracRes: 0.0477, norm(attn): 0.1387, norm(output): 0.0469, norm(x): 0.0457, norm(y): 0.9963, norm:78.2655, tok/sec: 116337.49, flops:45.33, batch-reuse:1
@ 188 train 8.5986 , allloss: 17.6112, dt: 1157.31ms, fracRes: 0.0485, norm(attn): 0.1357, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9963, norm:44.0070, tok/sec: 113255.65, flops:44.12, batch-reuse:1
@ 189 train 8.6665 , allloss: 17.6899, dt: 1126.83ms, fracRes: 0.0499, norm(attn): 0.1396, norm(output): 0.0469, norm(x): 0.0456, norm(y): 0.9963, norm:51.5164, tok/sec: 116319.02, flops:45.32, batch-reuse:1
@ 190 train 8.6276 , allloss: 17.7093, dt: 1121.84ms, fracRes: 0.0497, norm(attn): 0.1338, norm(output): 0.0479, norm(x): 0.0459, norm(y): 0.9963, norm:54.2823, tok/sec: 116836.15, flops:45.52, batch-reuse:1
@ 191 train 8.5978 , allloss: 17.6848, dt: 1152.30ms, fracRes: 0.0507, norm(attn): 0.1387, norm(output): 0.0471, norm(x): 0.0456, norm(y): 0.9963, norm:38.7616, tok/sec: 113748.03, flops:44.32, batch-reuse:1
@ 192 train 8.6158 , allloss: 17.5413, dt: 1161.17ms, fracRes: 0.0516, norm(attn): 0.1387, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9963, norm:40.2145, tok/sec: 112879.44, flops:43.98, batch-reuse:1
@ 193 train 8.5651 , allloss: 17.5804, dt: 1159.12ms, fracRes: 0.0516, norm(attn): 0.1396, norm(output): 0.0469, norm(x): 0.0455, norm(y): 0.9962, norm:40.5491, tok/sec: 113078.41, flops:44.06, batch-reuse:1
@ 194 train 8.6127 , allloss: 17.7906, dt: 1138.50ms, fracRes: 0.0511, norm(attn): 0.1348, norm(output): 0.0471, norm(x): 0.0458, norm(y): 0.9963, norm:66.7738, tok/sec: 115127.38, flops:44.85, batch-reuse:1
@ 195 train 8.5949 , allloss: 17.7148, dt: 1122.67ms, fracRes: 0.0511, norm(attn): 0.1387, norm(output): 0.0471, norm(x): 0.0454, norm(y): 0.9962, norm:42.5935, tok/sec: 116749.91, flops:45.49, batch-reuse:1
@ 196 train 8.5395 , allloss: 17.5386, dt: 1126.63ms, fracRes: 0.0522, norm(attn): 0.1396, norm(output): 0.0471, norm(x): 0.0455, norm(y): 0.9962, norm:47.2110, tok/sec: 116339.92, flops:45.33, batch-reuse:1
@ 197 train 8.5417 , allloss: 17.5736, dt: 1141.32ms, fracRes: 0.0504, norm(attn): 0.1396, norm(output): 0.0471, norm(x): 0.0454, norm(y): 0.9962, norm:53.1914, tok/sec: 114842.70, flops:44.74, batch-reuse:1
@ 198 train 8.5054 , allloss: 17.6384, dt: 1110.57ms, fracRes: 0.0512, norm(attn): 0.1387, norm(output): 0.0469, norm(x): 0.0455, norm(y): 0.9962, norm:50.8021, tok/sec: 118021.90, flops:45.98, batch-reuse:1
@ 199 train 8.5216 , allloss: 17.5655, dt: 1127.92ms, fracRes: 0.0515, norm(attn): 0.1396, norm(output): 0.0471, norm(x): 0.0454, norm(y): 0.9962, norm:37.1116, tok/sec: 116207.13, flops:45.27, batch-reuse:1
@ 200 train 8.5316 , allloss: 17.5445, dt: 1141.78ms, fracRes: 0.0517, norm(attn): 0.1396, norm(output): 0.0471, norm(x): 0.0454, norm(y): 0.9962, norm:42.4997, tok/sec: 114796.61, flops:44.72, batch-reuse:1
@ 201 train 8.5255 , allloss: 17.6934, dt: 1110.21ms, fracRes: 0.0475, norm(attn): 0.1396, norm(output): 0.0469, norm(x): 0.0452, norm(y): 0.9961, norm:56.6884, tok/sec: 118060.12, flops:46.00, batch-reuse:1
@ 202 train 8.5653 , allloss: 17.6935, dt: 1127.49ms, fracRes: 0.0480, norm(attn): 0.1357, norm(output): 0.0471, norm(x): 0.0457, norm(y): 0.9962, norm:76.6134, tok/sec: 116251.58, flops:45.29, batch-reuse:1
@ 203 train 8.5169 , allloss: 17.5589, dt: 1109.91ms, fracRes: 0.0477, norm(attn): 0.1406, norm(output): 0.0471, norm(x): 0.0453, norm(y): 0.9961, norm:45.0716, tok/sec: 118092.30, flops:46.01, batch-reuse:1
@ 204 train 8.5049 , allloss: 17.7354, dt: 1103.09ms, fracRes: 0.0465, norm(attn): 0.1396, norm(output): 0.0466, norm(x): 0.0450, norm(y): 0.9961, norm:57.6759, tok/sec: 118822.88, flops:46.29, batch-reuse:1
@ 205 train 8.4755 , allloss: 17.6759, dt: 1127.28ms, fracRes: 0.0476, norm(attn): 0.1387, norm(output): 0.0466, norm(x): 0.0452, norm(y): 0.9961, norm:55.1541, tok/sec: 116272.75, flops:45.30, batch-reuse:1
@ 206 train 8.4804 , allloss: 17.7186, dt: 1147.31ms, fracRes: 0.0463, norm(attn): 0.1406, norm(output): 0.0466, norm(x): 0.0449, norm(y): 0.9961, norm:51.6434, tok/sec: 114243.02, flops:44.51, batch-reuse:1
@ 207 train 8.3852 , allloss: 17.7090, dt: 1130.85ms, fracRes: 0.0468, norm(attn): 0.1387, norm(output): 0.0469, norm(x): 0.0451, norm(y): 0.9961, norm:48.9047, tok/sec: 115906.19, flops:45.16, batch-reuse:1
@ 208 train 8.4481 , allloss: 17.7684, dt: 1106.34ms, fracRes: 0.0456, norm(attn): 0.1406, norm(output): 0.0466, norm(x): 0.0450, norm(y): 0.9960, norm:50.7016, tok/sec: 118473.92, flops:46.16, batch-reuse:1
@ 209 train 8.4497 , allloss: 17.8978, dt: 1125.49ms, fracRes: 0.0460, norm(attn): 0.1406, norm(output): 0.0469, norm(x): 0.0450, norm(y): 0.9960, norm:45.7926, tok/sec: 116458.02, flops:45.37, batch-reuse:1
@ 210 train 8.4385 , allloss: 18.0427, dt: 1117.24ms, fracRes: 0.0438, norm(attn): 0.1396, norm(output): 0.0469, norm(x): 0.0449, norm(y): 0.9960, norm:44.2179, tok/sec: 117317.61, flops:45.71, batch-reuse:1
@ 211 train 8.3769 , allloss: 17.7872, dt: 1107.55ms, fracRes: 0.0448, norm(attn): 0.1416, norm(output): 0.0469, norm(x): 0.0450, norm(y): 0.9960, norm:37.7182, tok/sec: 118344.43, flops:46.11, batch-reuse:1
@ 212 train 8.4348 , allloss: 18.1109, dt: 1124.46ms, fracRes: 0.0443, norm(attn): 0.1396, norm(output): 0.0469, norm(x): 0.0449, norm(y): 0.9960, norm:64.6548, tok/sec: 116564.10, flops:45.41, batch-reuse:1
@ 213 train 8.3620 , allloss: 17.7147, dt: 1105.42ms, fracRes: 0.0450, norm(attn): 0.1416, norm(output): 0.0466, norm(x): 0.0449, norm(y): 0.9960, norm:41.9834, tok/sec: 118571.96, flops:46.20, batch-reuse:1
@ 214 train 8.3797 , allloss: 17.9434, dt: 1109.47ms, fracRes: 0.0422, norm(attn): 0.1406, norm(output): 0.0466, norm(x): 0.0447, norm(y): 0.9959, norm:44.6832, tok/sec: 118139.46, flops:46.03, batch-reuse:1
@ 215 train 8.3143 , allloss: 17.8611, dt: 1124.16ms, fracRes: 0.0427, norm(attn): 0.1416, norm(output): 0.0466, norm(x): 0.0447, norm(y): 0.9959, norm:40.4303, tok/sec: 116595.79, flops:45.43, batch-reuse:1
@ 216 train 8.3117 , allloss: 17.7531, dt: 1128.27ms, fracRes: 0.0426, norm(attn): 0.1426, norm(output): 0.0466, norm(x): 0.0446, norm(y): 0.9959, norm:43.3172, tok/sec: 116170.83, flops:45.26, batch-reuse:1
@ 217 train 8.3539 , allloss: 17.8594, dt: 1115.11ms, fracRes: 0.0432, norm(attn): 0.1416, norm(output): 0.0469, norm(x): 0.0447, norm(y): 0.9959, norm:45.2537, tok/sec: 117541.70, flops:45.79, batch-reuse:1
@ 218 train 8.3650 , allloss: 17.6668, dt: 1130.68ms, fracRes: 0.0433, norm(attn): 0.1436, norm(output): 0.0466, norm(x): 0.0445, norm(y): 0.9959, norm:63.4818, tok/sec: 115923.59, flops:45.16, batch-reuse:1
@ 219 train 8.3849 , allloss: 17.9013, dt: 1150.58ms, fracRes: 0.0417, norm(attn): 0.1416, norm(output): 0.0469, norm(x): 0.0446, norm(y): 0.9959, norm:35.6908, tok/sec: 113917.85, flops:44.38, batch-reuse:1
@ 220 train 8.3472 , allloss: 17.6398, dt: 1129.38ms, fracRes: 0.0421, norm(attn): 0.1436, norm(output): 0.0469, norm(x): 0.0446, norm(y): 0.9958, norm:45.1938, tok/sec: 116056.35, flops:45.22, batch-reuse:1
@ 221 train 8.3132 , allloss: 17.7262, dt: 1124.55ms, fracRes: 0.0406, norm(attn): 0.1445, norm(output): 0.0466, norm(x): 0.0444, norm(y): 0.9958, norm:49.1254, tok/sec: 116554.93, flops:45.41, batch-reuse:1
@ 222 train 8.3544 , allloss: 17.8300, dt: 1145.29ms, fracRes: 0.0404, norm(attn): 0.1416, norm(output): 0.0469, norm(x): 0.0446, norm(y): 0.9958, norm:99.3211, tok/sec: 114443.93, flops:44.59, batch-reuse:1
@ 223 train 8.3235 , allloss: 17.6826, dt: 1128.25ms, fracRes: 0.0396, norm(attn): 0.1426, norm(output): 0.0466, norm(x): 0.0447, norm(y): 0.9959, norm:34.1266, tok/sec: 116173.07, flops:45.26, batch-reuse:1
@ 224 train 8.2934 , allloss: 17.4741, dt: 1116.24ms, fracRes: 0.0393, norm(attn): 0.1475, norm(output): 0.0466, norm(x): 0.0444, norm(y): 0.9958, norm:55.8354, tok/sec: 117423.10, flops:45.75, batch-reuse:1
@ 225 train 8.2997 , allloss: 17.7095, dt: 1112.93ms, fracRes: 0.0389, norm(attn): 0.1436, norm(output): 0.0466, norm(x): 0.0446, norm(y): 0.9958, norm:59.8811, tok/sec: 117771.70, flops:45.88, batch-reuse:1
@ 226 train 8.3066 , allloss: 17.9187, dt: 1116.99ms, fracRes: 0.0370, norm(attn): 0.1465, norm(output): 0.0469, norm(x): 0.0449, norm(y): 0.9958, norm:51.5655, tok/sec: 117343.42, flops:45.72, batch-reuse:1
@ 227 train 8.3301 , allloss: 17.4445, dt: 1130.09ms, fracRes: 0.0384, norm(attn): 0.1484, norm(output): 0.0469, norm(x): 0.0446, norm(y): 0.9958, norm:57.2530, tok/sec: 115983.76, flops:45.19, batch-reuse:1
@ 228 train 8.2787 , allloss: 17.5971, dt: 1141.16ms, fracRes: 0.0367, norm(attn): 0.1504, norm(output): 0.0469, norm(x): 0.0448, norm(y): 0.9958, norm:31.4788, tok/sec: 114859.02, flops:44.75, batch-reuse:1
@ 229 train 8.3092 , allloss: 18.0451, dt: 1124.95ms, fracRes: 0.0351, norm(attn): 0.1543, norm(output): 0.0471, norm(x): 0.0451, norm(y): 0.9958, norm:51.9020, tok/sec: 116513.83, flops:45.39, batch-reuse:1
@ 230 train 8.2964 , allloss: 17.6171, dt: 1147.11ms, fracRes: 0.0364, norm(attn): 0.1533, norm(output): 0.0466, norm(x): 0.0444, norm(y): 0.9958, norm:45.3306, tok/sec: 114262.75, flops:44.52, batch-reuse:1
@ 231 train 8.2519 , allloss: 17.7914, dt: 1146.99ms, fracRes: 0.0342, norm(attn): 0.1562, norm(output): 0.0466, norm(x): 0.0446, norm(y): 0.9958, norm:41.2950, tok/sec: 114275.13, flops:44.52, batch-reuse:1
@ 232 train 8.2381 , allloss: 17.8978, dt: 1146.48ms, fracRes: 0.0338, norm(attn): 0.1562, norm(output): 0.0469, norm(x): 0.0447, norm(y): 0.9958, norm:34.6846, tok/sec: 114325.82, flops:44.54, batch-reuse:1
@ 233 train 8.2666 , allloss: 17.7021, dt: 1134.88ms, fracRes: 0.0349, norm(attn): 0.1562, norm(output): 0.0466, norm(x): 0.0443, norm(y): 0.9957, norm:38.4568, tok/sec: 115493.73, flops:45.00, batch-reuse:1
@ 234 train 8.2000 , allloss: 17.9280, dt: 1152.63ms, fracRes: 0.0325, norm(attn): 0.1621, norm(output): 0.0469, norm(x): 0.0448, norm(y): 0.9958, norm:47.2432, tok/sec: 113715.65, flops:44.30, batch-reuse:1
@ 235 train 8.2388 , allloss: 17.7514, dt: 1141.73ms, fracRes: 0.0344, norm(attn): 0.1582, norm(output): 0.0466, norm(x): 0.0441, norm(y): 0.9957, norm:42.1009, tok/sec: 114801.12, flops:44.73, batch-reuse:1
@ 236 train 8.1770 , allloss: 17.9347, dt: 1134.23ms, fracRes: 0.0334, norm(attn): 0.1611, norm(output): 0.0464, norm(x): 0.0443, norm(y): 0.9957, norm:40.5085, tok/sec: 115560.78, flops:45.02, batch-reuse:1
@ 237 train 8.2268 , allloss: 17.7673, dt: 1149.97ms, fracRes: 0.0338, norm(attn): 0.1611, norm(output): 0.0464, norm(x): 0.0440, norm(y): 0.9956, norm:32.2936, tok/sec: 113979.07, flops:44.41, batch-reuse:1
@ 238 train 8.1902 , allloss: 17.8945, dt: 1137.30ms, fracRes: 0.0326, norm(attn): 0.1650, norm(output): 0.0466, norm(x): 0.0442, norm(y): 0.9957, norm:33.5076, tok/sec: 115248.27, flops:44.90, batch-reuse:1
@ 239 train 8.2010 , allloss: 17.8445, dt: 1113.26ms, fracRes: 0.0337, norm(attn): 0.1582, norm(output): 0.0454, norm(x): 0.0433, norm(y): 0.9956, norm:48.7937, tok/sec: 117737.19, flops:45.87, batch-reuse:1
@ 240 train 8.2501 , allloss: 18.1930, dt: 1144.18ms, fracRes: 0.0319, norm(attn): 0.1689, norm(output): 0.0464, norm(x): 0.0442, norm(y): 0.9957, norm:59.9109, tok/sec: 114555.09, flops:44.63, batch-reuse:1
@ 241 train 8.1760 , allloss: 17.8582, dt: 1100.10ms, fracRes: 0.0330, norm(attn): 0.1631, norm(output): 0.0454, norm(x): 0.0436, norm(y): 0.9956, norm:32.9962, tok/sec: 119145.92, flops:46.42, batch-reuse:1
@ 242 train 8.1875 , allloss: 17.9819, dt: 1134.16ms, fracRes: 0.0329, norm(attn): 0.1621, norm(output): 0.0454, norm(x): 0.0437, norm(y): 0.9956, norm:32.7838, tok/sec: 115567.88, flops:45.03, batch-reuse:1
@ 243 train 8.1043 , allloss: 17.9324, dt: 1128.58ms, fracRes: 0.0321, norm(attn): 0.1689, norm(output): 0.0459, norm(x): 0.0439, norm(y): 0.9956, norm:48.6982, tok/sec: 116138.98, flops:45.25, batch-reuse:1
@ 244 train 8.1726 , allloss: 17.9261, dt: 1124.50ms, fracRes: 0.0336, norm(attn): 0.1621, norm(output): 0.0454, norm(x): 0.0433, norm(y): 0.9955, norm:45.4428, tok/sec: 116560.71, flops:45.41, batch-reuse:1
@ 245 train 8.1051 , allloss: 18.1522, dt: 1116.16ms, fracRes: 0.0322, norm(attn): 0.1709, norm(output): 0.0466, norm(x): 0.0445, norm(y): 0.9956, norm:49.5215, tok/sec: 117430.70, flops:45.75, batch-reuse:1
@ 246 train 8.1976 , allloss: 17.9891, dt: 1106.19ms, fracRes: 0.0343, norm(attn): 0.1670, norm(output): 0.0459, norm(x): 0.0439, norm(y): 0.9956, norm:31.1537, tok/sec: 118489.26, flops:46.16, batch-reuse:1
@ 247 train 8.1451 , allloss: 17.9924, dt: 1125.54ms, fracRes: 0.0371, norm(attn): 0.1641, norm(output): 0.0449, norm(x): 0.0433, norm(y): 0.9955, norm:51.9640, tok/sec: 116452.69, flops:45.37, batch-reuse:1
@ 248 train 8.1449 , allloss: 18.3470, dt: 1131.07ms, fracRes: 0.0341, norm(attn): 0.1738, norm(output): 0.0469, norm(x): 0.0449, norm(y): 0.9956, norm:64.5956, tok/sec: 115882.76, flops:45.15, batch-reuse:1
@ 249 train 8.0658 , allloss: 17.9384, dt: 1127.29ms, fracRes: 0.0358, norm(attn): 0.1729, norm(output): 0.0464, norm(x): 0.0440, norm(y): 0.9955, norm:36.7293, tok/sec: 116272.28, flops:45.30, batch-reuse:1
@ 250 train 8.2888 , allloss: 17.7078, dt: 1135.27ms, fracRes: 0.0412, norm(attn): 0.1729, norm(output): 0.0432, norm(x): 0.0420, norm(y): 0.9953, norm:231.2257, tok/sec: 115454.05, flops:44.98, batch-reuse:1
@ 251 train 8.0899 , allloss: 17.4832, dt: 1133.16ms, fracRes: 0.0420, norm(attn): 0.1709, norm(output): 0.0442, norm(x): 0.0426, norm(y): 0.9953, norm:70.6466, tok/sec: 115669.64, flops:45.06, batch-reuse:1
@ 252 train 8.1594 , allloss: 18.0454, dt: 1142.65ms, fracRes: 0.0380, norm(attn): 0.1758, norm(output): 0.0469, norm(x): 0.0447, norm(y): 0.9955, norm:43.5542, tok/sec: 114709.02, flops:44.69, batch-reuse:1
@ 253 train 8.0857 , allloss: 17.9967, dt: 1119.46ms, fracRes: 0.0390, norm(attn): 0.1748, norm(output): 0.0469, norm(x): 0.0450, norm(y): 0.9955, norm:47.3418, tok/sec: 117085.11, flops:45.62, batch-reuse:1
@ 254 train 7.9880 , allloss: 17.4825, dt: 1110.46ms, fracRes: 0.0441, norm(attn): 0.1680, norm(output): 0.0459, norm(x): 0.0436, norm(y): 0.9954, norm:33.9388, tok/sec: 118033.84, flops:45.99, batch-reuse:1
@ 255 train 8.0673 , allloss: 17.4742, dt: 1133.64ms, fracRes: 0.0458, norm(attn): 0.1709, norm(output): 0.0435, norm(x): 0.0420, norm(y): 0.9952, norm:86.0579, tok/sec: 115620.33, flops:45.05, batch-reuse:1
@ 256 train 8.0234 , allloss: 17.1517, dt: 1138.01ms, fracRes: 0.0457, norm(attn): 0.1719, norm(output): 0.0437, norm(x): 0.0422, norm(y): 0.9952, norm:39.8911, tok/sec: 115176.59, flops:44.87, batch-reuse:1
@ 257 train 8.0316 , allloss: 17.2985, dt: 1119.07ms, fracRes: 0.0416, norm(attn): 0.1719, norm(output): 0.0444, norm(x): 0.0432, norm(y): 0.9953, norm:35.3123, tok/sec: 117126.30, flops:45.63, batch-reuse:1
@ 258 train 8.0000 , allloss: 17.5200, dt: 1115.09ms, fracRes: 0.0375, norm(attn): 0.1729, norm(output): 0.0457, norm(x): 0.0434, norm(y): 0.9953, norm:43.3951, tok/sec: 117543.59, flops:45.79, batch-reuse:1
@ 259 train 7.9748 , allloss: 17.2435, dt: 1115.41ms, fracRes: 0.0399, norm(attn): 0.1709, norm(output): 0.0442, norm(x): 0.0424, norm(y): 0.9952, norm:33.8077, tok/sec: 117510.42, flops:45.78, batch-reuse:1
@ 260 train 8.0541 , allloss: 17.0306, dt: 1132.29ms, fracRes: 0.0419, norm(attn): 0.1729, norm(output): 0.0432, norm(x): 0.0415, norm(y): 0.9951, norm:43.7611, tok/sec: 115757.90, flops:45.10, batch-reuse:1
@ 261 train 8.0096 , allloss: 17.0140, dt: 1138.06ms, fracRes: 0.0397, norm(attn): 0.1729, norm(output): 0.0432, norm(x): 0.0415, norm(y): 0.9950, norm:49.3260, tok/sec: 115171.62, flops:44.87, batch-reuse:1
@ 262 train 8.0140 , allloss: 17.2282, dt: 1125.00ms, fracRes: 0.0357, norm(attn): 0.1719, norm(output): 0.0444, norm(x): 0.0424, norm(y): 0.9951, norm:42.4873, tok/sec: 116508.59, flops:45.39, batch-reuse:1
@ 263 train 7.9927 , allloss: 16.9169, dt: 1152.54ms, fracRes: 0.0407, norm(attn): 0.1719, norm(output): 0.0432, norm(x): 0.0418, norm(y): 0.9951, norm:53.1185, tok/sec: 113724.14, flops:44.31, batch-reuse:1
@ 264 train 7.9696 , allloss: 17.0084, dt: 1134.42ms, fracRes: 0.0340, norm(attn): 0.1738, norm(output): 0.0437, norm(x): 0.0418, norm(y): 0.9950, norm:38.6515, tok/sec: 115541.40, flops:45.01, batch-reuse:1
@ 265 train 7.9545 , allloss: 16.5981, dt: 1134.99ms, fracRes: 0.0380, norm(attn): 0.1826, norm(output): 0.0427, norm(x): 0.0408, norm(y): 0.9949, norm:42.1629, tok/sec: 115482.62, flops:44.99, batch-reuse:1
@ 266 train 7.9353 , allloss: 16.8635, dt: 1123.48ms, fracRes: 0.0337, norm(attn): 0.1768, norm(output): 0.0432, norm(x): 0.0417, norm(y): 0.9950, norm:28.9459, tok/sec: 116665.87, flops:45.45, batch-reuse:1
@ 267 train 7.9024 , allloss: 16.9997, dt: 1111.98ms, fracRes: 0.0336, norm(attn): 0.1768, norm(output): 0.0430, norm(x): 0.0412, norm(y): 0.9949, norm:53.4005, tok/sec: 117872.70, flops:45.92, batch-reuse:1
@ 268 train 7.9763 , allloss: 16.7523, dt: 1116.99ms, fracRes: 0.0323, norm(attn): 0.1855, norm(output): 0.0427, norm(x): 0.0410, norm(y): 0.9949, norm:52.7694, tok/sec: 117343.55, flops:45.72, batch-reuse:1
@ 269 train 7.8880 , allloss: 16.4043, dt: 1119.60ms, fracRes: 0.0340, norm(attn): 0.1865, norm(output): 0.0430, norm(x): 0.0410, norm(y): 0.9948, norm:29.6420, tok/sec: 117070.55, flops:45.61, batch-reuse:1
@ 270 train 7.9718 , allloss: 16.9634, dt: 1117.98ms, fracRes: 0.0338, norm(attn): 0.1816, norm(output): 0.0430, norm(x): 0.0413, norm(y): 0.9948, norm:54.0282, tok/sec: 117239.60, flops:45.68, batch-reuse:1
@ 271 train 7.8792 , allloss: 16.2048, dt: 1136.76ms, fracRes: 0.0363, norm(attn): 0.1875, norm(output): 0.0427, norm(x): 0.0407, norm(y): 0.9948, norm:38.8561, tok/sec: 115303.12, flops:44.92, batch-reuse:1
@ 272 train 7.8777 , allloss: 16.6412, dt: 1106.85ms, fracRes: 0.0285, norm(attn): 0.1875, norm(output): 0.0430, norm(x): 0.0413, norm(y): 0.9948, norm:34.7165, tok/sec: 118419.20, flops:46.14, batch-reuse:1
@ 273 train 8.0165 , allloss: 16.7839, dt: 1123.70ms, fracRes: 0.0345, norm(attn): 0.1904, norm(output): 0.0420, norm(x): 0.0404, norm(y): 0.9946, norm:64.1176, tok/sec: 116643.04, flops:45.44, batch-reuse:1
@ 274 train 7.8837 , allloss: 16.2418, dt: 1128.88ms, fracRes: 0.0344, norm(attn): 0.1895, norm(output): 0.0427, norm(x): 0.0411, norm(y): 0.9947, norm:35.2297, tok/sec: 116107.56, flops:45.24, batch-reuse:1
@ 275 train 7.8713 , allloss: 16.6024, dt: 1136.49ms, fracRes: 0.0278, norm(attn): 0.1914, norm(output): 0.0435, norm(x): 0.0422, norm(y): 0.9948, norm:32.4959, tok/sec: 115330.57, flops:44.93, batch-reuse:1
@ 276 train 7.8536 , allloss: 16.1840, dt: 1134.81ms, fracRes: 0.0331, norm(attn): 0.1934, norm(output): 0.0427, norm(x): 0.0410, norm(y): 0.9946, norm:34.5732, tok/sec: 115500.99, flops:45.00, batch-reuse:1
@ 277 train 7.7851 , allloss: 16.6761, dt: 1149.86ms, fracRes: 0.0295, norm(attn): 0.1865, norm(output): 0.0427, norm(x): 0.0413, norm(y): 0.9946, norm:37.8941, tok/sec: 113989.37, flops:44.41, batch-reuse:1
@ 278 train 7.8322 , allloss: 16.2005, dt: 1158.72ms, fracRes: 0.0317, norm(attn): 0.1895, norm(output): 0.0430, norm(x): 0.0412, norm(y): 0.9945, norm:26.5653, tok/sec: 113117.83, flops:44.07, batch-reuse:1
@ 279 train 7.7952 , allloss: 16.2521, dt: 1118.33ms, fracRes: 0.0336, norm(attn): 0.1885, norm(output): 0.0427, norm(x): 0.0410, norm(y): 0.9945, norm:29.5526, tok/sec: 117203.75, flops:45.66, batch-reuse:1
@ 280 train 7.8699 , allloss: 16.2573, dt: 1164.19ms, fracRes: 0.0331, norm(attn): 0.1992, norm(output): 0.0410, norm(x): 0.0398, norm(y): 0.9943, norm:41.4314, tok/sec: 112586.61, flops:43.86, batch-reuse:1
@ 281 train 7.8337 , allloss: 16.6828, dt: 1134.09ms, fracRes: 0.0275, norm(attn): 0.1943, norm(output): 0.0415, norm(x): 0.0403, norm(y): 0.9943, norm:76.1716, tok/sec: 115574.51, flops:45.03, batch-reuse:1
@ 282 train 7.8586 , allloss: 15.1500, dt: 1126.87ms, fracRes: 0.0415, norm(attn): 0.2207, norm(output): 0.0405, norm(x): 0.0389, norm(y): 0.9942, norm:72.2101, tok/sec: 116315.04, flops:45.32, batch-reuse:1
@ 283 train 7.7757 , allloss: 15.7135, dt: 1139.94ms, fracRes: 0.0282, norm(attn): 0.2031, norm(output): 0.0417, norm(x): 0.0400, norm(y): 0.9943, norm:37.1161, tok/sec: 114981.99, flops:44.80, batch-reuse:1
@ 284 train 7.8552 , allloss: 16.5508, dt: 1129.16ms, fracRes: 0.0277, norm(attn): 0.2051, norm(output): 0.0405, norm(x): 0.0395, norm(y): 0.9942, norm:69.3390, tok/sec: 116078.70, flops:45.22, batch-reuse:1
@ 285 train 7.8200 , allloss: 15.5996, dt: 1123.26ms, fracRes: 0.0433, norm(attn): 0.2227, norm(output): 0.0396, norm(x): 0.0389, norm(y): 0.9941, norm:37.3851, tok/sec: 116689.22, flops:45.46, batch-reuse:1
@ 286 train 7.8264 , allloss: 15.5196, dt: 1159.63ms, fracRes: 0.0354, norm(attn): 0.2188, norm(output): 0.0405, norm(x): 0.0396, norm(y): 0.9942, norm:31.1944, tok/sec: 113029.24, flops:44.04, batch-reuse:1
@ 287 train 7.8048 , allloss: 15.8965, dt: 1158.09ms, fracRes: 0.0253, norm(attn): 0.2207, norm(output): 0.0403, norm(x): 0.0389, norm(y): 0.9940, norm:32.7158, tok/sec: 113179.31, flops:44.09, batch-reuse:1
@ 288 train 7.8320 , allloss: 15.4115, dt: 1154.05ms, fracRes: 0.0326, norm(attn): 0.2539, norm(output): 0.0386, norm(x): 0.0370, norm(y): 0.9937, norm:54.5094, tok/sec: 113575.45, flops:44.25, batch-reuse:1
@ 289 train 7.7779 , allloss: 15.2478, dt: 1121.39ms, fracRes: 0.0349, norm(attn): 0.2441, norm(output): 0.0388, norm(x): 0.0376, norm(y): 0.9938, norm:32.7714, tok/sec: 116883.60, flops:45.54, batch-reuse:1
@ 290 train 7.7686 , allloss: 15.2167, dt: 1139.44ms, fracRes: 0.0309, norm(attn): 0.2393, norm(output): 0.0391, norm(x): 0.0379, norm(y): 0.9939, norm:47.3052, tok/sec: 115032.44, flops:44.82, batch-reuse:1
@ 291 train 7.7009 , allloss: 14.8089, dt: 1134.71ms, fracRes: 0.0346, norm(attn): 0.2539, norm(output): 0.0388, norm(x): 0.0374, norm(y): 0.9938, norm:38.6715, tok/sec: 115511.49, flops:45.00, batch-reuse:1
@ 292 train 7.7406 , allloss: 14.2034, dt: 1155.58ms, fracRes: 0.0412, norm(attn): 0.2773, norm(output): 0.0376, norm(x): 0.0364, norm(y): 0.9937, norm:52.3782, tok/sec: 113424.87, flops:44.19, batch-reuse:1
@ 293 train 7.8182 , allloss: 15.7088, dt: 1150.00ms, fracRes: 0.0267, norm(attn): 0.2480, norm(output): 0.0388, norm(x): 0.0374, norm(y): 0.9937, norm:102.5712, tok/sec: 113975.97, flops:44.41, batch-reuse:1
@ 294 train 7.7445 , allloss: 15.0184, dt: 1126.67ms, fracRes: 0.0309, norm(attn): 0.2637, norm(output): 0.0376, norm(x): 0.0365, norm(y): 0.9936, norm:33.4623, tok/sec: 116335.86, flops:45.32, batch-reuse:1
@ 295 train 7.7334 , allloss: 14.6829, dt: 1152.94ms, fracRes: 0.0352, norm(attn): 0.2637, norm(output): 0.0386, norm(x): 0.0368, norm(y): 0.9936, norm:25.9820, tok/sec: 113685.01, flops:44.29, batch-reuse:1
@ 296 train 7.6813 , allloss: 15.0091, dt: 1165.81ms, fracRes: 0.0280, norm(attn): 0.2520, norm(output): 0.0386, norm(x): 0.0372, norm(y): 0.9937, norm:30.8878, tok/sec: 112430.43, flops:43.80, batch-reuse:1
@ 297 train 7.6456 , allloss: 14.5606, dt: 1133.73ms, fracRes: 0.0349, norm(attn): 0.2656, norm(output): 0.0376, norm(x): 0.0364, norm(y): 0.9935, norm:31.2144, tok/sec: 115610.94, flops:45.04, batch-reuse:1
@ 298 train 7.7455 , allloss: 15.1576, dt: 1142.92ms, fracRes: 0.0296, norm(attn): 0.2520, norm(output): 0.0378, norm(x): 0.0369, norm(y): 0.9936, norm:44.0925, tok/sec: 114682.10, flops:44.68, batch-reuse:1
@ 299 train 7.7793 , allloss: 14.3732, dt: 1154.20ms, fracRes: 0.0356, norm(attn): 0.2852, norm(output): 0.0366, norm(x): 0.0360, norm(y): 0.9934, norm:57.4678, tok/sec: 113560.50, flops:44.24, batch-reuse:1
@ 300 train 7.6947 , allloss: 14.9009, dt: 1160.22ms, fracRes: 0.0278, norm(attn): 0.2656, norm(output): 0.0376, norm(x): 0.0367, norm(y): 0.9935, norm:26.1750, tok/sec: 112971.85, flops:44.01, batch-reuse:1
@ 301 train 7.8807 , allloss: 15.0431, dt: 1134.42ms, fracRes: 0.0271, norm(attn): 0.2598, norm(output): 0.0376, norm(x): 0.0366, norm(y): 0.9935, norm:71.0839, tok/sec: 115540.65, flops:45.01, batch-reuse:1
@ 302 train 7.7739 , allloss: 15.6673, dt: 1144.54ms, fracRes: 0.0236, norm(attn): 0.2500, norm(output): 0.0386, norm(x): 0.0373, norm(y): 0.9936, norm:124.9962, tok/sec: 114518.96, flops:44.62, batch-reuse:1
@ 303 train 7.9365 , allloss: 13.9565, dt: 1136.25ms, fracRes: 0.0402, norm(attn): 0.3066, norm(output): 0.0366, norm(x): 0.0356, norm(y): 0.9933, norm:156.8330, tok/sec: 115355.40, flops:44.94, batch-reuse:1
@ 304 train 7.7614 , allloss: 14.1366, dt: 1152.50ms, fracRes: 0.0341, norm(attn): 0.2812, norm(output): 0.0378, norm(x): 0.0366, norm(y): 0.9934, norm:51.0887, tok/sec: 113728.19, flops:44.31, batch-reuse:1
@ 305 train 7.7281 , allloss: 15.2556, dt: 1162.41ms, fracRes: 0.0223, norm(attn): 0.2441, norm(output): 0.0391, norm(x): 0.0380, norm(y): 0.9937, norm:99.7568, tok/sec: 112758.53, flops:43.93, batch-reuse:1
@ 306 train 7.6720 , allloss: 15.1388, dt: 1149.11ms, fracRes: 0.0237, norm(attn): 0.2559, norm(output): 0.0388, norm(x): 0.0378, norm(y): 0.9936, norm:65.3047, tok/sec: 114064.06, flops:44.44, batch-reuse:1
@ 307 train 7.8190 , allloss: 14.7120, dt: 1127.54ms, fracRes: 0.0291, norm(attn): 0.2656, norm(output): 0.0391, norm(x): 0.0377, norm(y): 0.9936, norm:37.1045, tok/sec: 116246.29, flops:45.29, batch-reuse:1
@ 308 train 7.6979 , allloss: 14.6030, dt: 1118.38ms, fracRes: 0.0286, norm(attn): 0.2637, norm(output): 0.0391, norm(x): 0.0380, norm(y): 0.9936, norm:34.7342, tok/sec: 117198.13, flops:45.66, batch-reuse:1
@ 309 train 7.7443 , allloss: 14.9704, dt: 1134.10ms, fracRes: 0.0267, norm(attn): 0.2617, norm(output): 0.0391, norm(x): 0.0378, norm(y): 0.9936, norm:55.5328, tok/sec: 115574.05, flops:45.03, batch-reuse:1
@ 310 train 7.8897 , allloss: 16.5850, dt: 1146.41ms, fracRes: 0.0214, norm(attn): 0.2354, norm(output): 0.0398, norm(x): 0.0391, norm(y): 0.9937, norm:210.2028, tok/sec: 114332.21, flops:44.54, batch-reuse:1
@ 311 train 7.8840 , allloss: 14.7250, dt: 1116.88ms, fracRes: 0.0227, norm(attn): 0.2812, norm(output): 0.0388, norm(x): 0.0376, norm(y): 0.9934, norm:107.4907, tok/sec: 117355.95, flops:45.72, batch-reuse:1
@ 312 train 7.9022 , allloss: 15.0827, dt: 1131.16ms, fracRes: 0.0265, norm(attn): 0.2754, norm(output): 0.0386, norm(x): 0.0374, norm(y): 0.9934, norm:94.2079, tok/sec: 115874.36, flops:45.14, batch-reuse:1
@ 313 train 7.6861 , allloss: 15.2394, dt: 1133.22ms, fracRes: 0.0251, norm(attn): 0.2539, norm(output): 0.0403, norm(x): 0.0390, norm(y): 0.9936, norm:43.1375, tok/sec: 115662.97, flops:45.06, batch-reuse:1
@ 314 train 7.6730 , allloss: 15.1426, dt: 1125.52ms, fracRes: 0.0329, norm(attn): 0.2656, norm(output): 0.0393, norm(x): 0.0386, norm(y): 0.9936, norm:42.3273, tok/sec: 116455.01, flops:45.37, batch-reuse:1
@ 315 train 7.6911 , allloss: 15.6269, dt: 1131.65ms, fracRes: 0.0318, norm(attn): 0.2500, norm(output): 0.0393, norm(x): 0.0387, norm(y): 0.9936, norm:45.2054, tok/sec: 115823.58, flops:45.12, batch-reuse:1
@ 316 train 7.6986 , allloss: 15.5243, dt: 1158.09ms, fracRes: 0.0277, norm(attn): 0.2441, norm(output): 0.0403, norm(x): 0.0391, norm(y): 0.9936, norm:37.8218, tok/sec: 113179.33, flops:44.09, batch-reuse:1
@ 317 train 7.8477 , allloss: 14.3269, dt: 1119.99ms, fracRes: 0.0317, norm(attn): 0.2812, norm(output): 0.0386, norm(x): 0.0371, norm(y): 0.9933, norm:174.2031, tok/sec: 117029.90, flops:45.59, batch-reuse:1
@ 318 train 7.6894 , allloss: 16.0089, dt: 1134.94ms, fracRes: 0.0225, norm(attn): 0.2295, norm(output): 0.0405, norm(x): 0.0396, norm(y): 0.9937, norm:81.6416, tok/sec: 115488.44, flops:44.99, batch-reuse:1
@ 319 train 7.7082 , allloss: 15.6895, dt: 1113.01ms, fracRes: 0.0327, norm(attn): 0.2520, norm(output): 0.0391, norm(x): 0.0383, norm(y): 0.9934, norm:162.5060, tok/sec: 117763.35, flops:45.88, batch-reuse:1
@ 320 train 7.7255 , allloss: 14.5488, dt: 1137.95ms, fracRes: 0.0361, norm(attn): 0.2539, norm(output): 0.0396, norm(x): 0.0385, norm(y): 0.9935, norm:64.2145, tok/sec: 115182.76, flops:44.88, batch-reuse:1
@ 321 train 7.8257 , allloss: 14.3734, dt: 1112.40ms, fracRes: 0.0445, norm(attn): 0.2734, norm(output): 0.0391, norm(x): 0.0379, norm(y): 0.9934, norm:125.0664, tok/sec: 117827.81, flops:45.91, batch-reuse:1
@ 322 train 7.6384 , allloss: 15.8795, dt: 1112.00ms, fracRes: 0.0296, norm(attn): 0.2207, norm(output): 0.0415, norm(x): 0.0405, norm(y): 0.9938, norm:45.1088, tok/sec: 117870.40, flops:45.92, batch-reuse:1
@ 323 train 7.7245 , allloss: 16.3808, dt: 1146.01ms, fracRes: 0.0317, norm(attn): 0.2217, norm(output): 0.0405, norm(x): 0.0396, norm(y): 0.9936, norm:65.1837, tok/sec: 114372.77, flops:44.56, batch-reuse:1
@ 324 train 7.6361 , allloss: 15.3675, dt: 1145.67ms, fracRes: 0.0377, norm(attn): 0.2334, norm(output): 0.0405, norm(x): 0.0393, norm(y): 0.9936, norm:35.9424, tok/sec: 114406.30, flops:44.57, batch-reuse:1
@ 325 train 7.6700 , allloss: 15.1982, dt: 1145.48ms, fracRes: 0.0357, norm(attn): 0.2197, norm(output): 0.0405, norm(x): 0.0394, norm(y): 0.9936, norm:47.0889, tok/sec: 114425.64, flops:44.58, batch-reuse:1
@ 326 train 7.7211 , allloss: 15.0550, dt: 1123.94ms, fracRes: 0.0450, norm(attn): 0.2354, norm(output): 0.0393, norm(x): 0.0383, norm(y): 0.9935, norm:51.4636, tok/sec: 116618.10, flops:45.43, batch-reuse:1
@ 327 train 7.7810 , allloss: 15.4124, dt: 1151.25ms, fracRes: 0.0381, norm(attn): 0.2314, norm(output): 0.0396, norm(x): 0.0385, norm(y): 0.9935, norm:63.2030, tok/sec: 113852.36, flops:44.36, batch-reuse:1
@ 328 train 7.6668 , allloss: 15.3746, dt: 1113.89ms, fracRes: 0.0367, norm(attn): 0.2266, norm(output): 0.0393, norm(x): 0.0381, norm(y): 0.9934, norm:49.6956, tok/sec: 117670.36, flops:45.84, batch-reuse:1
@ 329 train 7.7646 , allloss: 15.8732, dt: 1130.16ms, fracRes: 0.0261, norm(attn): 0.2070, norm(output): 0.0413, norm(x): 0.0398, norm(y): 0.9936, norm:108.3203, tok/sec: 115976.71, flops:45.18, batch-reuse:1
@ 330 train 7.7141 , allloss: 14.5640, dt: 1116.04ms, fracRes: 0.0449, norm(attn): 0.2500, norm(output): 0.0388, norm(x): 0.0374, norm(y): 0.9934, norm:60.9609, tok/sec: 117443.80, flops:45.76, batch-reuse:1
@ 331 train 7.6446 , allloss: 15.3866, dt: 1141.42ms, fracRes: 0.0384, norm(attn): 0.2217, norm(output): 0.0391, norm(x): 0.0381, norm(y): 0.9935, norm:57.4860, tok/sec: 114832.68, flops:44.74, batch-reuse:1
@ 332 train 7.6223 , allloss: 15.1216, dt: 1169.16ms, fracRes: 0.0348, norm(attn): 0.2168, norm(output): 0.0396, norm(x): 0.0384, norm(y): 0.9936, norm:48.6973, tok/sec: 112107.48, flops:43.68, batch-reuse:1
@ 333 train 7.6954 , allloss: 14.5498, dt: 1167.14ms, fracRes: 0.0420, norm(attn): 0.2422, norm(output): 0.0391, norm(x): 0.0375, norm(y): 0.9934, norm:52.8035, tok/sec: 112301.80, flops:43.75, batch-reuse:1
@ 334 train 7.6513 , allloss: 15.3935, dt: 1165.94ms, fracRes: 0.0263, norm(attn): 0.2158, norm(output): 0.0396, norm(x): 0.0385, norm(y): 0.9935, norm:70.4545, tok/sec: 112417.17, flops:43.80, batch-reuse:1
@ 335 train 7.6812 , allloss: 14.2728, dt: 1140.43ms, fracRes: 0.0399, norm(attn): 0.2500, norm(output): 0.0371, norm(x): 0.0360, norm(y): 0.9931, norm:114.2944, tok/sec: 114931.71, flops:44.78, batch-reuse:1
@ 336 train 7.6024 , allloss: 15.4411, dt: 1135.94ms, fracRes: 0.0297, norm(attn): 0.2070, norm(output): 0.0391, norm(x): 0.0376, norm(y): 0.9935, norm:35.2118, tok/sec: 115386.73, flops:44.95, batch-reuse:1
@ 337 train 7.6597 , allloss: 15.0079, dt: 1113.16ms, fracRes: 0.0398, norm(attn): 0.2207, norm(output): 0.0391, norm(x): 0.0376, norm(y): 0.9935, norm:48.9985, tok/sec: 117747.61, flops:45.87, batch-reuse:1
@ 338 train 7.5848 , allloss: 15.1226, dt: 1134.53ms, fracRes: 0.0367, norm(attn): 0.2109, norm(output): 0.0393, norm(x): 0.0381, norm(y): 0.9935, norm:36.0160, tok/sec: 115529.43, flops:45.01, batch-reuse:1
@ 339 train 7.6794 , allloss: 14.9634, dt: 1109.89ms, fracRes: 0.0405, norm(attn): 0.2148, norm(output): 0.0388, norm(x): 0.0370, norm(y): 0.9933, norm:62.6354, tok/sec: 118094.92, flops:46.01, batch-reuse:1
@ 340 train 7.7054 , allloss: 15.3249, dt: 1126.86ms, fracRes: 0.0351, norm(attn): 0.2021, norm(output): 0.0396, norm(x): 0.0381, norm(y): 0.9935, norm:73.5696, tok/sec: 116316.54, flops:45.32, batch-reuse:1
@ 341 train 7.6986 , allloss: 14.1353, dt: 1132.18ms, fracRes: 0.0567, norm(attn): 0.2324, norm(output): 0.0386, norm(x): 0.0368, norm(y): 0.9933, norm:81.4989, tok/sec: 115769.17, flops:45.10, batch-reuse:1
@ 342 train 7.7619 , allloss: 15.7852, dt: 1152.16ms, fracRes: 0.0403, norm(attn): 0.2041, norm(output): 0.0391, norm(x): 0.0381, norm(y): 0.9935, norm:263.8868, tok/sec: 113761.56, flops:44.32, batch-reuse:1
@ 343 train 7.7411 , allloss: 14.2215, dt: 1142.53ms, fracRes: 0.0586, norm(attn): 0.2188, norm(output): 0.0388, norm(x): 0.0372, norm(y): 0.9935, norm:77.3446, tok/sec: 114720.36, flops:44.70, batch-reuse:1
@ 344 train 7.6035 , allloss: 14.4384, dt: 1117.93ms, fracRes: 0.0455, norm(attn): 0.2051, norm(output): 0.0396, norm(x): 0.0381, norm(y): 0.9935, norm:39.6055, tok/sec: 117245.25, flops:45.68, batch-reuse:1
@ 345 train 7.5927 , allloss: 14.9485, dt: 1111.78ms, fracRes: 0.0372, norm(attn): 0.1973, norm(output): 0.0398, norm(x): 0.0386, norm(y): 0.9935, norm:37.1477, tok/sec: 117893.91, flops:45.93, batch-reuse:1
@ 346 train 7.7009 , allloss: 14.7038, dt: 1134.40ms, fracRes: 0.0444, norm(attn): 0.2188, norm(output): 0.0391, norm(x): 0.0377, norm(y): 0.9933, norm:97.7038, tok/sec: 115542.84, flops:45.02, batch-reuse:1
@ 347 train 7.6879 , allloss: 15.9293, dt: 1151.35ms, fracRes: 0.0369, norm(attn): 0.1963, norm(output): 0.0415, norm(x): 0.0402, norm(y): 0.9936, norm:67.6348, tok/sec: 113841.87, flops:44.35, batch-reuse:1
@ 348 train 7.6080 , allloss: 14.3224, dt: 1114.07ms, fracRes: 0.0465, norm(attn): 0.2109, norm(output): 0.0403, norm(x): 0.0388, norm(y): 0.9935, norm:44.8314, tok/sec: 117651.78, flops:45.84, batch-reuse:1
@ 349 train 7.6312 , allloss: 15.1044, dt: 1109.37ms, fracRes: 0.0335, norm(attn): 0.1875, norm(output): 0.0417, norm(x): 0.0399, norm(y): 0.9937, norm:43.2670, tok/sec: 118149.79, flops:46.03, batch-reuse:1
@ 350 train 7.7028 , allloss: 14.5181, dt: 1129.21ms, fracRes: 0.0375, norm(attn): 0.2002, norm(output): 0.0396, norm(x): 0.0382, norm(y): 0.9934, norm:63.9470, tok/sec: 116073.82, flops:45.22, batch-reuse:1
@ 351 train 7.6648 , allloss: 14.7551, dt: 1146.30ms, fracRes: 0.0352, norm(attn): 0.1826, norm(output): 0.0405, norm(x): 0.0393, norm(y): 0.9936, norm:43.8876, tok/sec: 114343.48, flops:44.55, batch-reuse:1
@ 352 train 7.7358 , allloss: 14.5093, dt: 1150.40ms, fracRes: 0.0366, norm(attn): 0.1885, norm(output): 0.0427, norm(x): 0.0403, norm(y): 0.9937, norm:54.8135, tok/sec: 113935.98, flops:44.39, batch-reuse:1
@ 353 train 7.6719 , allloss: 15.9916, dt: 1156.48ms, fracRes: 0.0299, norm(attn): 0.1787, norm(output): 0.0427, norm(x): 0.0410, norm(y): 0.9937, norm:98.4558, tok/sec: 113337.04, flops:44.16, batch-reuse:1
@ 354 train 7.7876 , allloss: 13.7666, dt: 1145.39ms, fracRes: 0.0561, norm(attn): 0.2197, norm(output): 0.0381, norm(x): 0.0366, norm(y): 0.9932, norm:132.3523, tok/sec: 114434.81, flops:44.58, batch-reuse:1
@ 355 train 7.6225 , allloss: 14.5725, dt: 1156.00ms, fracRes: 0.0425, norm(attn): 0.1875, norm(output): 0.0400, norm(x): 0.0383, norm(y): 0.9935, norm:40.1175, tok/sec: 113384.51, flops:44.17, batch-reuse:1
@ 356 train 7.8722 , allloss: 17.5098, dt: 1150.69ms, fracRes: 0.0297, norm(attn): 0.1748, norm(output): 0.0420, norm(x): 0.0402, norm(y): 0.9935, norm:411.7481, tok/sec: 113907.42, flops:44.38, batch-reuse:1
@ 357 train 7.7199 , allloss: 14.9968, dt: 1157.69ms, fracRes: 0.0365, norm(attn): 0.1729, norm(output): 0.0437, norm(x): 0.0419, norm(y): 0.9939, norm:59.6008, tok/sec: 113218.42, flops:44.11, batch-reuse:1
@ 358 train 7.6348 , allloss: 13.6568, dt: 1150.23ms, fracRes: 0.0553, norm(attn): 0.1758, norm(output): 0.0403, norm(x): 0.0387, norm(y): 0.9937, norm:52.8380, tok/sec: 113953.01, flops:44.40, batch-reuse:1
@ 359 train 7.8161 , allloss: 14.1728, dt: 1118.62ms, fracRes: 0.0458, norm(attn): 0.1719, norm(output): 0.0405, norm(x): 0.0388, norm(y): 0.9937, norm:49.4405, tok/sec: 117173.03, flops:45.65, batch-reuse:1
@ 360 train 7.7570 , allloss: 14.5302, dt: 1117.67ms, fracRes: 0.0369, norm(attn): 0.1689, norm(output): 0.0415, norm(x): 0.0395, norm(y): 0.9937, norm:60.2614, tok/sec: 117272.98, flops:45.69, batch-reuse:1
@ 361 train 7.6895 , allloss: 14.7477, dt: 1129.31ms, fracRes: 0.0332, norm(attn): 0.1719, norm(output): 0.0430, norm(x): 0.0408, norm(y): 0.9938, norm:36.3911, tok/sec: 116064.19, flops:45.22, batch-reuse:1
@ 362 train 7.5867 , allloss: 14.5476, dt: 1139.21ms, fracRes: 0.0380, norm(attn): 0.1719, norm(output): 0.0427, norm(x): 0.0406, norm(y): 0.9938, norm:60.2720, tok/sec: 115054.71, flops:44.83, batch-reuse:1
@ 363 train 7.7144 , allloss: 15.3974, dt: 1117.10ms, fracRes: 0.0390, norm(attn): 0.1738, norm(output): 0.0427, norm(x): 0.0410, norm(y): 0.9937, norm:83.0725, tok/sec: 117332.65, flops:45.71, batch-reuse:1
@ 364 train 7.6701 , allloss: 14.8573, dt: 1126.02ms, fracRes: 0.0353, norm(attn): 0.1738, norm(output): 0.0442, norm(x): 0.0422, norm(y): 0.9939, norm:42.5946, tok/sec: 116402.79, flops:45.35, batch-reuse:1
@ 365 train 7.6513 , allloss: 15.8180, dt: 1158.55ms, fracRes: 0.0284, norm(attn): 0.1768, norm(output): 0.0461, norm(x): 0.0429, norm(y): 0.9940, norm:46.2205, tok/sec: 113134.66, flops:44.08, batch-reuse:1
@ 366 train 7.7135 , allloss: 16.5123, dt: 1137.26ms, fracRes: 0.0282, norm(attn): 0.1582, norm(output): 0.0425, norm(x): 0.0405, norm(y): 0.9938, norm:126.4047, tok/sec: 115252.21, flops:44.90, batch-reuse:1
@ 367 train 7.5983 , allloss: 15.4324, dt: 1159.31ms, fracRes: 0.0291, norm(attn): 0.1660, norm(output): 0.0435, norm(x): 0.0421, norm(y): 0.9940, norm:39.6651, tok/sec: 113060.11, flops:44.05, batch-reuse:1
@ 368 train 7.6683 , allloss: 14.9122, dt: 1151.07ms, fracRes: 0.0296, norm(attn): 0.1748, norm(output): 0.0457, norm(x): 0.0433, norm(y): 0.9940, norm:36.7891, tok/sec: 113869.53, flops:44.36, batch-reuse:1
@ 369 train 7.6127 , allloss: 15.1663, dt: 1131.47ms, fracRes: 0.0271, norm(attn): 0.1797, norm(output): 0.0466, norm(x): 0.0441, norm(y): 0.9941, norm:38.0108, tok/sec: 115841.71, flops:45.13, batch-reuse:1
@ 370 train 7.7323 , allloss: 16.3622, dt: 1134.73ms, fracRes: 0.0286, norm(attn): 0.1621, norm(output): 0.0439, norm(x): 0.0422, norm(y): 0.9939, norm:54.4093, tok/sec: 115509.11, flops:45.00, batch-reuse:1
@ 371 train 7.6428 , allloss: 16.1077, dt: 1132.30ms, fracRes: 0.0294, norm(attn): 0.1641, norm(output): 0.0449, norm(x): 0.0429, norm(y): 0.9940, norm:42.6119, tok/sec: 115757.15, flops:45.10, batch-reuse:1
@ 372 train 7.7467 , allloss: 17.2209, dt: 1144.40ms, fracRes: 0.0246, norm(attn): 0.1904, norm(output): 0.0483, norm(x): 0.0464, norm(y): 0.9941, norm:90.7304, tok/sec: 114533.34, flops:44.62, batch-reuse:1
@ 373 train 7.7178 , allloss: 14.6048, dt: 1144.77ms, fracRes: 0.0357, norm(attn): 0.1670, norm(output): 0.0432, norm(x): 0.0414, norm(y): 0.9939, norm:64.8430, tok/sec: 114496.73, flops:44.61, batch-reuse:1
@ 374 train 7.6616 , allloss: 16.3120, dt: 1157.81ms, fracRes: 0.0289, norm(attn): 0.1729, norm(output): 0.0469, norm(x): 0.0443, norm(y): 0.9941, norm:32.3767, tok/sec: 113206.81, flops:44.11, batch-reuse:1
@ 375 train 7.7251 , allloss: 16.5866, dt: 1120.45ms, fracRes: 0.0347, norm(attn): 0.1572, norm(output): 0.0439, norm(x): 0.0427, norm(y): 0.9939, norm:32.3513, tok/sec: 116981.74, flops:45.58, batch-reuse:1
@ 376 train 7.7686 , allloss: 16.7971, dt: 1133.61ms, fracRes: 0.0336, norm(attn): 0.1641, norm(output): 0.0459, norm(x): 0.0437, norm(y): 0.9940, norm:27.7515, tok/sec: 115623.90, flops:45.05, batch-reuse:1
@ 377 train 7.6911 , allloss: 16.5918, dt: 1162.84ms, fracRes: 0.0321, norm(attn): 0.1709, norm(output): 0.0459, norm(x): 0.0435, norm(y): 0.9939, norm:31.1670, tok/sec: 112717.11, flops:43.91, batch-reuse:1
@ 378 train 7.6484 , allloss: 15.2091, dt: 1153.98ms, fracRes: 0.0386, norm(attn): 0.1611, norm(output): 0.0417, norm(x): 0.0401, norm(y): 0.9936, norm:27.9577, tok/sec: 113582.23, flops:44.25, batch-reuse:1
@ 379 train 7.7020 , allloss: 14.9946, dt: 1156.82ms, fracRes: 0.0414, norm(attn): 0.1553, norm(output): 0.0413, norm(x): 0.0396, norm(y): 0.9936, norm:32.3993, tok/sec: 113303.80, flops:44.14, batch-reuse:1
@ 380 train 7.8225 , allloss: 15.6002, dt: 1153.14ms, fracRes: 0.0411, norm(attn): 0.1592, norm(output): 0.0413, norm(x): 0.0398, norm(y): 0.9936, norm:75.8126, tok/sec: 113665.43, flops:44.28, batch-reuse:1
@ 381 train 7.6999 , allloss: 14.2722, dt: 1161.07ms, fracRes: 0.0566, norm(attn): 0.1660, norm(output): 0.0405, norm(x): 0.0392, norm(y): 0.9937, norm:24.7470, tok/sec: 112888.99, flops:43.98, batch-reuse:1
@ 382 train 7.6503 , allloss: 14.9106, dt: 1145.10ms, fracRes: 0.0503, norm(attn): 0.1572, norm(output): 0.0396, norm(x): 0.0386, norm(y): 0.9935, norm:29.3389, tok/sec: 114463.04, flops:44.59, batch-reuse:1
@ 383 train 7.6641 , allloss: 14.5942, dt: 1148.35ms, fracRes: 0.0405, norm(attn): 0.1611, norm(output): 0.0403, norm(x): 0.0391, norm(y): 0.9936, norm:34.9721, tok/sec: 114139.16, flops:44.47, batch-reuse:1
@ 384 train 7.6660 , allloss: 14.1264, dt: 1137.76ms, fracRes: 0.0595, norm(attn): 0.1768, norm(output): 0.0376, norm(x): 0.0368, norm(y): 0.9932, norm:35.1613, tok/sec: 115201.35, flops:44.88, batch-reuse:1
@ 385 train 7.6263 , allloss: 14.6459, dt: 1139.71ms, fracRes: 0.0334, norm(attn): 0.1611, norm(output): 0.0396, norm(x): 0.0387, norm(y): 0.9934, norm:32.6962, tok/sec: 115004.43, flops:44.81, batch-reuse:1
@ 386 train 7.6700 , allloss: 13.9147, dt: 1152.50ms, fracRes: 0.0532, norm(attn): 0.1885, norm(output): 0.0366, norm(x): 0.0361, norm(y): 0.9931, norm:19.1506, tok/sec: 113728.40, flops:44.31, batch-reuse:1
@ 387 train 7.6660 , allloss: 13.5980, dt: 1154.52ms, fracRes: 0.0685, norm(attn): 0.2070, norm(output): 0.0352, norm(x): 0.0350, norm(y): 0.9929, norm:27.3451, tok/sec: 113529.48, flops:44.23, batch-reuse:1
@ 388 train 7.5744 , allloss: 13.5574, dt: 1158.20ms, fracRes: 0.0553, norm(attn): 0.1934, norm(output): 0.0371, norm(x): 0.0363, norm(y): 0.9931, norm:22.1575, tok/sec: 113168.82, flops:44.09, batch-reuse:1
@ 389 train 7.6205 , allloss: 13.3913, dt: 1118.93ms, fracRes: 0.0605, norm(attn): 0.2168, norm(output): 0.0354, norm(x): 0.0350, norm(y): 0.9928, norm:18.6165, tok/sec: 117140.70, flops:45.64, batch-reuse:1
@ 390 train 7.8176 , allloss: 13.9237, dt: 1127.33ms, fracRes: 0.0696, norm(attn): 0.2754, norm(output): 0.0317, norm(x): 0.0319, norm(y): 0.9916, norm:243.8453, tok/sec: 116268.10, flops:45.30, batch-reuse:1
@ 391 train 7.6231 , allloss: 12.2508, dt: 1121.76ms, fracRes: 0.1299, norm(attn): 0.2930, norm(output): 0.0315, norm(x): 0.0313, norm(y): 0.9920, norm:28.0787, tok/sec: 116845.02, flops:45.52, batch-reuse:1
@ 392 train 7.6825 , allloss: 12.4047, dt: 1134.82ms, fracRes: 0.1256, norm(attn): 0.2715, norm(output): 0.0337, norm(x): 0.0331, norm(y): 0.9927, norm:29.7044, tok/sec: 115500.67, flops:45.00, batch-reuse:1
@ 393 train 7.6693 , allloss: 12.5864, dt: 1134.71ms, fracRes: 0.1002, norm(attn): 0.2490, norm(output): 0.0337, norm(x): 0.0336, norm(y): 0.9928, norm:46.0807, tok/sec: 115511.35, flops:45.00, batch-reuse:1
@ 394 train 7.5926 , allloss: 12.5114, dt: 1117.19ms, fracRes: 0.0919, norm(attn): 0.2617, norm(output): 0.0337, norm(x): 0.0332, norm(y): 0.9927, norm:15.3285, tok/sec: 117322.94, flops:45.71, batch-reuse:1
@ 395 train 7.7430 , allloss: 12.5178, dt: 1126.81ms, fracRes: 0.0903, norm(attn): 0.2969, norm(output): 0.0317, norm(x): 0.0318, norm(y): 0.9923, norm:23.1807, tok/sec: 116321.49, flops:45.32, batch-reuse:1
@ 396 train 7.5170 , allloss: 12.1509, dt: 1132.21ms, fracRes: 0.1031, norm(attn): 0.3086, norm(output): 0.0312, norm(x): 0.0313, norm(y): 0.9922, norm:21.4979, tok/sec: 115766.29, flops:45.10, batch-reuse:1
@ 397 train 7.6357 , allloss: 11.7896, dt: 1126.63ms, fracRes: 0.1191, norm(attn): 0.3262, norm(output): 0.0303, norm(x): 0.0303, norm(y): 0.9919, norm:14.7359, tok/sec: 116340.02, flops:45.33, batch-reuse:1
@ 398 train 7.6555 , allloss: 11.7029, dt: 1116.39ms, fracRes: 0.1259, norm(attn): 0.3398, norm(output): 0.0295, norm(x): 0.0297, norm(y): 0.9918, norm:17.7664, tok/sec: 117407.45, flops:45.74, batch-reuse:1
@ 399 train 7.7156 , allloss: 11.4125, dt: 1155.33ms, fracRes: 0.1295, norm(attn): 0.3867, norm(output): 0.0283, norm(x): 0.0284, norm(y): 0.9913, norm:49.8972, tok/sec: 113450.05, flops:44.20, batch-reuse:1
@ 400 train 7.7531 , allloss: 11.5454, dt: 1165.38ms, fracRes: 0.1094, norm(attn): 0.3984, norm(output): 0.0276, norm(x): 0.0279, norm(y): 0.9910, norm:48.5079, tok/sec: 112471.56, flops:43.82, batch-reuse:1
@ 401 train 7.7569 , allloss: 11.4812, dt: 1162.80ms, fracRes: 0.1049, norm(attn): 0.4023, norm(output): 0.0278, norm(x): 0.0281, norm(y): 0.9910, norm:21.2727, tok/sec: 112721.06, flops:43.92, batch-reuse:1
@ 402 train 7.7371 , allloss: 11.4945, dt: 1110.09ms, fracRes: 0.0744, norm(attn): 0.4043, norm(output): 0.0278, norm(x): 0.0281, norm(y): 0.9908, norm:41.4206, tok/sec: 118073.33, flops:46.00, batch-reuse:1
@ 403 train 7.8600 , allloss: 11.7995, dt: 1155.56ms, fracRes: 0.0634, norm(attn): 0.3809, norm(output): 0.0292, norm(x): 0.0291, norm(y): 0.9912, norm:109.3300, tok/sec: 113426.88, flops:44.19, batch-reuse:1
@ 404 train 7.6665 , allloss: 11.1463, dt: 1137.67ms, fracRes: 0.0831, norm(attn): 0.4316, norm(output): 0.0277, norm(x): 0.0280, norm(y): 0.9908, norm:28.1008, tok/sec: 115211.42, flops:44.89, batch-reuse:1
@ 405 train 7.7559 , allloss: 11.5462, dt: 1148.74ms, fracRes: 0.0512, norm(attn): 0.4668, norm(output): 0.0273, norm(x): 0.0278, norm(y): 0.9901, norm:89.5146, tok/sec: 114100.28, flops:44.45, batch-reuse:1
@ 406 train 7.7503 , allloss: 11.1319, dt: 1121.92ms, fracRes: 0.0781, norm(attn): 0.4609, norm(output): 0.0281, norm(x): 0.0285, norm(y): 0.9908, norm:46.3000, tok/sec: 116828.80, flops:45.52, batch-reuse:1
@ 407 train 7.8251 , allloss: 11.3327, dt: 1116.28ms, fracRes: 0.0630, norm(attn): 0.4375, norm(output): 0.0294, norm(x): 0.0295, norm(y): 0.9912, norm:86.5433, tok/sec: 117418.16, flops:45.75, batch-reuse:1
@ 408 train 7.7666 , allloss: 11.0167, dt: 1126.75ms, fracRes: 0.1020, norm(attn): 0.4648, norm(output): 0.0293, norm(x): 0.0295, norm(y): 0.9913, norm:39.3955, tok/sec: 116327.34, flops:45.32, batch-reuse:1
@ 409 train 7.7374 , allloss: 10.7411, dt: 1152.92ms, fracRes: 0.1302, norm(attn): 0.4980, norm(output): 0.0292, norm(x): 0.0291, norm(y): 0.9912, norm:35.4823, tok/sec: 113687.46, flops:44.29, batch-reuse:1
@ 410 train 7.7386 , allloss: 10.7970, dt: 1152.57ms, fracRes: 0.1057, norm(attn): 0.4980, norm(output): 0.0293, norm(x): 0.0293, norm(y): 0.9911, norm:35.2928, tok/sec: 113721.58, flops:44.31, batch-reuse:1
@ 411 train 7.8132 , allloss: 11.2026, dt: 1142.33ms, fracRes: 0.0592, norm(attn): 0.4707, norm(output): 0.0300, norm(x): 0.0302, norm(y): 0.9911, norm:84.6088, tok/sec: 114741.10, flops:44.70, batch-reuse:1
@ 412 train 7.8405 , allloss: 11.2559, dt: 1158.70ms, fracRes: 0.0436, norm(attn): 0.5039, norm(output): 0.0298, norm(x): 0.0300, norm(y): 0.9907, norm:55.8075, tok/sec: 113119.69, flops:44.07, batch-reuse:1
@ 413 train 7.6853 , allloss: 10.8563, dt: 1153.40ms, fracRes: 0.0562, norm(attn): 0.5312, norm(output): 0.0308, norm(x): 0.0303, norm(y): 0.9910, norm:56.5098, tok/sec: 113639.19, flops:44.27, batch-reuse:1
@ 414 train 7.7784 , allloss: 11.0730, dt: 1162.09ms, fracRes: 0.0553, norm(attn): 0.5000, norm(output): 0.0315, norm(x): 0.0313, norm(y): 0.9914, norm:29.4366, tok/sec: 112789.60, flops:43.94, batch-reuse:1
@ 415 train 7.8056 , allloss: 11.1577, dt: 1161.74ms, fracRes: 0.0401, norm(attn): 0.5039, norm(output): 0.0312, norm(x): 0.0312, norm(y): 0.9911, norm:68.7542, tok/sec: 112824.21, flops:43.96, batch-reuse:1
@ 416 train 7.9032 , allloss: 11.2650, dt: 1133.91ms, fracRes: 0.0448, norm(attn): 0.5234, norm(output): 0.0317, norm(x): 0.0318, norm(y): 0.9913, norm:46.2961, tok/sec: 115593.32, flops:45.04, batch-reuse:1
@ 417 train 7.8224 , allloss: 11.0644, dt: 1131.83ms, fracRes: 0.0448, norm(attn): 0.5352, norm(output): 0.0317, norm(x): 0.0317, norm(y): 0.9912, norm:43.3049, tok/sec: 115804.99, flops:45.12, batch-reuse:1
@ 418 train 7.9061 , allloss: 11.3281, dt: 1115.55ms, fracRes: 0.0299, norm(attn): 0.5000, norm(output): 0.0334, norm(x): 0.0330, norm(y): 0.9915, norm:71.9877, tok/sec: 117494.90, flops:45.78, batch-reuse:1
@ 419 train 7.8417 , allloss: 11.1675, dt: 1123.99ms, fracRes: 0.0311, norm(attn): 0.5430, norm(output): 0.0327, norm(x): 0.0320, norm(y): 0.9912, norm:54.0229, tok/sec: 116613.33, flops:45.43, batch-reuse:1
@ 420 train 7.7627 , allloss: 11.2814, dt: 1141.93ms, fracRes: 0.0272, norm(attn): 0.5195, norm(output): 0.0332, norm(x): 0.0326, norm(y): 0.9914, norm:41.3607, tok/sec: 114780.89, flops:44.72, batch-reuse:1
@ 421 train 7.9379 , allloss: 11.6403, dt: 1147.03ms, fracRes: 0.0145, norm(attn): 0.5000, norm(output): 0.0344, norm(x): 0.0335, norm(y): 0.9914, norm:57.9143, tok/sec: 114271.16, flops:44.52, batch-reuse:1
@ 422 train 7.9703 , allloss: 12.5828, dt: 1149.80ms, fracRes: 0.0122, norm(attn): 0.4180, norm(output): 0.0359, norm(x): 0.0351, norm(y): 0.9918, norm:197.5004, tok/sec: 113995.64, flops:44.41, batch-reuse:1
@ 423 train 8.0839 , allloss: 11.8471, dt: 1119.91ms, fracRes: 0.0119, norm(attn): 0.4922, norm(output): 0.0354, norm(x): 0.0347, norm(y): 0.9916, norm:188.5746, tok/sec: 117037.88, flops:45.60, batch-reuse:1
@ 424 train 7.7748 , allloss: 11.8612, dt: 1131.65ms, fracRes: 0.0133, norm(attn): 0.4668, norm(output): 0.0366, norm(x): 0.0358, norm(y): 0.9920, norm:66.6005, tok/sec: 115823.92, flops:45.12, batch-reuse:1
@ 425 train 7.9755 , allloss: 13.1740, dt: 1143.14ms, fracRes: 0.0109, norm(attn): 0.3770, norm(output): 0.0393, norm(x): 0.0381, norm(y): 0.9926, norm:188.7232, tok/sec: 114659.47, flops:44.67, batch-reuse:1
@ 426 train 7.6588 , allloss: 12.5774, dt: 1142.86ms, fracRes: 0.0108, norm(attn): 0.3789, norm(output): 0.0393, norm(x): 0.0379, norm(y): 0.9925, norm:43.8334, tok/sec: 114688.15, flops:44.68, batch-reuse:1
@ 427 train 8.2986 , allloss: 12.2814, dt: 1132.76ms, fracRes: 0.0106, norm(attn): 0.4062, norm(output): 0.0391, norm(x): 0.0381, norm(y): 0.9922, norm:298.3160, tok/sec: 115710.34, flops:45.08, batch-reuse:1
@ 428 train 7.8681 , allloss: 12.3038, dt: 1133.99ms, fracRes: 0.0109, norm(attn): 0.4023, norm(output): 0.0396, norm(x): 0.0386, norm(y): 0.9924, norm:133.0643, tok/sec: 115585.30, flops:45.03, batch-reuse:1
@ 429 train 7.9169 , allloss: 14.7376, dt: 1137.43ms, fracRes: 0.0091, norm(attn): 0.3340, norm(output): 0.0420, norm(x): 0.0401, norm(y): 0.9927, norm:335.7317, tok/sec: 115235.59, flops:44.90, batch-reuse:1
@ 430 train 7.7781 , allloss: 13.1335, dt: 1159.58ms, fracRes: 0.0099, norm(attn): 0.3516, norm(output): 0.0430, norm(x): 0.0413, norm(y): 0.9928, norm:89.0569, tok/sec: 113034.29, flops:44.04, batch-reuse:1
@ 431 train 7.9374 , allloss: 12.4564, dt: 1148.26ms, fracRes: 0.0098, norm(attn): 0.3750, norm(output): 0.0430, norm(x): 0.0416, norm(y): 0.9927, norm:195.1843, tok/sec: 114148.38, flops:44.47, batch-reuse:1
@ 432 train 7.7826 , allloss: 13.9679, dt: 1121.95ms, fracRes: 0.0085, norm(attn): 0.3145, norm(output): 0.0442, norm(x): 0.0422, norm(y): 0.9928, norm:82.3892, tok/sec: 116825.18, flops:45.52, batch-reuse:1
@ 433 train 7.8713 , allloss: 15.3794, dt: 1128.55ms, fracRes: 0.0079, norm(attn): 0.2871, norm(output): 0.0464, norm(x): 0.0438, norm(y): 0.9928, norm:149.5562, tok/sec: 116142.34, flops:45.25, batch-reuse:1
@ 434 train 7.9239 , allloss: 13.3127, dt: 1123.29ms, fracRes: 0.0086, norm(attn): 0.2812, norm(output): 0.0454, norm(x): 0.0431, norm(y): 0.9926, norm:140.5370, tok/sec: 116685.85, flops:45.46, batch-reuse:1
@ 435 train 7.7363 , allloss: 13.4553, dt: 1144.41ms, fracRes: 0.0087, norm(attn): 0.2754, norm(output): 0.0454, norm(x): 0.0432, norm(y): 0.9924, norm:72.4725, tok/sec: 114532.72, flops:44.62, batch-reuse:1
@ 436 train 7.8902 , allloss: 15.9491, dt: 1130.55ms, fracRes: 0.0086, norm(attn): 0.2422, norm(output): 0.0464, norm(x): 0.0434, norm(y): 0.9924, norm:180.6505, tok/sec: 115936.18, flops:45.17, batch-reuse:1
@ 437 train 7.9129 , allloss: 17.3923, dt: 1113.02ms, fracRes: 0.0102, norm(attn): 0.2676, norm(output): 0.0515, norm(x): 0.0480, norm(y): 0.9925, norm:105.8819, tok/sec: 117762.82, flops:45.88, batch-reuse:1
@ 438 train 11.0346 , allloss: 15.1293, dt: 1119.37ms, fracRes: 0.0099, norm(attn): 0.3418, norm(output): 0.0471, norm(x): 0.0460, norm(y): 0.9921, norm:664.4898, tok/sec: 117094.31, flops:45.62, batch-reuse:1
@ 439 train 9.2390 , allloss: 15.2540, dt: 1112.45ms, fracRes: 0.0103, norm(attn): 0.2715, norm(output): 0.0474, norm(x): 0.0462, norm(y): 0.9922, norm:373.4061, tok/sec: 117822.71, flops:45.90, batch-reuse:1
@ 440 train 8.1852 , allloss: 16.9364, dt: 1114.31ms, fracRes: 0.0151, norm(attn): 0.2432, norm(output): 0.0508, norm(x): 0.0496, norm(y): 0.9925, norm:232.0131, tok/sec: 117626.50, flops:45.83, batch-reuse:1
@ 441 train 8.1560 , allloss: 15.6801, dt: 1122.04ms, fracRes: 0.0115, norm(attn): 0.2852, norm(output): 0.0542, norm(x): 0.0495, norm(y): 0.9922, norm:363.8683, tok/sec: 116815.32, flops:45.51, batch-reuse:1
@ 442 train 7.9070 , allloss: 20.4637, dt: 1147.51ms, fracRes: 0.0150, norm(attn): 0.2500, norm(output): 0.0615, norm(x): 0.0593, norm(y): 0.9927, norm:88.3333, tok/sec: 114223.42, flops:44.50, batch-reuse:1
@ 443 train 9.5853 , allloss: 25.2851, dt: 1126.23ms, fracRes: 0.0130, norm(attn): 0.2344, norm(output): 0.0583, norm(x): 0.0568, norm(y): 0.9927, norm:852.2487, tok/sec: 116381.00, flops:45.34, batch-reuse:1
@ 444 train 7.8932 , allloss: 20.4728, dt: 1138.60ms, fracRes: 0.0135, norm(attn): 0.2207, norm(output): 0.0586, norm(x): 0.0562, norm(y): 0.9928, norm:124.6184, tok/sec: 115116.34, flops:44.85, batch-reuse:1
@ 445 train 7.8110 , allloss: 16.4881, dt: 1119.42ms, fracRes: 0.0111, norm(attn): 0.2559, norm(output): 0.0618, norm(x): 0.0563, norm(y): 0.9924, norm:77.0588, tok/sec: 117089.15, flops:45.62, batch-reuse:1
@ 446 train 8.4449 , allloss: 16.1691, dt: 1153.42ms, fracRes: 0.0110, norm(attn): 0.2715, norm(output): 0.0576, norm(x): 0.0522, norm(y): 0.9920, norm:495.3453, tok/sec: 113637.42, flops:44.27, batch-reuse:1
@ 447 train 7.8695 , allloss: 17.8644, dt: 1104.65ms, fracRes: 0.0126, norm(attn): 0.2471, norm(output): 0.0654, norm(x): 0.0583, norm(y): 0.9924, norm:68.3610, tok/sec: 118654.26, flops:46.23, batch-reuse:1
@ 448 train 7.8100 , allloss: 19.3172, dt: 1130.54ms, fracRes: 0.0179, norm(attn): 0.2305, norm(output): 0.0693, norm(x): 0.0626, norm(y): 0.9926, norm:58.6021, tok/sec: 115937.58, flops:45.17, batch-reuse:1
@ 449 train 7.7347 , allloss: 20.5649, dt: 1120.35ms, fracRes: 0.0233, norm(attn): 0.2168, norm(output): 0.0669, norm(x): 0.0620, norm(y): 0.9926, norm:48.6211, tok/sec: 116992.12, flops:45.58, batch-reuse:1
@ 450 train 7.7912 , allloss: 21.0801, dt: 1125.23ms, fracRes: 0.0260, norm(attn): 0.2031, norm(output): 0.0630, norm(x): 0.0589, norm(y): 0.9926, norm:46.1078, tok/sec: 116485.07, flops:45.38, batch-reuse:1
@ 451 train 7.7213 , allloss: 21.5398, dt: 1138.51ms, fracRes: 0.0237, norm(attn): 0.1943, norm(output): 0.0630, norm(x): 0.0591, norm(y): 0.9928, norm:47.5049, tok/sec: 115126.18, flops:44.85, batch-reuse:1
@ 452 train 7.7429 , allloss: 21.1679, dt: 1126.25ms, fracRes: 0.0176, norm(attn): 0.1895, norm(output): 0.0630, norm(x): 0.0592, norm(y): 0.9929, norm:45.6294, tok/sec: 116379.62, flops:45.34, batch-reuse:1
@ 453 train 7.7530 , allloss: 19.0294, dt: 1138.57ms, fracRes: 0.0128, norm(attn): 0.1855, norm(output): 0.0623, norm(x): 0.0580, norm(y): 0.9929, norm:49.4200, tok/sec: 115119.74, flops:44.85, batch-reuse:1
@ 454 train 7.7182 , allloss: 18.2057, dt: 1138.84ms, fracRes: 0.0126, norm(attn): 0.1738, norm(output): 0.0605, norm(x): 0.0570, norm(y): 0.9931, norm:46.6673, tok/sec: 115092.39, flops:44.84, batch-reuse:1
@ 455 train 7.7722 , allloss: 19.1271, dt: 1134.81ms, fracRes: 0.0180, norm(attn): 0.1846, norm(output): 0.0649, norm(x): 0.0621, norm(y): 0.9931, norm:64.5366, tok/sec: 115501.42, flops:45.00, batch-reuse:1
@ 456 train 7.6883 , allloss: 21.1746, dt: 1130.73ms, fracRes: 0.0251, norm(attn): 0.1875, norm(output): 0.0664, norm(x): 0.0649, norm(y): 0.9930, norm:69.7613, tok/sec: 115917.97, flops:45.16, batch-reuse:1
@ 457 train 7.8119 , allloss: 22.3502, dt: 1122.38ms, fracRes: 0.0303, norm(attn): 0.1963, norm(output): 0.0674, norm(x): 0.0663, norm(y): 0.9929, norm:78.8614, tok/sec: 116780.73, flops:45.50, batch-reuse:1
@ 458 train 7.8626 , allloss: 21.5584, dt: 1125.85ms, fracRes: 0.0305, norm(attn): 0.1904, norm(output): 0.0708, norm(x): 0.0686, norm(y): 0.9930, norm:84.6590, tok/sec: 116419.97, flops:45.36, batch-reuse:1
@ 459 train 7.6817 , allloss: 20.9906, dt: 1143.07ms, fracRes: 0.0377, norm(attn): 0.1895, norm(output): 0.0669, norm(x): 0.0652, norm(y): 0.9930, norm:65.6643, tok/sec: 114667.00, flops:44.67, batch-reuse:1
@ 460 train 7.6451 , allloss: 21.1385, dt: 1117.30ms, fracRes: 0.0415, norm(attn): 0.2012, norm(output): 0.0625, norm(x): 0.0619, norm(y): 0.9930, norm:72.3898, tok/sec: 117310.92, flops:45.70, batch-reuse:1
@ 461 train 7.7791 , allloss: 19.8634, dt: 1137.51ms, fracRes: 0.0454, norm(attn): 0.1807, norm(output): 0.0703, norm(x): 0.0675, norm(y): 0.9936, norm:70.9426, tok/sec: 115227.14, flops:44.89, batch-reuse:1
@ 462 train 7.8001 , allloss: 18.9535, dt: 1117.82ms, fracRes: 0.0549, norm(attn): 0.1895, norm(output): 0.0684, norm(x): 0.0661, norm(y): 0.9938, norm:65.7104, tok/sec: 117256.38, flops:45.68, batch-reuse:1
@ 463 train 7.7620 , allloss: 18.2952, dt: 1136.75ms, fracRes: 0.0602, norm(attn): 0.2217, norm(output): 0.0586, norm(x): 0.0582, norm(y): 0.9936, norm:196.2663, tok/sec: 115304.33, flops:44.92, batch-reuse:1
@ 464 train 7.8396 , allloss: 15.8617, dt: 1166.74ms, fracRes: 0.0878, norm(attn): 0.1885, norm(output): 0.0664, norm(x): 0.0633, norm(y): 0.9945, norm:63.7973, tok/sec: 112340.21, flops:43.77, batch-reuse:1
@ 465 train 7.7881 , allloss: 14.5813, dt: 1130.89ms, fracRes: 0.1087, norm(attn): 0.1904, norm(output): 0.0640, norm(x): 0.0613, norm(y): 0.9948, norm:52.0033, tok/sec: 115902.09, flops:45.16, batch-reuse:1
@ 466 train 7.7236 , allloss: 13.7573, dt: 1138.24ms, fracRes: 0.1296, norm(attn): 0.2109, norm(output): 0.0554, norm(x): 0.0534, norm(y): 0.9948, norm:33.7743, tok/sec: 115153.04, flops:44.86, batch-reuse:1
@ 467 train 7.7135 , allloss: 13.1443, dt: 1139.39ms, fracRes: 0.1014, norm(attn): 0.2402, norm(output): 0.0498, norm(x): 0.0480, norm(y): 0.9947, norm:63.2843, tok/sec: 115037.07, flops:44.82, batch-reuse:1
@ 468 train 7.6175 , allloss: 12.2920, dt: 1155.81ms, fracRes: 0.1536, norm(attn): 0.2539, norm(output): 0.0510, norm(x): 0.0498, norm(y): 0.9950, norm:33.5833, tok/sec: 113402.48, flops:44.18, batch-reuse:1
@ 469 train 7.6742 , allloss: 12.1456, dt: 1123.30ms, fracRes: 0.1636, norm(attn): 0.3066, norm(output): 0.0476, norm(x): 0.0469, norm(y): 0.9947, norm:50.9502, tok/sec: 116685.23, flops:45.46, batch-reuse:1
@ 470 train 7.8133 , allloss: 12.0541, dt: 1128.77ms, fracRes: 0.1606, norm(attn): 0.2930, norm(output): 0.0540, norm(x): 0.0517, norm(y): 0.9951, norm:41.3791, tok/sec: 116119.50, flops:45.24, batch-reuse:1
@ 471 train 7.7039 , allloss: 11.8803, dt: 1131.67ms, fracRes: 0.1502, norm(attn): 0.3203, norm(output): 0.0513, norm(x): 0.0497, norm(y): 0.9949, norm:45.6834, tok/sec: 115821.60, flops:45.12, batch-reuse:1
@ 472 train 8.2493 , allloss: 12.9627, dt: 1125.65ms, fracRes: 0.0592, norm(attn): 0.4453, norm(output): 0.0410, norm(x): 0.0407, norm(y): 0.9930, norm:450.7832, tok/sec: 116441.13, flops:45.37, batch-reuse:1
@ 473 train 7.7884 , allloss: 12.4404, dt: 1115.73ms, fracRes: 0.1015, norm(attn): 0.3770, norm(output): 0.0464, norm(x): 0.0442, norm(y): 0.9941, norm:34.9237, tok/sec: 117476.12, flops:45.77, batch-reuse:1
@ 474 train 7.7019 , allloss: 12.5062, dt: 1122.93ms, fracRes: 0.1040, norm(attn): 0.3965, norm(output): 0.0461, norm(x): 0.0438, norm(y): 0.9940, norm:32.7068, tok/sec: 116723.66, flops:45.48, batch-reuse:1
@ 475 train 7.7218 , allloss: 12.5944, dt: 1139.47ms, fracRes: 0.0818, norm(attn): 0.4551, norm(output): 0.0430, norm(x): 0.0418, norm(y): 0.9935, norm:36.5843, tok/sec: 115028.91, flops:44.82, batch-reuse:1
@ 476 train 7.7245 , allloss: 12.6405, dt: 1147.33ms, fracRes: 0.0578, norm(attn): 0.4688, norm(output): 0.0430, norm(x): 0.0419, norm(y): 0.9932, norm:33.9560, tok/sec: 114241.22, flops:44.51, batch-reuse:1
@ 477 train 7.7634 , allloss: 12.6260, dt: 1134.53ms, fracRes: 0.0490, norm(attn): 0.4648, norm(output): 0.0432, norm(x): 0.0421, norm(y): 0.9932, norm:40.3325, tok/sec: 115530.11, flops:45.01, batch-reuse:1
@ 478 train 7.7165 , allloss: 12.6444, dt: 1145.72ms, fracRes: 0.0448, norm(attn): 0.4688, norm(output): 0.0432, norm(x): 0.0422, norm(y): 0.9932, norm:32.8256, tok/sec: 114401.16, flops:44.57, batch-reuse:1
@ 479 train 7.9166 , allloss: 12.8017, dt: 1144.35ms, fracRes: 0.0311, norm(attn): 0.4707, norm(output): 0.0437, norm(x): 0.0430, norm(y): 0.9931, norm:60.0182, tok/sec: 114538.76, flops:44.62, batch-reuse:1
@ 480 train 7.8286 , allloss: 14.3407, dt: 1116.57ms, fracRes: 0.0311, norm(attn): 0.4238, norm(output): 0.0457, norm(x): 0.0436, norm(y): 0.9932, norm:181.4040, tok/sec: 117387.97, flops:45.73, batch-reuse:1
@ 481 train 7.9529 , allloss: 12.4553, dt: 1136.76ms, fracRes: 0.0403, norm(attn): 0.5000, norm(output): 0.0454, norm(x): 0.0439, norm(y): 0.9933, norm:108.2452, tok/sec: 115302.88, flops:44.92, batch-reuse:1
@ 482 train 7.7047 , allloss: 12.7585, dt: 1140.30ms, fracRes: 0.0433, norm(attn): 0.4688, norm(output): 0.0466, norm(x): 0.0448, norm(y): 0.9933, norm:44.4240, tok/sec: 114944.80, flops:44.78, batch-reuse:1
@ 483 train 7.7867 , allloss: 14.9135, dt: 1162.11ms, fracRes: 0.0342, norm(attn): 0.4043, norm(output): 0.0498, norm(x): 0.0470, norm(y): 0.9932, norm:105.3542, tok/sec: 112787.73, flops:43.94, batch-reuse:1
@ 484 train 7.9660 , allloss: 13.2108, dt: 1162.85ms, fracRes: 0.0176, norm(attn): 0.4355, norm(output): 0.0498, norm(x): 0.0483, norm(y): 0.9929, norm:228.4619, tok/sec: 112716.02, flops:43.91, batch-reuse:1
@ 485 train 7.6040 , allloss: 14.0262, dt: 1156.62ms, fracRes: 0.0235, norm(attn): 0.3867, norm(output): 0.0515, norm(x): 0.0498, norm(y): 0.9930, norm:51.7615, tok/sec: 113323.61, flops:44.15, batch-reuse:1
@ 486 train 7.7781 , allloss: 16.9088, dt: 1141.06ms, fracRes: 0.0253, norm(attn): 0.3242, norm(output): 0.0559, norm(x): 0.0528, norm(y): 0.9931, norm:145.4047, tok/sec: 114868.76, flops:44.75, batch-reuse:1
@ 487 train 8.6623 , allloss: 14.1279, dt: 1124.77ms, fracRes: 0.0142, norm(attn): 0.3730, norm(output): 0.0549, norm(x): 0.0532, norm(y): 0.9928, norm:445.6726, tok/sec: 116532.03, flops:45.40, batch-reuse:1
@ 488 train 7.7360 , allloss: 14.2457, dt: 1135.55ms, fracRes: 0.0179, norm(attn): 0.3340, norm(output): 0.0554, norm(x): 0.0538, norm(y): 0.9928, norm:159.9630, tok/sec: 115426.39, flops:44.97, batch-reuse:1
@ 489 train 9.1587 , allloss: 23.6174, dt: 1130.98ms, fracRes: 0.0254, norm(attn): 0.2324, norm(output): 0.0713, norm(x): 0.0651, norm(y): 0.9935, norm:257.8348, tok/sec: 115892.80, flops:45.15, batch-reuse:1
@ 490 train 8.5823 , allloss: 23.4824, dt: 1127.12ms, fracRes: 0.0173, norm(attn): 0.2461, norm(output): 0.0771, norm(x): 0.0700, norm(y): 0.9932, norm:129.1064, tok/sec: 116288.91, flops:45.31, batch-reuse:1
@ 491 train 9.8324 , allloss: 18.1381, dt: 1139.37ms, fracRes: 0.0149, norm(attn): 0.2891, norm(output): 0.0630, norm(x): 0.0585, norm(y): 0.9927, norm:524.1290, tok/sec: 115038.58, flops:44.82, batch-reuse:1
@ 492 train 9.3541 , allloss: 19.2053, dt: 1131.18ms, fracRes: 0.0156, norm(attn): 0.2871, norm(output): 0.0679, norm(x): 0.0602, norm(y): 0.9928, norm:258.0845, tok/sec: 115871.97, flops:45.14, batch-reuse:1
@ 493 train 7.9425 , allloss: 18.0560, dt: 1139.20ms, fracRes: 0.0188, norm(attn): 0.2539, norm(output): 0.0674, norm(x): 0.0632, norm(y): 0.9930, norm:119.2212, tok/sec: 115056.40, flops:44.83, batch-reuse:1
@ 494 train 7.9099 , allloss: 16.6860, dt: 1162.97ms, fracRes: 0.0449, norm(attn): 0.2402, norm(output): 0.0623, norm(x): 0.0595, norm(y): 0.9932, norm:219.7881, tok/sec: 112704.26, flops:43.91, batch-reuse:1
@ 495 train 7.8211 , allloss: 17.8697, dt: 1158.28ms, fracRes: 0.0861, norm(attn): 0.2031, norm(output): 0.0625, norm(x): 0.0609, norm(y): 0.9935, norm:66.9473, tok/sec: 113160.88, flops:44.09, batch-reuse:1
@ 496 train 7.7801 , allloss: 18.5031, dt: 1152.27ms, fracRes: 0.0927, norm(attn): 0.1904, norm(output): 0.0630, norm(x): 0.0608, norm(y): 0.9936, norm:54.8091, tok/sec: 113750.87, flops:44.32, batch-reuse:1
@ 497 train 7.8563 , allloss: 18.5705, dt: 1162.11ms, fracRes: 0.0702, norm(attn): 0.1973, norm(output): 0.0623, norm(x): 0.0591, norm(y): 0.9934, norm:236.4364, tok/sec: 112787.82, flops:43.94, batch-reuse:1
@ 498 train 7.7674 , allloss: 24.9672, dt: 1148.86ms, fracRes: 0.0532, norm(attn): 0.2021, norm(output): 0.0664, norm(x): 0.0641, norm(y): 0.9933, norm:82.9409, tok/sec: 114088.42, flops:44.45, batch-reuse:1
@ 499 train 7.7570 , allloss: 24.2227, dt: 1148.03ms, fracRes: 0.0494, norm(attn): 0.2012, norm(output): 0.0698, norm(x): 0.0669, norm(y): 0.9933, norm:64.1366, tok/sec: 114171.16, flops:44.48, batch-reuse:1
@ 500 train 7.7152 , allloss: 20.3318, dt: 1152.53ms, fracRes: 0.0507, norm(attn): 0.1895, norm(output): 0.0693, norm(x): 0.0659, norm(y): 0.9933, norm:56.5247, tok/sec: 113725.79, flops:44.31, batch-reuse:1
@ 501 train 7.7634 , allloss: 18.8622, dt: 1138.46ms, fracRes: 0.0334, norm(attn): 0.1914, norm(output): 0.0698, norm(x): 0.0663, norm(y): 0.9932, norm:59.2709, tok/sec: 115131.43, flops:44.86, batch-reuse:1
@ 502 train 8.0558 , allloss: 17.2290, dt: 1157.69ms, fracRes: 0.0169, norm(attn): 0.2002, norm(output): 0.0698, norm(x): 0.0655, norm(y): 0.9929, norm:138.7989, tok/sec: 113218.28, flops:44.11, batch-reuse:1
@ 503 train 7.9621 , allloss: 17.6319, dt: 1149.88ms, fracRes: 0.0171, norm(attn): 0.1973, norm(output): 0.0708, norm(x): 0.0670, norm(y): 0.9928, norm:118.2001, tok/sec: 113987.93, flops:44.41, batch-reuse:1
@ 504 train 7.7932 , allloss: 17.6247, dt: 1163.89ms, fracRes: 0.0346, norm(attn): 0.1855, norm(output): 0.0708, norm(x): 0.0680, norm(y): 0.9932, norm:143.2925, tok/sec: 112615.10, flops:43.87, batch-reuse:1
@ 505 train 7.7528 , allloss: 18.5015, dt: 1142.77ms, fracRes: 0.0339, norm(attn): 0.2021, norm(output): 0.0801, norm(x): 0.0755, norm(y): 0.9931, norm:99.5859, tok/sec: 114696.45, flops:44.69, batch-reuse:1
@ 506 train 7.8811 , allloss: 15.8945, dt: 1126.56ms, fracRes: 0.0221, norm(attn): 0.2090, norm(output): 0.0757, norm(x): 0.0708, norm(y): 0.9925, norm:192.4782, tok/sec: 116346.94, flops:45.33, batch-reuse:1
@ 507 train 7.7829 , allloss: 16.1435, dt: 1120.13ms, fracRes: 0.0287, norm(attn): 0.2041, norm(output): 0.0771, norm(x): 0.0714, norm(y): 0.9926, norm:90.8002, tok/sec: 117014.88, flops:45.59, batch-reuse:1
@ 508 train 7.6722 , allloss: 17.4476, dt: 1143.85ms, fracRes: 0.0419, norm(attn): 0.1982, norm(output): 0.0776, norm(x): 0.0728, norm(y): 0.9929, norm:78.7715, tok/sec: 114588.08, flops:44.64, batch-reuse:1
@ 509 train 7.6337 , allloss: 17.1503, dt: 1130.72ms, fracRes: 0.0344, norm(attn): 0.1875, norm(output): 0.0742, norm(x): 0.0700, norm(y): 0.9927, norm:67.8314, tok/sec: 115919.34, flops:45.16, batch-reuse:1
@ 510 train 8.4928 , allloss: 16.3388, dt: 1135.07ms, fracRes: 0.0148, norm(attn): 0.1846, norm(output): 0.0703, norm(x): 0.0660, norm(y): 0.9920, norm:692.2483, tok/sec: 115474.74, flops:44.99, batch-reuse:1
@ 511 train 7.8034 , allloss: 19.1990, dt: 1118.62ms, fracRes: 0.0240, norm(attn): 0.1846, norm(output): 0.0737, norm(x): 0.0698, norm(y): 0.9928, norm:104.9960, tok/sec: 117173.13, flops:45.65, batch-reuse:1
@ 512 train 8.1339 , allloss: 19.8528, dt: 1127.88ms, fracRes: 0.0270, norm(attn): 0.1494, norm(output): 0.0752, norm(x): 0.0708, norm(y): 0.9930, norm:183.8118, tok/sec: 116211.16, flops:45.28, batch-reuse:1
@ 513 train 7.6911 , allloss: 20.7587, dt: 1138.04ms, fracRes: 0.0375, norm(attn): 0.1562, norm(output): 0.0786, norm(x): 0.0735, norm(y): 0.9934, norm:72.7828, tok/sec: 115173.23, flops:44.87, batch-reuse:1
@ 514 train 7.5925 , allloss: 18.9169, dt: 1135.81ms, fracRes: 0.0554, norm(attn): 0.1582, norm(output): 0.0830, norm(x): 0.0769, norm(y): 0.9936, norm:50.6564, tok/sec: 115399.64, flops:44.96, batch-reuse:1
@ 515 train 7.5747 , allloss: 17.4683, dt: 1144.26ms, fracRes: 0.0561, norm(attn): 0.1641, norm(output): 0.0854, norm(x): 0.0787, norm(y): 0.9935, norm:53.7950, tok/sec: 114547.28, flops:44.63, batch-reuse:1
@ 516 train 7.6562 , allloss: 16.8221, dt: 1123.91ms, fracRes: 0.0410, norm(attn): 0.1738, norm(output): 0.0854, norm(x): 0.0785, norm(y): 0.9931, norm:67.4328, tok/sec: 116621.42, flops:45.44, batch-reuse:1
@ 517 train 7.7948 , allloss: 17.2322, dt: 1157.48ms, fracRes: 0.0250, norm(attn): 0.1865, norm(output): 0.0845, norm(x): 0.0774, norm(y): 0.9928, norm:90.3579, tok/sec: 113238.80, flops:44.12, batch-reuse:1
@ 518 train 7.6976 , allloss: 19.2219, dt: 1115.79ms, fracRes: 0.0220, norm(attn): 0.1846, norm(output): 0.0830, norm(x): 0.0772, norm(y): 0.9930, norm:58.6059, tok/sec: 117469.62, flops:45.77, batch-reuse:1
@ 519 train 7.5839 , allloss: 21.0338, dt: 1128.90ms, fracRes: 0.0230, norm(attn): 0.1875, norm(output): 0.0796, norm(x): 0.0760, norm(y): 0.9932, norm:58.8441, tok/sec: 116105.47, flops:45.23, batch-reuse:1
@ 520 train 7.7577 , allloss: 21.5860, dt: 1166.29ms, fracRes: 0.0245, norm(attn): 0.1865, norm(output): 0.0781, norm(x): 0.0740, norm(y): 0.9929, norm:122.5985, tok/sec: 112383.96, flops:43.78, batch-reuse:1
@ 521 train 7.8476 , allloss: 20.9592, dt: 1157.17ms, fracRes: 0.0269, norm(attn): 0.1797, norm(output): 0.0811, norm(x): 0.0771, norm(y): 0.9931, norm:102.9384, tok/sec: 113269.37, flops:44.13, batch-reuse:1
@ 522 train 7.7713 , allloss: 22.2822, dt: 1125.63ms, fracRes: 0.0295, norm(attn): 0.1777, norm(output): 0.0830, norm(x): 0.0781, norm(y): 0.9933, norm:120.4672, tok/sec: 116443.49, flops:45.37, batch-reuse:1
@ 523 train 7.7803 , allloss: 21.0847, dt: 1120.82ms, fracRes: 0.0332, norm(attn): 0.1611, norm(output): 0.0854, norm(x): 0.0799, norm(y): 0.9935, norm:68.6304, tok/sec: 116943.20, flops:45.56, batch-reuse:1
@ 524 train 7.6640 , allloss: 20.6264, dt: 1137.10ms, fracRes: 0.0300, norm(attn): 0.1572, norm(output): 0.0859, norm(x): 0.0798, norm(y): 0.9936, norm:53.2066, tok/sec: 115268.28, flops:44.91, batch-reuse:1
@ 525 train 7.6762 , allloss: 21.1357, dt: 1142.14ms, fracRes: 0.0271, norm(attn): 0.1562, norm(output): 0.0854, norm(x): 0.0791, norm(y): 0.9937, norm:58.0858, tok/sec: 114760.45, flops:44.71, batch-reuse:1
@ 526 train 7.6151 , allloss: 21.3580, dt: 1143.17ms, fracRes: 0.0334, norm(attn): 0.1494, norm(output): 0.0840, norm(x): 0.0784, norm(y): 0.9942, norm:40.4911, tok/sec: 114656.67, flops:44.67, batch-reuse:1
@ 527 train 7.6405 , allloss: 20.5065, dt: 1145.42ms, fracRes: 0.0365, norm(attn): 0.1455, norm(output): 0.0811, norm(x): 0.0767, norm(y): 0.9946, norm:38.6764, tok/sec: 114431.83, flops:44.58, batch-reuse:1
@ 528 train 7.6584 , allloss: 20.3585, dt: 1146.39ms, fracRes: 0.0379, norm(attn): 0.1533, norm(output): 0.0781, norm(x): 0.0739, norm(y): 0.9949, norm:38.5688, tok/sec: 114334.07, flops:44.54, batch-reuse:1
@ 529 train 7.5757 , allloss: 19.6483, dt: 1130.55ms, fracRes: 0.0326, norm(attn): 0.1699, norm(output): 0.0752, norm(x): 0.0706, norm(y): 0.9952, norm:34.4536, tok/sec: 115936.57, flops:45.17, batch-reuse:1
@ 530 train 7.6600 , allloss: 19.1255, dt: 1127.33ms, fracRes: 0.0279, norm(attn): 0.1953, norm(output): 0.0728, norm(x): 0.0686, norm(y): 0.9954, norm:33.2206, tok/sec: 116267.95, flops:45.30, batch-reuse:1
@ 531 train 7.6755 , allloss: 18.4239, dt: 1142.25ms, fracRes: 0.0248, norm(attn): 0.2148, norm(output): 0.0708, norm(x): 0.0674, norm(y): 0.9955, norm:34.0465, tok/sec: 114748.98, flops:44.71, batch-reuse:1
@ 532 train 7.5563 , allloss: 18.0250, dt: 1127.25ms, fracRes: 0.0210, norm(attn): 0.2227, norm(output): 0.0703, norm(x): 0.0668, norm(y): 0.9953, norm:34.9075, tok/sec: 116275.50, flops:45.30, batch-reuse:1
@ 533 train 7.6040 , allloss: 18.2519, dt: 1121.22ms, fracRes: 0.0180, norm(attn): 0.2256, norm(output): 0.0688, norm(x): 0.0659, norm(y): 0.9951, norm:39.6992, tok/sec: 116901.27, flops:45.54, batch-reuse:1
@ 534 train 7.5603 , allloss: 18.9549, dt: 1116.70ms, fracRes: 0.0166, norm(attn): 0.2305, norm(output): 0.0732, norm(x): 0.0711, norm(y): 0.9950, norm:41.5229, tok/sec: 117374.74, flops:45.73, batch-reuse:1
@ 535 train 7.6379 , allloss: 19.2910, dt: 1120.56ms, fracRes: 0.0142, norm(attn): 0.2412, norm(output): 0.0747, norm(x): 0.0724, norm(y): 0.9950, norm:41.6990, tok/sec: 116969.72, flops:45.57, batch-reuse:1
@ 536 train 7.6636 , allloss: 18.4743, dt: 1125.43ms, fracRes: 0.0130, norm(attn): 0.2441, norm(output): 0.0703, norm(x): 0.0687, norm(y): 0.9952, norm:100.5627, tok/sec: 116463.99, flops:45.37, batch-reuse:1
@ 537 train 7.7703 , allloss: 17.1574, dt: 1126.78ms, fracRes: 0.0148, norm(attn): 0.2305, norm(output): 0.0791, norm(x): 0.0759, norm(y): 0.9955, norm:47.6216, tok/sec: 116324.29, flops:45.32, batch-reuse:1
@ 538 train 7.5922 , allloss: 16.0432, dt: 1144.27ms, fracRes: 0.0156, norm(attn): 0.2344, norm(output): 0.0786, norm(x): 0.0754, norm(y): 0.9957, norm:39.9343, tok/sec: 114546.80, flops:44.63, batch-reuse:1
@ 539 train 7.6305 , allloss: 15.7020, dt: 1109.96ms, fracRes: 0.0144, norm(attn): 0.2461, norm(output): 0.0742, norm(x): 0.0711, norm(y): 0.9958, norm:36.9773, tok/sec: 118086.83, flops:46.01, batch-reuse:1
@ 540 train 7.6894 , allloss: 14.5434, dt: 1119.54ms, fracRes: 0.0166, norm(attn): 0.2480, norm(output): 0.0703, norm(x): 0.0673, norm(y): 0.9959, norm:49.3027, tok/sec: 117076.81, flops:45.61, batch-reuse:1
@ 541 train 7.5702 , allloss: 12.4016, dt: 1126.61ms, fracRes: 0.0353, norm(attn): 0.3281, norm(output): 0.0654, norm(x): 0.0613, norm(y): 0.9962, norm:48.0787, tok/sec: 116341.47, flops:45.33, batch-reuse:1
@ 542 train 7.7573 , allloss: 12.1469, dt: 1143.60ms, fracRes: 0.0425, norm(attn): 0.3770, norm(output): 0.0630, norm(x): 0.0589, norm(y): 0.9960, norm:58.6867, tok/sec: 114613.12, flops:44.65, batch-reuse:1
@ 543 train 7.9329 , allloss: 12.1405, dt: 1155.43ms, fracRes: 0.0308, norm(attn): 0.4219, norm(output): 0.0569, norm(x): 0.0530, norm(y): 0.9955, norm:64.7707, tok/sec: 113440.10, flops:44.20, batch-reuse:1
@ 544 train 7.7106 , allloss: 12.4657, dt: 1145.25ms, fracRes: 0.0261, norm(attn): 0.4355, norm(output): 0.0498, norm(x): 0.0464, norm(y): 0.9950, norm:52.2615, tok/sec: 114448.77, flops:44.59, batch-reuse:1
@ 545 train 7.6834 , allloss: 13.1346, dt: 1151.57ms, fracRes: 0.0184, norm(attn): 0.3730, norm(output): 0.0562, norm(x): 0.0523, norm(y): 0.9950, norm:67.2586, tok/sec: 113820.25, flops:44.34, batch-reuse:1
@ 546 train 7.5725 , allloss: 12.7961, dt: 1139.14ms, fracRes: 0.0142, norm(attn): 0.3750, norm(output): 0.0540, norm(x): 0.0504, norm(y): 0.9947, norm:51.9075, tok/sec: 115062.18, flops:44.83, batch-reuse:1
@ 547 train 7.7397 , allloss: 13.6165, dt: 1123.83ms, fracRes: 0.0114, norm(attn): 0.3867, norm(output): 0.0471, norm(x): 0.0451, norm(y): 0.9940, norm:37.6109, tok/sec: 116629.93, flops:45.44, batch-reuse:1
@ 548 train 7.8311 , allloss: 14.6289, dt: 1130.46ms, fracRes: 0.0098, norm(attn): 0.3730, norm(output): 0.0464, norm(x): 0.0434, norm(y): 0.9933, norm:106.2358, tok/sec: 115945.94, flops:45.17, batch-reuse:1
@ 549 train 7.9890 , allloss: 13.4657, dt: 1120.84ms, fracRes: 0.0097, norm(attn): 0.3730, norm(output): 0.0474, norm(x): 0.0454, norm(y): 0.9936, norm:99.0490, tok/sec: 116940.36, flops:45.56, batch-reuse:1
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6016, 0.3965, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2812, 0.5273, 0.1904, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2832, 0.2217, 0.2285, 0.2676, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2754, 0.0674, 0.3320, 0.2969, 0.0281, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2539, 0.0608, 0.4297, 0.1768, 0.0292, 0.0488, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2324, 0.0801, 0.2559, 0.2422, 0.0259, 0.0605, 0.1016, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0703, 0.1445, 0.0791, 0.0752, 0.2344, 0.3125, 0.0498, 0.0332, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0835, 0.0175, 0.1016, 0.0659, 0.0052, 0.0074, 0.0400, 0.6758, 0.0016, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1011, 0.0869, 0.0776, 0.1001, 0.1357, 0.1045, 0.1094, 0.1128, 0.0825, 0.0894, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0815, 0.0237, 0.0884, 0.0562, 0.0049, 0.0104, 0.0820, 0.6211, 0.0049, 0.0184, 0.0072, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0571, 0.0732, 0.0464, 0.0466, 0.0781, 0.1641, 0.0513, 0.0591, 0.1069, 0.0977, 0.0972, 0.1216, 0.0000, 0.0000, 0.0000],
        [0.0518, 0.0928, 0.0884, 0.0474, 0.0933, 0.1367, 0.0466, 0.0364, 0.1533, 0.0554, 0.1147, 0.0405, 0.0435, 0.0000, 0.0000],
        [0.0723, 0.0270, 0.0918, 0.0664, 0.0087, 0.0094, 0.0801, 0.3867, 0.0021, 0.0554, 0.0092, 0.0459, 0.1426, 0.0030, 0.0000],
        [0.0669, 0.0840, 0.0645, 0.0571, 0.0859, 0.0791, 0.0635, 0.0669, 0.0674, 0.0640, 0.0635, 0.0420, 0.0508, 0.0437, 0.1006]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0081,  0.0131, -0.0182,  ...,  0.0003, -0.0094, -0.0199],
        [ 0.0154, -0.0014, -0.0048,  ...,  0.0058, -0.0327,  0.0067],
        [-0.0510,  0.0040,  0.0047,  ...,  0.0041,  0.0018,  0.0071],
        ...,
        [ 0.0041,  0.0094,  0.0199,  ..., -0.0107, -0.0275, -0.0170],
        [-0.0150,  0.0031,  0.0719,  ..., -0.0091,  0.0159,  0.0002],
        [ 0.0140,  0.0234,  0.0201,  ...,  0.0247, -0.0263,  0.0170]], device='cuda:0', requires_grad=True)
K: tensor([-0.4062,  0.3125, -0.0299,  0.7188,  0.3691, -0.1660, -0.0693, -0.6641, -0.1108,  0.5547, -1.0625,  0.9727, -0.3242,  0.2158,  0.7422, -0.4883, -0.0547,  0.3203,  0.8164, -0.1445,  0.0879, -0.5742,  0.5430,  0.7539,  0.4395, -0.8672,  0.2852,  0.9023, -0.1826,  0.6367, -0.3066,  0.4570,
         0.6719,  0.3438, -0.0811, -0.2617,  0.0981, -1.0234, -0.5898,  0.0583,  0.1055,  0.2041,  0.4883, -0.4258,  0.3945,  0.0747, -0.8438,  0.0293, -0.5547,  0.0879,  0.2637, -0.0225,  0.9453, -0.2021,  1.2031,  0.2256,  0.3125, -0.3770,  0.1289,  0.8398, -0.8750,  0.3848,  0.0181, -1.0781],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0008, -0.0314, -0.0037,  ...,  0.0270,  0.0140,  0.0140],
        [-0.0058,  0.0020,  0.0288,  ..., -0.0111,  0.0151, -0.0272],
        [-0.0449, -0.0133,  0.0487,  ...,  0.0131,  0.0009,  0.0136],
        ...,
        [ 0.0073,  0.0061, -0.0113,  ..., -0.0181, -0.0110,  0.0276],
        [-0.0188, -0.0135,  0.0038,  ...,  0.0026, -0.0047,  0.0311],
        [-0.0237, -0.0047,  0.0149,  ...,  0.0058,  0.0154, -0.0210]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.5898, -0.0332, -0.1543,  0.5195,  1.3750,  0.5508,  0.3145, -0.4648, -0.4121,  0.0854,  0.0361,  0.2295,  0.3066,  0.8242, -0.0121, -0.3242, -0.0620, -0.0610,  0.0938, -0.5039,  0.1348,  0.5312,  1.3438,  0.0771,  0.4746,  0.5273, -0.0603, -0.2988, -0.5391,  0.2969,  0.5469,  0.8594,
        -0.0825, -0.0065, -0.1250,  0.0415,  0.6523, -1.0078, -0.0466,  0.6562,  0.4082,  0.2637, -0.3301,  1.1016, -0.3145,  0.2305, -0.2217,  0.4043,  0.4492,  0.2490,  0.3691, -0.2441,  0.2637, -0.1396,  0.1914, -0.4355, -0.9102,  0.5352,  0.5547,  0.8359, -0.9297, -0.8281, -0.5742,  0.3965],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.4160, -0.1787,  0.1279, -0.1465, -0.5117,  0.3750,  0.2217, -0.6523, -0.2930,  0.2539,  0.3672,  0.4004, -1.0000,  0.1592],
        [ 0.0000,  0.6289, -0.3926,  0.3691,  0.5859,  1.2578, -0.1582, -0.5625,  0.9766,  0.7969,  1.7422,  0.1680, -0.9102,  1.0234,  0.3574],
        [ 0.0000, -0.2480, -0.2168, -0.0618, -0.4082, -0.5430, -0.5078,  0.5820, -0.6797,  0.3223, -0.0131,  0.0417,  0.2578, -0.4043, -0.0250],
        [ 0.0000, -1.4062,  0.1875,  0.0771, -2.2812, -1.7891,  0.1328,  1.3594, -2.2969, -0.8477, -1.7031, -0.2305,  0.5547, -2.5156,  0.3008],
        [ 0.0000, -1.4297,  0.5273, -0.3613, -2.1719, -1.6484, -0.7266,  1.8125, -2.7344, -0.4199, -2.4688, -0.2490, -0.0669, -2.7188, -0.7500],
        [ 0.0000, -1.0625,  0.0967,  0.0417, -2.2031, -1.3516, -0.8281,  1.8516, -2.4375, -0.7695, -1.6484, -0.3242,  0.4238, -2.3594, -0.3184],
        [ 0.0000,  0.7266,  0.1221,  0.0728,  1.2031,  1.5000, -0.3418, -0.7500,  1.8125,  0.2158,  1.7109,  0.4922,  0.0056,  2.0469, -0.1050],
        [ 0.0000, -1.5625,  0.1943, -0.2334, -2.7812, -2.4219, -0.7344,  2.0938, -3.9688, -0.3809, -2.7344,  0.3281,  0.8242, -3.8906,  0.0344],
        [ 0.0000, -0.1514, -0.2637, -0.0118,  0.2930,  0.0349,  0.0801,  0.1108, -0.2002, -0.1216,  0.1279, -0.3711,  0.1387, -0.0439, -0.3320],
        [ 0.0000, -1.2344,  0.0835, -0.3691, -2.8125, -2.0469,  0.0083,  2.0312, -2.8125, -1.4844, -2.4219, -0.0267,  0.6211, -3.2656, -0.3359],
        [ 0.0000,  0.2471, -0.2070, -0.2031,  0.3145,  1.0547, -0.1074,  0.0342,  0.6250,  0.5352,  0.5273,  0.7578,  0.0537,  0.4238,  0.5391],
        [ 0.0000,  0.5820,  0.5352, -0.0869,  0.5898,  0.9727, -0.1055, -0.3516,  1.0859,  0.0688,  0.7969, -0.2422, -0.1729,  1.0000, -0.3867],
        [ 0.0000, -0.9805,  0.2441, -0.0845, -2.1094, -2.0312,  0.1055,  1.6797, -3.5469, -0.2637, -2.0625, -0.4492,  0.6797, -3.1875, -0.0364],
        [ 0.0000,  0.2275, -0.0352, -0.1611,  0.2471,  0.1689, -0.0520, -0.0043,  0.0083, -0.0474, -0.0574, -0.4648, -0.2754, -0.4277,  0.4043]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.6519],
        [0.3124],
        [0.2703],
        [0.2773],
        [0.2686],
        [0.2104],
        [0.0674],
        [0.1044],
        [0.1155],
        [0.0909],
        [0.0625],
        [0.0486],
        [0.0701],
        [0.0701]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4707, 0.5312, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2793, 0.6094, 0.1104, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2852, 0.3516, 0.1543, 0.2090, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2539, 0.1650, 0.2373, 0.1318, 0.2119, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0723, 0.1216, 0.0327, 0.0452, 0.7109, 0.0184, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0505, 0.0801, 0.0315, 0.0454, 0.7422, 0.0294, 0.0215, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1572, 0.1035, 0.1104, 0.0786, 0.3145, 0.0942, 0.0649, 0.0762, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1279, 0.0996, 0.0503, 0.0859, 0.3672, 0.0571, 0.0500, 0.0957, 0.0659, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0981, 0.0903, 0.0913, 0.0933, 0.0957, 0.1504, 0.0923, 0.0962, 0.1113, 0.0811, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0513, 0.1191, 0.0292, 0.0396, 0.3867, 0.0179, 0.0317, 0.1074, 0.0449, 0.1084, 0.0630, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0698, 0.1050, 0.0491, 0.0576, 0.1943, 0.0630, 0.0786, 0.0674, 0.1055, 0.0908, 0.0781, 0.0400, 0.0000, 0.0000, 0.0000],
        [0.0645, 0.0981, 0.0510, 0.1064, 0.0972, 0.0723, 0.0820, 0.0854, 0.0840, 0.0889, 0.0815, 0.0562, 0.0310, 0.0000, 0.0000],
        [0.0630, 0.1328, 0.0356, 0.0320, 0.1680, 0.0253, 0.0339, 0.0588, 0.0369, 0.0923, 0.0574, 0.0513, 0.1445, 0.0693, 0.0000],
        [0.0237, 0.0762, 0.0083, 0.0119, 0.6016, 0.0111, 0.0129, 0.0262, 0.0327, 0.0383, 0.0393, 0.0114, 0.0537, 0.0483, 0.0044]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0081,  0.0131, -0.0182,  ...,  0.0003, -0.0094, -0.0199],
        [ 0.0154, -0.0014, -0.0048,  ...,  0.0058, -0.0327,  0.0067],
        [-0.0510,  0.0040,  0.0047,  ...,  0.0041,  0.0018,  0.0071],
        ...,
        [ 0.0041,  0.0094,  0.0199,  ..., -0.0107, -0.0275, -0.0170],
        [-0.0150,  0.0031,  0.0719,  ..., -0.0091,  0.0159,  0.0002],
        [ 0.0140,  0.0234,  0.0201,  ...,  0.0247, -0.0263,  0.0170]], device='cuda:0', requires_grad=True)
K: tensor([-1.2031,  0.1523,  0.2773,  0.6836,  0.2773, -0.2207,  0.7461, -0.9883,  0.4492, -0.5586, -0.3672,  1.3906, -0.0525, -0.0928,  0.6406, -0.6758, -0.8047,  0.1953, -0.1475, -0.5469,  0.5586, -0.6445, -0.0879,  0.3848, -0.0270,  0.7812,  1.3438, -0.1982,  0.7539, -0.7266, -0.3770,  0.8359,
        -0.5234, -0.7812, -0.4102, -0.7109, -0.1055, -0.2910, -0.6328, -0.2754,  0.3359,  0.5195, -0.0684,  0.0649, -0.0525,  0.8164,  0.6289, -0.1138,  0.7422,  1.1094, -0.2354,  0.2197, -0.3184,  1.5703,  0.3457,  0.2988,  0.6758, -0.4922,  0.0742,  1.9453, -0.3672,  1.5703,  0.4512, -2.0000],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0008, -0.0314, -0.0037,  ...,  0.0270,  0.0140,  0.0140],
        [-0.0058,  0.0020,  0.0288,  ..., -0.0111,  0.0151, -0.0272],
        [-0.0449, -0.0133,  0.0487,  ...,  0.0131,  0.0009,  0.0136],
        ...,
        [ 0.0073,  0.0061, -0.0113,  ..., -0.0181, -0.0110,  0.0276],
        [-0.0188, -0.0135,  0.0038,  ...,  0.0026, -0.0047,  0.0311],
        [-0.0237, -0.0047,  0.0149,  ...,  0.0058,  0.0154, -0.0210]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.0767,  0.1260,  1.4062, -0.9141,  0.9023,  0.9883, -0.9102, -0.4062, -0.4785, -0.3477, -1.1562, -1.2578,  1.6641, -0.5000, -1.0469, -1.2266, -0.4902, -0.7305,  0.9727, -0.6523,  0.3965,  1.2266, -0.1455, -0.5508,  1.3438, -0.7969, -0.5273,  0.2578,  0.3945,  0.5820, -1.1641, -1.4844,
         1.3984,  0.4102, -0.4805,  1.2031,  0.2100,  0.0830, -0.3223,  1.2812, -0.6133, -1.0312, -1.2031,  0.0148,  0.9570, -0.1963, -0.9297,  1.1094,  0.1069, -1.0547,  0.7188,  2.2344,  0.4238, -0.9062,  0.3809, -0.1768, -1.7266,  1.5547,  0.0500, -0.6602, -0.1436, -0.4277, -0.8086, -0.4570],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,      0.1196,      0.1123,     -0.0874,      1.4453,     -0.2236,     -0.3867,     -0.0003,      0.2383,      0.6680,      0.2559,     -0.1445,      0.7227,      0.4570,      0.1592],
        [     0.0000,      0.7773,     -0.9297,     -0.5156,      1.3203,     -0.5156,     -0.1270,     -0.2178,      0.0679,      0.4902,      0.2969,     -0.4570,      0.5664,      0.1367,     -0.7422],
        [     0.0000,      0.2080,     -0.6172,     -0.3105,      2.1875,     -0.2441,     -0.2412,      0.2246,      0.3984,      0.6055,      0.1299,     -0.4902,      0.4805,      0.4961,     -1.0781],
        [     0.0000,     -0.4355,     -0.0698,     -0.6602,     -0.1846,     -0.6758,     -0.3066,     -0.3867,     -0.6094,      0.5820,     -0.1885,     -0.4160,      1.0547,     -0.2656,     -0.2754],
        [     0.0000,      0.5195,     -0.7930,     -0.4727,      2.2812,     -1.3672,     -0.8516,      0.4316,     -0.1182,      0.2188,      0.2656,     -0.4746,      0.3027,      0.3711,     -1.3281],
        [     0.0000,      0.4648,     -0.4707,     -0.1050,      2.6875,     -0.5391,     -0.8555,      1.0703,      0.6562,      0.9414,      0.6797,     -0.0986,      0.7266,      0.9336,     -0.5117],
        [     0.0000,     -0.4180,     -0.3516,     -0.6953,      0.6953,     -0.5078,     -0.8789,     -0.7227,     -0.5625,      0.3809,     -0.3516,     -0.2129,      1.3359,      0.0309,     -0.5430],
        [     0.0000,     -0.2490,     -0.9297,     -0.3926,      1.0625,     -0.8047,     -0.9336,     -0.2871,     -0.6602,      0.2314,      0.1904,     -0.6133,      0.5117,     -0.0542,     -1.1094],
        [     0.0000,     -0.0825,     -0.0762,     -0.0530,     -0.0254,      0.4238,     -0.0659,     -0.0249,      0.1235,     -0.1943,     -0.1738,     -0.2793,      0.2598,      0.1572,     -0.1348],
        [     0.0000,      0.8438,     -0.5625,     -0.2598,      2.0156,     -1.0547,     -0.4785,      0.7383,     -0.1309,      0.7461,      0.2090,     -0.6602,      0.8555,      0.2637,     -1.3203],
        [     0.0000,      0.4102,     -0.3535,     -0.1904,      1.0234,     -0.0991,      0.1196,     -0.0381,      0.4141,      0.2637,      0.1143,     -0.5547,      0.0923,      0.4648,     -0.7266],
        [     0.0000,      0.4199,     -0.2363,      0.4980,      0.4102,      0.1138,      0.2412,      0.2832,      0.2656,      0.3203,      0.2334,     -0.1387,     -0.7344,     -0.0732,      0.3027],
        [     0.0000,      0.7539,     -0.5664,     -0.6758,      0.9844,     -0.9102,     -0.6172,     -0.0659,     -0.5312,      0.3828,     -0.0913,     -0.2002,      0.8320,      0.0967,     -0.9883],
        [     0.0000,      1.1719,     -1.0469,     -0.6914,      3.2344,     -0.7617,     -0.6133,      0.0991,      0.3203,      0.4805,      0.5078,     -0.7344,      0.8203,      0.7109,     -1.6797]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5881],
        [0.2730],
        [0.2435],
        [0.3204],
        [0.1568],
        [0.1451],
        [0.1324],
        [0.1458],
        [0.1557],
        [0.1120],
        [0.0547],
        [0.0764],
        [0.0995],
        [0.0460]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.8047, 0.1943, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6992, 0.2324, 0.0693, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6133, 0.1504, 0.1196, 0.1177, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4902, 0.1357, 0.0981, 0.0693, 0.2070, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4766, 0.1206, 0.0669, 0.0820, 0.2324, 0.0212, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3672, 0.0493, 0.1118, 0.1050, 0.3223, 0.0179, 0.0266, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3750, 0.0669, 0.0723, 0.0508, 0.2080, 0.0222, 0.0386, 0.1670, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4180, 0.0684, 0.0403, 0.0608, 0.1553, 0.0173, 0.0327, 0.1914, 0.0165, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1348, 0.0464, 0.1050, 0.0527, 0.1455, 0.0498, 0.0415, 0.0908, 0.0454, 0.2871, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1348, 0.0427, 0.0214, 0.0247, 0.0645, 0.0072, 0.0164, 0.0654, 0.0077, 0.6055, 0.0104, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1157, 0.0303, 0.0352, 0.0231, 0.0825, 0.0144, 0.0243, 0.0645, 0.0233, 0.4023, 0.0199, 0.1641, 0.0000, 0.0000, 0.0000],
        [0.0742, 0.0280, 0.0288, 0.0193, 0.0649, 0.0092, 0.0186, 0.0483, 0.0125, 0.2598, 0.0150, 0.1484, 0.2734, 0.0000, 0.0000],
        [0.0811, 0.0315, 0.0189, 0.0145, 0.0476, 0.0092, 0.0134, 0.0417, 0.0074, 0.3125, 0.0099, 0.1309, 0.2715, 0.0109, 0.0000],
        [0.0732, 0.0151, 0.0107, 0.0094, 0.0398, 0.0033, 0.0062, 0.0332, 0.0039, 0.3574, 0.0057, 0.1299, 0.2852, 0.0070, 0.0186]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0081,  0.0131, -0.0182,  ...,  0.0003, -0.0094, -0.0199],
        [ 0.0154, -0.0014, -0.0048,  ...,  0.0058, -0.0327,  0.0067],
        [-0.0510,  0.0040,  0.0047,  ...,  0.0041,  0.0018,  0.0071],
        ...,
        [ 0.0041,  0.0094,  0.0199,  ..., -0.0107, -0.0275, -0.0170],
        [-0.0150,  0.0031,  0.0719,  ..., -0.0091,  0.0159,  0.0002],
        [ 0.0140,  0.0234,  0.0201,  ...,  0.0247, -0.0263,  0.0170]], device='cuda:0', requires_grad=True)
K: tensor([    -0.8203,      0.2344,     -0.0010,      0.9609,      0.3320,     -1.1641,      1.3359,     -0.8320,      0.3789,     -0.3750,      0.0586,      0.5508,      0.4375,     -0.7695,      0.9375,      0.2734,     -1.1016,     -0.3418,     -0.4453,     -0.5977,     -0.5039,      0.1079,
             0.1758,     -0.4531,     -0.3926,      1.0391,      1.0234,     -0.5859,      0.3008,     -0.7109,     -0.1699,      1.2578,     -0.2656,     -0.6992,     -0.7617,     -0.3965,      0.0649,      0.2285,     -0.1299,     -0.5586,      0.1631,     -0.0522,      0.8594,     -0.0177,
             0.0267,      0.4062,      0.2236,     -0.5547,      0.8281,      0.5977,      0.6797,     -0.5781,     -0.7344,      0.6836,     -0.2617,      0.5625,      0.1846,     -0.1211,     -0.3555,      0.7148,     -0.7734,      0.5547,      0.0225,     -1.2578], device='cuda:0',
       dtype=torch.bfloat16)
Qweights
tensor([[-0.0008, -0.0314, -0.0037,  ...,  0.0270,  0.0140,  0.0140],
        [-0.0058,  0.0020,  0.0288,  ..., -0.0111,  0.0151, -0.0272],
        [-0.0449, -0.0133,  0.0487,  ...,  0.0131,  0.0009,  0.0136],
        ...,
        [ 0.0073,  0.0061, -0.0113,  ..., -0.0181, -0.0110,  0.0276],
        [-0.0188, -0.0135,  0.0038,  ...,  0.0026, -0.0047,  0.0311],
        [-0.0237, -0.0047,  0.0149,  ...,  0.0058,  0.0154, -0.0210]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.1143, -0.8008,  0.8984, -0.6133,  0.9844,  0.7969, -1.6484,  0.3555,  0.5078, -0.4141, -1.4766, -0.9258,  2.0312,  0.0703, -0.3711, -1.0000, -0.9531, -0.6992,  1.6484, -0.4707,  0.6758,  0.6094, -0.6406, -0.7891,  1.2891, -1.6328, -0.5156,  1.0156,  0.8164,  0.1963, -0.4902, -0.7109,
         1.1016,  0.3398, -0.6172,  1.8984, -0.0996,  0.9844, -1.2656,  0.7227, -0.8594, -1.0469, -1.2812, -0.8516,  1.1641, -0.9180, -0.4258,  0.4473,  0.1650, -0.5781,  1.1562,  1.9453,  0.1807, -1.0625, -0.3984, -0.4902, -1.6406,  0.4023,  0.2891, -1.0703, -0.9336, -0.1455, -1.7969, -0.9062],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -1.4219, -0.6445, -0.6211,  0.1270, -1.8281, -1.4375,  0.1484, -1.3438,  1.9297, -1.2969,  1.2656,  1.4688, -1.1406, -0.2812],
        [ 0.0000, -1.1016, -2.3125, -2.1250, -0.8242, -2.6875, -1.7500, -0.6797, -2.5781,  1.8828, -2.7656,  0.3887,  1.1797, -2.4062, -1.1250],
        [ 0.0000, -1.4062, -1.6328, -1.6484, -0.6680, -2.3438, -1.7656, -0.5469, -2.1875,  1.7500, -2.5000,  0.4160,  0.9062, -2.0000, -0.8828],
        [ 0.0000, -1.2812, -1.6094, -1.9609, -0.8594, -2.4844, -1.8359, -0.8359, -2.4531,  1.0234, -2.4062,  0.2285,  0.9648, -2.3281, -1.0859],
        [ 0.0000, -1.3750, -1.9609, -1.7656, -0.7188, -3.1094, -2.2812, -0.5547, -2.9531,  2.0312, -2.6562,  0.5820,  1.1172, -2.6719, -1.1328],
        [ 0.0000, -2.0156, -1.1875, -1.2500, -0.1299, -3.0156, -2.6250, -0.2275, -2.4062,  2.1875, -1.9766,  1.1406,  1.3906, -1.8750, -0.8438],
        [ 0.0000, -1.7266, -1.6406, -2.0000, -0.5898, -2.8281, -2.2656, -0.8047, -2.5156,  1.6328, -2.4531,  0.5117,  1.2500, -2.0781, -1.2344],
        [ 0.0000, -1.8047, -2.3281, -1.9219, -0.9922, -3.1719, -2.5469, -0.7812, -3.2344,  1.7969, -2.9844,  0.3770,  0.7227, -2.8281, -1.5547],
        [ 0.0000, -1.0625, -0.2500, -0.9414,  0.0737, -0.9961, -1.1797, -0.3965, -1.0859,  0.7578, -0.8359,  0.2734,  1.1328, -0.5156, -0.0496],
        [ 0.0000, -1.1562, -1.8438, -1.7031, -0.7422, -2.9375, -2.1094, -0.7305, -2.8594,  1.5000, -2.5625,  0.5195,  1.0703, -2.5781, -1.1719],
        [ 0.0000, -1.3438, -1.1953, -1.6172, -0.3379, -2.0781, -1.5625, -0.5820, -1.6016,  1.2500, -1.7656,  0.3457,  1.0391, -1.3516, -0.7578],
        [ 0.0000, -0.9766, -0.9414, -1.3438, -0.1279, -2.0938, -1.3828, -0.4258, -1.7812,  1.2500, -1.5938,  0.6992,  1.3047, -1.3203, -0.4258],
        [ 0.0000, -0.9492, -1.4531, -1.7266, -0.5273, -2.1719, -1.7969, -0.6602, -2.3906,  1.3438, -2.0938,  0.4766,  1.2109, -2.0156, -0.8203],
        [ 0.0000, -1.5781, -1.9219, -2.0469, -0.6133, -3.1094, -2.4688, -0.7930, -2.9375,  1.5859, -2.5625,  0.5742,  1.3594, -2.3594, -1.3750]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5556],
        [0.4802],
        [0.3803],
        [0.3848],
        [0.2528],
        [0.2371],
        [0.2460],
        [0.2071],
        [0.1503],
        [0.0925],
        [0.1169],
        [0.1145],
        [0.0753],
        [0.0739]], device='cuda:0')
tensor([[    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.6016,     0.3984,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.2930,     0.5469,     0.1602,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.2090,     0.4277,     0.2246,     0.1387,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0286,     0.9102,     0.0471,     0.0136,     0.0005,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.1035,     0.6680,     0.1318,     0.0591,     0.0089,     0.0298,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0659,     0.6719,     0.1582,     0.0603,     0.0077,     0.0298,     0.0055,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0245,     0.9062,     0.0488,     0.0136,     0.0005,     0.0039,     0.0004,     0.0002,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0332,     0.9102,     0.0403,     0.0122,     0.0005,     0.0036,     0.0005,     0.0003,     0.0009,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0220,     0.8945,     0.0608,     0.0166,     0.0006,     0.0048,     0.0005,     0.0003,     0.0012,     0.0001,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0278,     0.8828,     0.0615,     0.0177,     0.0007,     0.0054,     0.0006,     0.0004,     0.0014,     0.0002,     0.0003,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0267,     0.8633,     0.0771,     0.0222,     0.0010,     0.0072,     0.0007,     0.0005,     0.0019,     0.0002,     0.0004,     0.0002,     0.0000,     0.0000,     0.0000],
        [    0.0288,     0.8516,     0.0825,     0.0242,     0.0012,     0.0081,     0.0009,     0.0006,     0.0022,     0.0003,     0.0005,     0.0002,     0.0003,     0.0000,     0.0000],
        [    0.0221,     0.9062,     0.0505,     0.0135,     0.0005,     0.0039,     0.0004,     0.0002,     0.0010,     0.0001,     0.0002,     0.0001,     0.0001,     0.0001,     0.0000],
        [    0.0388,     0.7852,     0.1113,     0.0359,     0.0024,     0.0138,     0.0018,     0.0013,     0.0044,     0.0006,     0.0011,     0.0006,     0.0007,     0.0007,     0.0009]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0081,  0.0131, -0.0182,  ...,  0.0003, -0.0094, -0.0199],
        [ 0.0154, -0.0014, -0.0048,  ...,  0.0058, -0.0327,  0.0067],
        [-0.0510,  0.0040,  0.0047,  ...,  0.0041,  0.0018,  0.0071],
        ...,
        [ 0.0041,  0.0094,  0.0199,  ..., -0.0107, -0.0275, -0.0170],
        [-0.0150,  0.0031,  0.0719,  ..., -0.0091,  0.0159,  0.0002],
        [ 0.0140,  0.0234,  0.0201,  ...,  0.0247, -0.0263,  0.0170]], device='cuda:0', requires_grad=True)
K: tensor([-0.1128, -0.8516,  1.1641, -0.9180,  0.3867, -0.8906, -0.2539,  1.4609, -0.4395,  0.6133, -1.7969, -1.8047,  1.0469, -1.2422,  0.5586,  0.3320, -1.7578, -1.2422, -0.9531, -1.3672,  0.6250,  1.8594,  0.2100, -0.7109,  2.1094, -0.5195, -0.9023,  1.3125,  1.3203, -0.2207, -0.8438, -0.9453,
         1.6406,  0.1807, -0.3672,  0.9180,  0.0320,  0.7969, -1.3281,  1.0391, -0.8320, -0.5273,  0.4512, -1.2656,  1.1328, -1.8281, -1.4609,  1.3281,  0.1621, -1.0938,  1.7812,  1.4531,  1.6953, -1.7969,  0.3125,  0.8984, -1.7500,  1.0078,  0.6875, -1.7891, -1.1719,  0.4727, -0.9062, -0.5820],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0008, -0.0314, -0.0037,  ...,  0.0270,  0.0140,  0.0140],
        [-0.0058,  0.0020,  0.0288,  ..., -0.0111,  0.0151, -0.0272],
        [-0.0449, -0.0133,  0.0487,  ...,  0.0131,  0.0009,  0.0136],
        ...,
        [ 0.0073,  0.0061, -0.0113,  ..., -0.0181, -0.0110,  0.0276],
        [-0.0188, -0.0135,  0.0038,  ...,  0.0026, -0.0047,  0.0311],
        [-0.0237, -0.0047,  0.0149,  ...,  0.0058,  0.0154, -0.0210]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.8984,  0.3945, -0.5000,  0.7266,  0.2285,  1.9219, -0.3574, -0.9688,  0.9062, -2.0781,  0.0586,  0.4844,  0.3457,  1.1719,  1.7578,  0.6289, -0.8203,  0.9453,  1.1328,  1.8750, -0.1582, -0.6094,  0.5586, -0.2559,  1.2188, -0.3379,  1.1016, -1.1719, -1.1953,  0.8672,  0.1050,  1.2266,
         0.7539, -1.6172,  0.9531, -0.6797, -1.1328,  0.2305,  0.3672,  0.8906,  0.6523,  0.0654, -1.9219,  1.3047, -0.8789, -0.3457,  0.1108, -1.4531, -0.0439,  1.5625,  0.2148,  0.5820, -1.8828,  1.2188, -0.1128, -1.5703,  0.9961, -1.4141, -1.8828, -0.2559,  0.1079,  0.7344, -1.4297,  1.0078],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.4082, -1.5078, -1.3750, -1.5938, -1.6406, -1.1016, -1.4688, -1.5938, -1.2344, -1.3047, -1.1641, -1.1797, -1.1875, -1.1172],
        [ 0.0000,  0.6211, -0.6055, -0.9961, -2.0312, -1.3828, -1.9453, -2.2969, -1.8281, -2.4219, -2.2656, -2.4375, -2.4062, -2.4062, -2.2812],
        [ 0.0000,  0.7148,  0.0737, -0.4082, -1.3438, -0.7031, -1.4297, -1.6406, -1.1562, -1.8750, -1.6797, -1.8984, -1.8672, -1.8438, -1.7656],
        [ 0.0000,  3.4688,  0.5039, -0.7383, -4.0312, -1.9844, -4.1250, -4.7500, -3.3750, -5.4688, -4.8125, -5.5000, -5.3750, -5.3750, -4.9062],
        [ 0.0000,  1.8672,  0.2461, -0.5586, -2.4531, -1.2422, -2.5625, -2.9219, -2.0781, -3.3594, -2.9844, -3.3906, -3.3125, -3.3125, -3.0625],
        [ 0.0000,  2.3125,  0.8750, -0.0898, -2.1562, -0.7969, -2.4844, -2.6719, -1.6875, -3.2656, -2.8125, -3.3281, -3.2500, -3.2344, -2.9844],
        [ 0.0000,  3.6094,  0.6836, -0.5938, -3.9375, -1.8438, -4.1250, -4.6875, -3.2500, -5.4688, -4.7812, -5.5312, -5.3750, -5.3750, -4.8750],
        [ 0.0000,  3.3125,  0.1924, -1.0000, -4.2188, -2.2344, -4.2188, -4.8750, -3.5781, -5.5312, -4.9375, -5.5625, -5.4375, -5.4375, -4.9688],
        [ 0.0000,  3.7031,  1.0156, -0.2852, -3.6250, -1.5156, -3.8750, -4.3750, -2.9375, -5.2188, -4.5000, -5.2812, -5.1250, -5.1250, -4.6250],
        [ 0.0000,  3.4531,  0.7930, -0.4551, -3.6250, -1.6328, -3.8438, -4.3125, -2.9688, -5.0938, -4.4375, -5.1562, -5.0312, -5.0312, -4.5625],
        [ 0.0000,  3.4688,  1.0625, -0.1855, -3.2969, -1.3125, -3.5781, -4.0000, -2.6406, -4.8125, -4.1562, -4.8750, -4.7500, -4.7500, -4.2812],
        [ 0.0000,  3.3906,  1.0547, -0.1758, -3.2188, -1.2734, -3.5000, -3.9062, -2.5781, -4.7188, -4.0625, -4.7500, -4.6250, -4.6250, -4.1875],
        [ 0.0000,  3.7188,  0.8242, -0.4902, -3.8281, -1.7344, -4.0625, -4.5625, -3.1250, -5.3750, -4.6875, -5.4375, -5.2812, -5.3125, -4.8125],
        [ 0.0000,  3.0000,  1.0547, -0.0757, -2.7656, -1.0312, -3.0781, -3.3906, -2.1875, -4.1250, -3.5469, -4.1875, -4.0938, -4.0625, -3.7031]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.8159],
        [0.2193],
        [0.1155],
        [0.0165],
        [0.0431],
        [0.0219],
        [0.0118],
        [0.0183],
        [0.0089],
        [0.0111],
        [0.0091],
        [0.0094],
        [0.0089],
        [0.0114]], device='cuda:0')
tensor([[    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.5039,     0.4941,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.1367,     0.8281,     0.0334,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.1250,     0.7695,     0.0747,     0.0317,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0175,     0.9688,     0.0110,     0.0027,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0535,     0.8984,     0.0349,     0.0114,     0.0004,     0.0025,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0591,     0.7852,     0.1035,     0.0369,     0.0019,     0.0099,     0.0019,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0291,     0.9297,     0.0297,     0.0084,     0.0002,     0.0014,     0.0002,     0.0001,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0166,     0.9727,     0.0070,     0.0016,     0.0000,     0.0002,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0291,     0.9102,     0.0432,     0.0125,     0.0002,     0.0023,     0.0003,     0.0002,     0.0005,     0.0001,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0243,     0.9414,     0.0261,     0.0071,     0.0001,     0.0012,     0.0002,     0.0001,     0.0002,     0.0000,     0.0001,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0405,     0.8516,     0.0752,     0.0238,     0.0007,     0.0052,     0.0008,     0.0006,     0.0013,     0.0003,     0.0004,     0.0003,     0.0000,     0.0000,     0.0000],
        [    0.0393,     0.8594,     0.0698,     0.0219,     0.0006,     0.0047,     0.0007,     0.0006,     0.0012,     0.0003,     0.0003,     0.0003,     0.0003,     0.0000,     0.0000],
        [    0.0282,     0.9219,     0.0354,     0.0101,     0.0002,     0.0018,     0.0003,     0.0002,     0.0004,     0.0001,     0.0001,     0.0001,     0.0001,     0.0001,     0.0000],
        [    0.0405,     0.8555,     0.0713,     0.0225,     0.0007,     0.0049,     0.0008,     0.0006,     0.0012,     0.0003,     0.0004,     0.0003,     0.0003,     0.0003,     0.0004]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0081,  0.0131, -0.0182,  ...,  0.0003, -0.0094, -0.0199],
        [ 0.0154, -0.0014, -0.0048,  ...,  0.0058, -0.0327,  0.0067],
        [-0.0510,  0.0040,  0.0047,  ...,  0.0041,  0.0018,  0.0071],
        ...,
        [ 0.0041,  0.0094,  0.0199,  ..., -0.0107, -0.0275, -0.0170],
        [-0.0150,  0.0031,  0.0719,  ..., -0.0091,  0.0159,  0.0002],
        [ 0.0140,  0.0234,  0.0201,  ...,  0.0247, -0.0263,  0.0170]], device='cuda:0', requires_grad=True)
K: tensor([-0.0059, -0.9609,  1.2500, -0.9453,  0.3887, -0.9766, -0.3555,  1.5938, -0.5859,  0.7539, -1.7109, -1.9922,  1.0938, -1.3203,  0.3457,  0.2451, -1.7188, -1.3516, -0.8711, -1.4609,  0.6094,  2.0000,  0.0415, -0.5859,  2.1406, -0.3711, -1.0156,  1.4922,  1.4297, -0.1904, -1.0391, -1.1172,
         1.4844,  0.3438, -0.2412,  1.1406,  0.1709,  0.7656, -1.2812,  1.1094, -0.9062, -0.6016,  0.5195, -1.3828,  1.1406, -1.9609, -1.6328,  1.6172, -0.0082, -1.2031,  1.6719,  1.4531,  1.9219, -1.9062,  0.3496,  1.0000, -1.9453,  1.2891,  0.7617, -1.7656, -1.1797,  0.5820, -0.7578, -0.7031],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0008, -0.0314, -0.0037,  ...,  0.0270,  0.0140,  0.0140],
        [-0.0058,  0.0020,  0.0288,  ..., -0.0111,  0.0151, -0.0272],
        [-0.0449, -0.0133,  0.0487,  ...,  0.0131,  0.0009,  0.0136],
        ...,
        [ 0.0073,  0.0061, -0.0113,  ..., -0.0181, -0.0110,  0.0276],
        [-0.0188, -0.0135,  0.0038,  ...,  0.0026, -0.0047,  0.0311],
        [-0.0237, -0.0047,  0.0149,  ...,  0.0058,  0.0154, -0.0210]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.9297,  0.4961, -0.5391,  0.7461,  0.0698,  2.0469, -0.4883, -0.9961,  0.8750, -2.0781,  0.0698,  0.4062,  0.0454,  1.1016,  2.2188,  0.8477, -0.9336,  0.9688,  0.9141,  1.9453, -0.0262, -0.6094,  0.7383, -0.3633,  1.3203, -0.3223,  1.2578, -1.3125, -1.4922,  1.0547,  0.1533,  1.2891,
         0.9336, -1.7109,  1.0469, -0.8398, -1.1484,  0.0610,  0.3594,  1.0312,  0.5938,  0.1748, -1.9609,  1.3047, -0.9883, -0.4297, -0.0067, -1.5156,  0.0079,  1.6250,  0.1611,  0.6992, -2.0000,  1.2500, -0.1465, -1.5703,  1.1250, -1.5547, -2.1406, -0.4512,  0.1475,  0.9727, -1.3828,  1.1016],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.0209, -2.0000, -1.9609, -2.0938, -2.1250, -1.5234, -2.0469, -2.2031, -1.7500, -1.8203, -1.6172, -1.6484, -1.6641, -1.6016],
        [ 0.0000,  1.8047, -1.4141, -2.2188, -4.6250, -3.3750, -4.1250, -4.6875, -4.4062, -4.9688, -4.8750, -4.7812, -4.7500, -4.9375, -4.5938],
        [ 0.0000,  1.8125, -0.5117, -1.3750, -3.7656, -2.4688, -3.4531, -3.8594, -3.4531, -4.2812, -4.1250, -4.1250, -4.0938, -4.2500, -3.9375],
        [ 0.0000,  4.0312, -0.4648, -1.8594, -6.3750, -3.8750, -5.8125, -6.5000, -5.7188, -7.2812, -6.9375, -7.0000, -6.9375, -7.2188, -6.5938],
        [ 0.0000,  2.8281, -0.4238, -1.5469, -4.9062, -3.0625, -4.5312, -5.0000, -4.4375, -5.5938, -5.3750, -5.4062, -5.3750, -5.5938, -5.1250],
        [ 0.0000,  2.5938,  0.5625, -0.4727, -3.4531, -1.7812, -3.4375, -3.5625, -2.9531, -4.2500, -4.0000, -4.1562, -4.0938, -4.2812, -3.8906],
        [ 0.0000,  3.4688,  0.0223, -1.2500, -5.2188, -3.0000, -4.8750, -5.3438, -4.6250, -6.1250, -5.8125, -5.9375, -5.8750, -6.1250, -5.5625],
        [ 0.0000,  4.0625, -0.8672, -2.3125, -6.8750, -4.3750, -6.2188, -7.0000, -6.2500, -7.7188, -7.4375, -7.4375, -7.3750, -7.6875, -7.0312],
        [ 0.0000,  3.4531,  0.3965, -0.8477, -4.7500, -2.5469, -4.5000, -4.8750, -4.1250, -5.6875, -5.3750, -5.5000, -5.4375, -5.6875, -5.1562],
        [ 0.0000,  3.6562,  0.0732, -1.2344, -5.3438, -3.0469, -5.0000, -5.4688, -4.7188, -6.2500, -5.9375, -6.0625, -6.0000, -6.2500, -5.6875],
        [ 0.0000,  3.0469,  0.6133, -0.5352, -4.0312, -2.0469, -3.9219, -4.1562, -3.4375, -4.9375, -4.6250, -4.8125, -4.7500, -4.9375, -4.4688],
        [ 0.0000,  3.0781,  0.5781, -0.5859, -4.1250, -2.1250, -4.0000, -4.2500, -3.5312, -5.0312, -4.7188, -4.9062, -4.8125, -5.0312, -4.5625],
        [ 0.0000,  3.4844,  0.2314, -1.0312, -4.9375, -2.7500, -4.7188, -5.0625, -4.3125, -5.8438, -5.5312, -5.6875, -5.6250, -5.8750, -5.3125],
        [ 0.0000,  3.0469,  0.5664, -0.5898, -4.0938, -2.1094, -3.9531, -4.2188, -3.5000, -5.0000, -4.6875, -4.8438, -4.7812, -5.0000, -4.5312]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.7913],
        [0.1068],
        [0.0617],
        [0.0111],
        [0.0248],
        [0.0185],
        [0.0116],
        [0.0118],
        [0.0097],
        [0.0096],
        [0.0110],
        [0.0108],
        [0.0096],
        [0.0113]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		( the:0.0933 the:0.1309.:0.1104 the:0.1357.:0.1001.:0.0986 the:0.1074 the:0.0933)
 the
------
		( the:0.1309.:0.1104 the:0.1357.:0.1001.:0.0986 the:0.1074 the:0.0933 the:0.1484)
 the the the the the the the the the the the the the the the
@ 550 train 7.6334 , allloss: 13.4377, dt: 1534.13ms, fracRes: 0.0085, norm(attn): 0.3438, norm(output): 0.0505, norm(x): 0.0475, norm(y): 0.9935, norm:39.1571, tok/sec: 85437.44, flops:33.29, batch-reuse:1
@ 551 train 7.9111 , allloss: 16.4224, dt: 1125.40ms, fracRes: 0.0083, norm(attn): 0.3184, norm(output): 0.0549, norm(x): 0.0501, norm(y): 0.9927, norm:229.9314, tok/sec: 116467.10, flops:45.38, batch-reuse:1
@ 552 train 7.9037 , allloss: 13.9887, dt: 1153.61ms, fracRes: 0.0093, norm(attn): 0.3145, norm(output): 0.0513, norm(x): 0.0492, norm(y): 0.9925, norm:264.1811, tok/sec: 113618.89, flops:44.27, batch-reuse:1
@ 553 train 7.6439 , allloss: 14.7046, dt: 1161.70ms, fracRes: 0.0088, norm(attn): 0.3047, norm(output): 0.0544, norm(x): 0.0501, norm(y): 0.9928, norm:42.8637, tok/sec: 112827.36, flops:43.96, batch-reuse:1
@ 554 train 7.6154 , allloss: 15.2830, dt: 1162.02ms, fracRes: 0.0093, norm(attn): 0.2832, norm(output): 0.0540, norm(x): 0.0501, norm(y): 0.9928, norm:39.2379, tok/sec: 112797.08, flops:43.95, batch-reuse:1
@ 555 train 7.6127 , allloss: 16.9317, dt: 1129.37ms, fracRes: 0.0099, norm(attn): 0.2656, norm(output): 0.0547, norm(x): 0.0501, norm(y): 0.9925, norm:77.4409, tok/sec: 116057.95, flops:45.22, batch-reuse:1
@ 556 train 7.5910 , allloss: 14.1704, dt: 1156.53ms, fracRes: 0.0102, norm(attn): 0.2949, norm(output): 0.0544, norm(x): 0.0503, norm(y): 0.9924, norm:74.0042, tok/sec: 113332.39, flops:44.15, batch-reuse:1
@ 557 train 7.6526 , allloss: 16.2966, dt: 1134.66ms, fracRes: 0.0112, norm(attn): 0.3301, norm(output): 0.0571, norm(x): 0.0513, norm(y): 0.9921, norm:76.1425, tok/sec: 115516.32, flops:45.01, batch-reuse:1
@ 558 train 7.7076 , allloss: 16.7301, dt: 1164.44ms, fracRes: 0.0126, norm(attn): 0.3262, norm(output): 0.0579, norm(x): 0.0520, norm(y): 0.9920, norm:61.0590, tok/sec: 112562.64, flops:43.85, batch-reuse:1
@ 559 train 8.2249 , allloss: 14.9957, dt: 1152.80ms, fracRes: 0.0166, norm(attn): 0.3164, norm(output): 0.0513, norm(x): 0.0474, norm(y): 0.9916, norm:309.5568, tok/sec: 113699.16, flops:44.30, batch-reuse:1
@ 560 train 7.8072 , allloss: 19.0939, dt: 1122.31ms, fracRes: 0.0202, norm(attn): 0.3242, norm(output): 0.0615, norm(x): 0.0575, norm(y): 0.9916, norm:173.8431, tok/sec: 116788.05, flops:45.50, batch-reuse:1
@ 561 train 8.4435 , allloss: 19.9132, dt: 1142.00ms, fracRes: 0.0301, norm(attn): 0.3750, norm(output): 0.0664, norm(x): 0.0540, norm(y): 0.9909, norm:145.6377, tok/sec: 114773.77, flops:44.72, batch-reuse:1
@ 562 train 7.9180 , allloss: 20.1000, dt: 1159.41ms, fracRes: 0.0362, norm(attn): 0.3750, norm(output): 0.0703, norm(x): 0.0595, norm(y): 0.9907, norm:88.6505, tok/sec: 113050.25, flops:44.04, batch-reuse:1
@ 563 train 8.0059 , allloss: 21.6179, dt: 1115.09ms, fracRes: 0.0357, norm(attn): 0.3438, norm(output): 0.0630, norm(x): 0.0584, norm(y): 0.9905, norm:211.9268, tok/sec: 117543.66, flops:45.80, batch-reuse:1
@ 564 train 7.9788 , allloss: 25.4775, dt: 1117.39ms, fracRes: 0.0286, norm(attn): 0.3418, norm(output): 0.0723, norm(x): 0.0667, norm(y): 0.9907, norm:87.5053, tok/sec: 117302.31, flops:45.70, batch-reuse:1
@ 565 train 7.9636 , allloss: 24.3120, dt: 1136.44ms, fracRes: 0.0280, norm(attn): 0.3223, norm(output): 0.0593, norm(x): 0.0490, norm(y): 0.9904, norm:433.0690, tok/sec: 115335.90, flops:44.93, batch-reuse:1
@ 566 train 7.8546 , allloss: 22.7642, dt: 1133.38ms, fracRes: 0.0284, norm(attn): 0.3418, norm(output): 0.0854, norm(x): 0.0726, norm(y): 0.9907, norm:64.4153, tok/sec: 115646.55, flops:45.06, batch-reuse:1
@ 567 train 7.8821 , allloss: 20.9741, dt: 1142.94ms, fracRes: 0.0347, norm(attn): 0.3672, norm(output): 0.0835, norm(x): 0.0709, norm(y): 0.9905, norm:72.6430, tok/sec: 114680.14, flops:44.68, batch-reuse:1
@ 568 train 7.9815 , allloss: 19.3061, dt: 1140.64ms, fracRes: 0.0446, norm(attn): 0.3672, norm(output): 0.0693, norm(x): 0.0573, norm(y): 0.9902, norm:86.3420, tok/sec: 114910.93, flops:44.77, batch-reuse:1
@ 569 train 7.7690 , allloss: 18.7298, dt: 1133.34ms, fracRes: 0.0322, norm(attn): 0.3438, norm(output): 0.0659, norm(x): 0.0581, norm(y): 0.9905, norm:71.4751, tok/sec: 115651.19, flops:45.06, batch-reuse:1
@ 570 train 7.7097 , allloss: 19.7112, dt: 1127.23ms, fracRes: 0.0268, norm(attn): 0.3340, norm(output): 0.0654, norm(x): 0.0593, norm(y): 0.9909, norm:66.4497, tok/sec: 116277.45, flops:45.30, batch-reuse:1
@ 571 train 7.7190 , allloss: 18.9477, dt: 1142.01ms, fracRes: 0.0260, norm(attn): 0.3320, norm(output): 0.0603, norm(x): 0.0548, norm(y): 0.9908, norm:76.4582, tok/sec: 114773.10, flops:44.72, batch-reuse:1
@ 572 train 7.7483 , allloss: 18.0654, dt: 1159.11ms, fracRes: 0.0207, norm(attn): 0.3125, norm(output): 0.0540, norm(x): 0.0507, norm(y): 0.9909, norm:75.7480, tok/sec: 113079.65, flops:44.06, batch-reuse:1
@ 573 train 7.7340 , allloss: 19.1520, dt: 1137.08ms, fracRes: 0.0192, norm(attn): 0.3203, norm(output): 0.0547, norm(x): 0.0524, norm(y): 0.9909, norm:81.5956, tok/sec: 115270.92, flops:44.91, batch-reuse:1
@ 574 train 7.7914 , allloss: 23.4929, dt: 1140.37ms, fracRes: 0.0125, norm(attn): 0.3418, norm(output): 0.0664, norm(x): 0.0638, norm(y): 0.9909, norm:126.5870, tok/sec: 114938.63, flops:44.78, batch-reuse:1
@ 575 train 11.0076 , allloss: 19.1997, dt: 1133.39ms, fracRes: 0.0219, norm(attn): 0.3457, norm(output): 0.0510, norm(x): 0.0475, norm(y): 0.9900, norm:1120.9679, tok/sec: 115645.94, flops:45.06, batch-reuse:1
@ 576 train 7.8708 , allloss: 20.4814, dt: 1159.86ms, fracRes: 0.0155, norm(attn): 0.3105, norm(output): 0.0605, norm(x): 0.0556, norm(y): 0.9906, norm:214.3663, tok/sec: 113007.15, flops:44.03, batch-reuse:1
@ 577 train 7.8199 , allloss: 24.6037, dt: 1132.82ms, fracRes: 0.0173, norm(attn): 0.3418, norm(output): 0.0757, norm(x): 0.0724, norm(y): 0.9911, norm:89.0486, tok/sec: 115703.94, flops:45.08, batch-reuse:1
@ 578 train 7.7934 , allloss: 25.0624, dt: 1128.67ms, fracRes: 0.0179, norm(attn): 0.3535, norm(output): 0.0840, norm(x): 0.0787, norm(y): 0.9909, norm:97.1223, tok/sec: 116129.75, flops:45.24, batch-reuse:1
@ 579 train 7.7205 , allloss: 23.9020, dt: 1138.15ms, fracRes: 0.0173, norm(attn): 0.3164, norm(output): 0.0786, norm(x): 0.0747, norm(y): 0.9914, norm:81.1135, tok/sec: 115162.59, flops:44.87, batch-reuse:1
@ 580 train 7.7863 , allloss: 24.4048, dt: 1143.42ms, fracRes: 0.0173, norm(attn): 0.2793, norm(output): 0.0713, norm(x): 0.0678, norm(y): 0.9919, norm:57.9964, tok/sec: 114631.07, flops:44.66, batch-reuse:1
@ 581 train 7.7888 , allloss: 23.6395, dt: 1149.32ms, fracRes: 0.0165, norm(attn): 0.2383, norm(output): 0.0635, norm(x): 0.0607, norm(y): 0.9924, norm:83.0941, tok/sec: 114042.77, flops:44.43, batch-reuse:1
@ 582 train 7.8516 , allloss: 24.8884, dt: 1158.73ms, fracRes: 0.0170, norm(attn): 0.2490, norm(output): 0.0664, norm(x): 0.0635, norm(y): 0.9925, norm:87.0592, tok/sec: 113117.11, flops:44.07, batch-reuse:1
@ 583 train 7.6552 , allloss: 23.0219, dt: 1139.73ms, fracRes: 0.0221, norm(attn): 0.2520, norm(output): 0.0649, norm(x): 0.0624, norm(y): 0.9929, norm:53.9759, tok/sec: 115003.06, flops:44.81, batch-reuse:1
@ 584 train 7.6926 , allloss: 22.2269, dt: 1168.49ms, fracRes: 0.0231, norm(attn): 0.2617, norm(output): 0.0635, norm(x): 0.0616, norm(y): 0.9929, norm:67.1061, tok/sec: 112172.03, flops:43.70, batch-reuse:1
@ 585 train 7.6154 , allloss: 20.2840, dt: 1143.99ms, fracRes: 0.0236, norm(attn): 0.2305, norm(output): 0.0654, norm(x): 0.0617, norm(y): 0.9930, norm:47.5536, tok/sec: 114574.85, flops:44.64, batch-reuse:1
@ 586 train 7.6252 , allloss: 19.8359, dt: 1132.94ms, fracRes: 0.0217, norm(attn): 0.2148, norm(output): 0.0635, norm(x): 0.0603, norm(y): 0.9929, norm:39.3361, tok/sec: 115692.18, flops:45.07, batch-reuse:1
@ 587 train 7.6026 , allloss: 19.8277, dt: 1138.29ms, fracRes: 0.0193, norm(attn): 0.2090, norm(output): 0.0618, norm(x): 0.0576, norm(y): 0.9926, norm:36.4628, tok/sec: 115148.02, flops:44.86, batch-reuse:1
@ 588 train 7.6568 , allloss: 19.0355, dt: 1155.80ms, fracRes: 0.0186, norm(attn): 0.2139, norm(output): 0.0586, norm(x): 0.0552, norm(y): 0.9925, norm:59.1538, tok/sec: 113403.37, flops:44.18, batch-reuse:1
@ 589 train 7.6520 , allloss: 16.0287, dt: 1140.30ms, fracRes: 0.0313, norm(attn): 0.2539, norm(output): 0.0544, norm(x): 0.0515, norm(y): 0.9933, norm:35.2990, tok/sec: 114944.90, flops:44.78, batch-reuse:1
@ 590 train 7.5960 , allloss: 16.0228, dt: 1152.45ms, fracRes: 0.0303, norm(attn): 0.2559, norm(output): 0.0527, norm(x): 0.0504, norm(y): 0.9931, norm:26.8086, tok/sec: 113733.25, flops:44.31, batch-reuse:1
@ 591 train 7.5594 , allloss: 17.8473, dt: 1158.31ms, fracRes: 0.0204, norm(attn): 0.2500, norm(output): 0.0510, norm(x): 0.0494, norm(y): 0.9923, norm:34.0905, tok/sec: 113158.43, flops:44.09, batch-reuse:1
@ 592 train 7.5964 , allloss: 19.6087, dt: 1122.40ms, fracRes: 0.0190, norm(attn): 0.2656, norm(output): 0.0508, norm(x): 0.0483, norm(y): 0.9918, norm:49.7854, tok/sec: 116778.08, flops:45.50, batch-reuse:1
@ 593 train 7.6164 , allloss: 15.0610, dt: 1142.17ms, fracRes: 0.0221, norm(attn): 0.2930, norm(output): 0.0469, norm(x): 0.0448, norm(y): 0.9920, norm:60.2138, tok/sec: 114757.27, flops:44.71, batch-reuse:1
@ 594 train 7.7639 , allloss: 14.8463, dt: 1156.57ms, fracRes: 0.0193, norm(attn): 0.2949, norm(output): 0.0486, norm(x): 0.0461, norm(y): 0.9919, norm:36.2926, tok/sec: 113328.07, flops:44.15, batch-reuse:1
@ 595 train 7.8710 , allloss: 14.0877, dt: 1155.52ms, fracRes: 0.0127, norm(attn): 0.3340, norm(output): 0.0476, norm(x): 0.0455, norm(y): 0.9912, norm:136.1424, tok/sec: 113431.02, flops:44.19, batch-reuse:1
@ 596 train 7.6557 , allloss: 13.3484, dt: 1130.36ms, fracRes: 0.0156, norm(attn): 0.3652, norm(output): 0.0466, norm(x): 0.0442, norm(y): 0.9911, norm:48.1512, tok/sec: 115955.99, flops:45.18, batch-reuse:1
@ 597 train 7.5928 , allloss: 13.5796, dt: 1149.85ms, fracRes: 0.0152, norm(attn): 0.3438, norm(output): 0.0474, norm(x): 0.0454, norm(y): 0.9911, norm:42.3360, tok/sec: 113990.03, flops:44.41, batch-reuse:1
@ 598 train 7.6781 , allloss: 14.2817, dt: 1110.71ms, fracRes: 0.0109, norm(attn): 0.3184, norm(output): 0.0486, norm(x): 0.0462, norm(y): 0.9910, norm:43.0696, tok/sec: 118007.79, flops:45.98, batch-reuse:1
@ 599 train 7.7512 , allloss: 14.4376, dt: 1117.03ms, fracRes: 0.0100, norm(attn): 0.3203, norm(output): 0.0498, norm(x): 0.0470, norm(y): 0.9907, norm:54.0061, tok/sec: 117339.82, flops:45.72, batch-reuse:1
@ 600 train 8.1456 , allloss: 13.4565, dt: 1132.58ms, fracRes: 0.0082, norm(attn): 0.3672, norm(output): 0.0481, norm(x): 0.0462, norm(y): 0.9902, norm:220.9680, tok/sec: 115728.69, flops:45.09, batch-reuse:1
@ 601 train 7.8299 , allloss: 14.8770, dt: 1142.66ms, fracRes: 0.0073, norm(attn): 0.3047, norm(output): 0.0515, norm(x): 0.0492, norm(y): 0.9905, norm:163.5077, tok/sec: 114707.51, flops:44.69, batch-reuse:1
@ 602 train 7.9782 , allloss: 13.6793, dt: 1154.46ms, fracRes: 0.0075, norm(attn): 0.3398, norm(output): 0.0496, norm(x): 0.0469, norm(y): 0.9904, norm:195.2576, tok/sec: 113535.03, flops:44.23, batch-reuse:1
@ 603 train 7.5925 , allloss: 14.4652, dt: 1161.66ms, fracRes: 0.0073, norm(attn): 0.3008, norm(output): 0.0518, norm(x): 0.0490, norm(y): 0.9905, norm:52.2603, tok/sec: 112831.92, flops:43.96, batch-reuse:1
@ 604 train 7.5799 , allloss: 14.4654, dt: 1131.63ms, fracRes: 0.0067, norm(attn): 0.3008, norm(output): 0.0508, norm(x): 0.0478, norm(y): 0.9903, norm:74.5308, tok/sec: 115826.29, flops:45.13, batch-reuse:1
@ 605 train 7.5600 , allloss: 15.9445, dt: 1155.63ms, fracRes: 0.0066, norm(attn): 0.2676, norm(output): 0.0520, norm(x): 0.0490, norm(y): 0.9902, norm:44.6006, tok/sec: 113420.75, flops:44.19, batch-reuse:1
@ 606 train 7.7170 , allloss: 16.2769, dt: 1170.58ms, fracRes: 0.0065, norm(attn): 0.2578, norm(output): 0.0505, norm(x): 0.0472, norm(y): 0.9899, norm:107.0950, tok/sec: 111972.01, flops:43.62, batch-reuse:1
@ 607 train 7.5612 , allloss: 15.9274, dt: 1144.61ms, fracRes: 0.0068, norm(attn): 0.2793, norm(output): 0.0547, norm(x): 0.0509, norm(y): 0.9898, norm:46.3765, tok/sec: 114512.09, flops:44.61, batch-reuse:1
@ 608 train 7.5273 , allloss: 15.5871, dt: 1132.88ms, fracRes: 0.0077, norm(attn): 0.2891, norm(output): 0.0547, norm(x): 0.0511, norm(y): 0.9895, norm:68.0891, tok/sec: 115698.00, flops:45.08, batch-reuse:1
@ 609 train 7.5506 , allloss: 17.3335, dt: 1129.40ms, fracRes: 0.0097, norm(attn): 0.2773, norm(output): 0.0586, norm(x): 0.0550, norm(y): 0.9897, norm:63.7606, tok/sec: 116054.61, flops:45.21, batch-reuse:1
@ 610 train 7.6852 , allloss: 16.8232, dt: 1133.35ms, fracRes: 0.0124, norm(attn): 0.2656, norm(output): 0.0547, norm(x): 0.0515, norm(y): 0.9894, norm:82.8092, tok/sec: 115649.56, flops:45.06, batch-reuse:1
@ 611 train 7.6082 , allloss: 17.3851, dt: 1160.27ms, fracRes: 0.0194, norm(attn): 0.2832, norm(output): 0.0588, norm(x): 0.0540, norm(y): 0.9890, norm:64.3717, tok/sec: 112966.93, flops:44.01, batch-reuse:1
@ 612 train 10.4665 , allloss: 17.5780, dt: 1142.94ms, fracRes: 0.0326, norm(attn): 0.3145, norm(output): 0.0503, norm(x): 0.0474, norm(y): 0.9881, norm:1618.4026, tok/sec: 114679.97, flops:44.68, batch-reuse:1
@ 613 train 7.7531 , allloss: 18.6169, dt: 1156.43ms, fracRes: 0.0219, norm(attn): 0.2480, norm(output): 0.0623, norm(x): 0.0576, norm(y): 0.9892, norm:77.5187, tok/sec: 113341.67, flops:44.16, batch-reuse:1
@ 614 train 7.5600 , allloss: 18.4251, dt: 1166.95ms, fracRes: 0.0252, norm(attn): 0.2520, norm(output): 0.0630, norm(x): 0.0589, norm(y): 0.9894, norm:59.9657, tok/sec: 112320.22, flops:43.76, batch-reuse:1
@ 615 train 8.2901 , allloss: 19.7939, dt: 1140.39ms, fracRes: 0.0306, norm(attn): 0.2539, norm(output): 0.0583, norm(x): 0.0548, norm(y): 0.9890, norm:554.5376, tok/sec: 114936.08, flops:44.78, batch-reuse:1
@ 616 train 7.7782 , allloss: 18.2185, dt: 1143.13ms, fracRes: 0.0325, norm(attn): 0.2793, norm(output): 0.0635, norm(x): 0.0570, norm(y): 0.9890, norm:92.6989, tok/sec: 114660.98, flops:44.67, batch-reuse:1
@ 617 train 7.5433 , allloss: 18.7754, dt: 1155.41ms, fracRes: 0.0233, norm(attn): 0.2617, norm(output): 0.0703, norm(x): 0.0626, norm(y): 0.9895, norm:77.4320, tok/sec: 113441.51, flops:44.20, batch-reuse:1
@ 618 train 7.5323 , allloss: 20.3981, dt: 1142.27ms, fracRes: 0.0204, norm(attn): 0.2422, norm(output): 0.0659, norm(x): 0.0605, norm(y): 0.9896, norm:56.8521, tok/sec: 114746.58, flops:44.71, batch-reuse:1
@ 619 train 7.8178 , allloss: 21.0468, dt: 1146.69ms, fracRes: 0.0194, norm(attn): 0.2334, norm(output): 0.0603, norm(x): 0.0570, norm(y): 0.9894, norm:182.7521, tok/sec: 114305.02, flops:44.53, batch-reuse:1
@ 620 train 7.7028 , allloss: 18.9954, dt: 1166.47ms, fracRes: 0.0174, norm(attn): 0.2656, norm(output): 0.0613, norm(x): 0.0565, norm(y): 0.9891, norm:149.1236, tok/sec: 112366.32, flops:43.78, batch-reuse:1
@ 621 train 7.6518 , allloss: 20.9023, dt: 1116.53ms, fracRes: 0.0163, norm(attn): 0.2539, norm(output): 0.0674, norm(x): 0.0635, norm(y): 0.9897, norm:72.9426, tok/sec: 117391.83, flops:45.74, batch-reuse:1
@ 622 train 7.5507 , allloss: 22.3960, dt: 1131.88ms, fracRes: 0.0174, norm(attn): 0.2539, norm(output): 0.0698, norm(x): 0.0664, norm(y): 0.9896, norm:68.3581, tok/sec: 115800.09, flops:45.12, batch-reuse:1
@ 623 train 7.5652 , allloss: 23.1925, dt: 1143.97ms, fracRes: 0.0154, norm(attn): 0.2500, norm(output): 0.0645, norm(x): 0.0620, norm(y): 0.9898, norm:65.0751, tok/sec: 114576.43, flops:44.64, batch-reuse:1
@ 624 train 7.5987 , allloss: 22.2513, dt: 1147.93ms, fracRes: 0.0121, norm(attn): 0.2490, norm(output): 0.0664, norm(x): 0.0619, norm(y): 0.9898, norm:51.2026, tok/sec: 114181.31, flops:44.49, batch-reuse:1
@ 625 train 7.7060 , allloss: 20.9297, dt: 1113.60ms, fracRes: 0.0095, norm(attn): 0.2578, norm(output): 0.0596, norm(x): 0.0568, norm(y): 0.9896, norm:99.2542, tok/sec: 117701.50, flops:45.86, batch-reuse:1
@ 626 train 8.1627 , allloss: 23.1461, dt: 1122.90ms, fracRes: 0.0125, norm(attn): 0.3027, norm(output): 0.0542, norm(x): 0.0523, norm(y): 0.9890, norm:462.8268, tok/sec: 116726.41, flops:45.48, batch-reuse:1
@ 627 train 7.9526 , allloss: 22.0936, dt: 1132.77ms, fracRes: 0.0136, norm(attn): 0.3066, norm(output): 0.0610, norm(x): 0.0578, norm(y): 0.9891, norm:155.3388, tok/sec: 115708.79, flops:45.08, batch-reuse:1
@ 628 train 7.6857 , allloss: 24.5401, dt: 1134.86ms, fracRes: 0.0151, norm(attn): 0.3398, norm(output): 0.0635, norm(x): 0.0625, norm(y): 0.9894, norm:63.4711, tok/sec: 115496.54, flops:45.00, batch-reuse:1
@ 629 train 7.8080 , allloss: 25.5964, dt: 1115.58ms, fracRes: 0.0165, norm(attn): 0.3770, norm(output): 0.0664, norm(x): 0.0649, norm(y): 0.9893, norm:184.5967, tok/sec: 117492.71, flops:45.78, batch-reuse:1
@ 630 train 7.8296 , allloss: 23.6337, dt: 1134.84ms, fracRes: 0.0130, norm(attn): 0.3730, norm(output): 0.0776, norm(x): 0.0721, norm(y): 0.9893, norm:75.3841, tok/sec: 115498.27, flops:45.00, batch-reuse:1
@ 631 train 8.5017 , allloss: 22.2336, dt: 1126.89ms, fracRes: 0.0104, norm(attn): 0.3867, norm(output): 0.0801, norm(x): 0.0735, norm(y): 0.9892, norm:448.6458, tok/sec: 116312.65, flops:45.32, batch-reuse:1
@ 632 train 7.7117 , allloss: 21.0059, dt: 1153.87ms, fracRes: 0.0146, norm(attn): 0.3105, norm(output): 0.0737, norm(x): 0.0688, norm(y): 0.9901, norm:58.7326, tok/sec: 113593.16, flops:44.26, batch-reuse:1
@ 633 train 7.7862 , allloss: 21.3126, dt: 1133.24ms, fracRes: 0.0095, norm(attn): 0.3105, norm(output): 0.0630, norm(x): 0.0605, norm(y): 0.9903, norm:110.0533, tok/sec: 115661.68, flops:45.06, batch-reuse:1
@ 634 train 7.5069 , allloss: 19.6159, dt: 1134.00ms, fracRes: 0.0204, norm(attn): 0.3105, norm(output): 0.0659, norm(x): 0.0617, norm(y): 0.9906, norm:49.4685, tok/sec: 115584.16, flops:45.03, batch-reuse:1
@ 635 train 7.6307 , allloss: 17.7383, dt: 1115.55ms, fracRes: 0.0146, norm(attn): 0.3184, norm(output): 0.0605, norm(x): 0.0573, norm(y): 0.9904, norm:41.3919, tok/sec: 117495.38, flops:45.78, batch-reuse:1
@ 636 train 7.8327 , allloss: 16.4956, dt: 1125.73ms, fracRes: 0.0157, norm(attn): 0.3418, norm(output): 0.0537, norm(x): 0.0498, norm(y): 0.9898, norm:116.4574, tok/sec: 116432.77, flops:45.36, batch-reuse:1
@ 637 train 7.5956 , allloss: 16.1021, dt: 1127.41ms, fracRes: 0.0149, norm(attn): 0.3730, norm(output): 0.0476, norm(x): 0.0465, norm(y): 0.9899, norm:95.7048, tok/sec: 116259.03, flops:45.29, batch-reuse:1
@ 638 train 7.6439 , allloss: 17.8398, dt: 1123.35ms, fracRes: 0.0234, norm(attn): 0.3418, norm(output): 0.0510, norm(x): 0.0490, norm(y): 0.9903, norm:58.3718, tok/sec: 116679.11, flops:45.46, batch-reuse:1
@ 639 train 7.6425 , allloss: 18.3594, dt: 1120.46ms, fracRes: 0.0235, norm(attn): 0.3496, norm(output): 0.0510, norm(x): 0.0489, norm(y): 0.9904, norm:36.6260, tok/sec: 116980.97, flops:45.58, batch-reuse:1
@ 640 train 7.6622 , allloss: 17.9263, dt: 1139.22ms, fracRes: 0.0186, norm(attn): 0.3457, norm(output): 0.0508, norm(x): 0.0486, norm(y): 0.9904, norm:55.3976, tok/sec: 115054.59, flops:44.83, batch-reuse:1
@ 641 train 7.8142 , allloss: 18.1577, dt: 1128.95ms, fracRes: 0.0157, norm(attn): 0.3418, norm(output): 0.0505, norm(x): 0.0475, norm(y): 0.9904, norm:74.8475, tok/sec: 116101.16, flops:45.23, batch-reuse:1
@ 642 train 7.4562 , allloss: 15.8826, dt: 1121.08ms, fracRes: 0.0154, norm(attn): 0.3398, norm(output): 0.0500, norm(x): 0.0473, norm(y): 0.9906, norm:28.4506, tok/sec: 116916.04, flops:45.55, batch-reuse:1
@ 643 train 7.4568 , allloss: 15.1193, dt: 1150.27ms, fracRes: 0.0140, norm(attn): 0.3672, norm(output): 0.0469, norm(x): 0.0449, norm(y): 0.9904, norm:32.4979, tok/sec: 113948.85, flops:44.39, batch-reuse:1
@ 644 train 7.6591 , allloss: 13.9247, dt: 1149.22ms, fracRes: 0.0124, norm(attn): 0.3926, norm(output): 0.0459, norm(x): 0.0432, norm(y): 0.9900, norm:42.0028, tok/sec: 114052.73, flops:44.43, batch-reuse:1
@ 645 train 7.6077 , allloss: 13.9558, dt: 1129.50ms, fracRes: 0.0096, norm(attn): 0.4082, norm(output): 0.0437, norm(x): 0.0415, norm(y): 0.9894, norm:56.5417, tok/sec: 116044.77, flops:45.21, batch-reuse:1
@ 646 train 7.6203 , allloss: 16.3854, dt: 1112.75ms, fracRes: 0.0112, norm(attn): 0.3066, norm(output): 0.0488, norm(x): 0.0463, norm(y): 0.9898, norm:234.6990, tok/sec: 117791.00, flops:45.89, batch-reuse:1
@ 647 train 8.3790 , allloss: 23.6193, dt: 1119.10ms, fracRes: 0.0080, norm(attn): 0.3984, norm(output): 0.0469, norm(x): 0.0442, norm(y): 0.9884, norm:553.8651, tok/sec: 117123.15, flops:45.63, batch-reuse:1
@ 648 train 10.1263 , allloss: 21.0688, dt: 1139.14ms, fracRes: 0.0078, norm(attn): 0.4668, norm(output): 0.0439, norm(x): 0.0430, norm(y): 0.9883, norm:288.2470, tok/sec: 115062.68, flops:44.83, batch-reuse:1
@ 649 train 9.2406 , allloss: 17.1342, dt: 1124.62ms, fracRes: 0.0083, norm(attn): 0.4238, norm(output): 0.0481, norm(x): 0.0468, norm(y): 0.9892, norm:218.9730, tok/sec: 116548.31, flops:45.41, batch-reuse:1
@ 650 train 8.0522 , allloss: 16.3174, dt: 1124.85ms, fracRes: 0.0113, norm(attn): 0.3438, norm(output): 0.0518, norm(x): 0.0503, norm(y): 0.9899, norm:102.7048, tok/sec: 116524.15, flops:45.40, batch-reuse:1
@ 651 train 7.7159 , allloss: 19.3249, dt: 1130.85ms, fracRes: 0.0233, norm(attn): 0.2871, norm(output): 0.0544, norm(x): 0.0517, norm(y): 0.9903, norm:262.5313, tok/sec: 115906.17, flops:45.16, batch-reuse:1
@ 652 train 7.6300 , allloss: 16.3193, dt: 1133.77ms, fracRes: 0.0500, norm(attn): 0.2637, norm(output): 0.0549, norm(x): 0.0530, norm(y): 0.9910, norm:67.2161, tok/sec: 115607.42, flops:45.04, batch-reuse:1
@ 653 train 7.8032 , allloss: 18.5428, dt: 1132.44ms, fracRes: 0.0310, norm(attn): 0.2930, norm(output): 0.0554, norm(x): 0.0529, norm(y): 0.9907, norm:141.8717, tok/sec: 115743.04, flops:45.09, batch-reuse:1
@ 654 train 7.7291 , allloss: 17.2265, dt: 1145.92ms, fracRes: 0.0151, norm(attn): 0.3105, norm(output): 0.0562, norm(x): 0.0541, norm(y): 0.9907, norm:46.5257, tok/sec: 114381.38, flops:44.56, batch-reuse:1
