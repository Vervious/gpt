Threshold: 0.1
Enable layer loss: False
MAX LEARNING RATE: 0.0006
Experiment name: 17-yes-1minus-mlpconcat-noln-faster-3
MLPSCALE: 4
Experiment description: Transformer, max LR 6e-4
Setting:
========
self.compiler = BenCompilerNoOp(config)
self.execute = BenExecute(config) 
========
y = self.ln_1(x)
attn, xWeights, scores = self.attn(y, y, print_weights=print_weights)
program = self.compiler(y)
machineOutput = self.execute(program, attn)
x = xWeights * x + (1-xWeights)*machineOutput
======== 
VALUEMATRIX=True
REUSE_WEIGHTS=False
MLP_SCALE=4
MEASURE_SELF_CONTRIBUTION=False
NEW_ALL_LAYER_LOSS=False
MATRIX_NUM_PARAMS=4096
MLPMAT_INNER_SIZE=64
DELETE_SELF_CONTRIBUTION=False
EXTRACT_SELF_CONTRIBUTION=False
ATTENTION_SINK=True
IDENTITY_LOSS=True

Warmup steps: 1000
total desired batch size: 131072
Mini-batch size: 8*1024
=> calculated gradient accumulation steps: 16
=> calculated gradient accumulation steps: 16
Training max steps: 300001Num GPUs: 1{'block_size': 1024, 'vocab_size': 50304, 'n_layer': 12, 'n_head': 12, 'n_embd': 768}
num decayed parameter tensors: 50, with 152,666,112 parameters
num non-decayed parameter tensors: 74, with 84,480 parameters
@ 0 train 10.9868 , allloss: 885.0955, dt: 4538.31ms, fracRes: 0.0063, norm(attn): 0.0347, norm(output): 0.9997, norm(x): 0.9936, norm(y): 1.0001, norm:515.0029, tok/sec: 28881.25, flops:30.31, batch-reuse:1
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5078, 0.4922, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2637, 0.3906, 0.3438, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2852, 0.2949, 0.1299, 0.2910, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1963, 0.2373, 0.1758, 0.2236, 0.1670, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1826, 0.1592, 0.1777, 0.1377, 0.2344, 0.1089, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1089, 0.1777, 0.1533, 0.1172, 0.1206, 0.1230, 0.1982, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1445, 0.1260, 0.0684, 0.0933, 0.2412, 0.0967, 0.1001, 0.1299, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0991, 0.1133, 0.1582, 0.1216, 0.1021, 0.0928, 0.1162, 0.1050, 0.0908, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0967, 0.0554, 0.0742, 0.1250, 0.0796, 0.0913, 0.1387, 0.1128, 0.0952, 0.1309, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0903, 0.0952, 0.0957, 0.0898, 0.0991, 0.0830, 0.0864, 0.0830, 0.0859, 0.0815, 0.1104, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0688, 0.0461, 0.0967, 0.0898, 0.1602, 0.0562, 0.0728, 0.0457, 0.1279, 0.0645, 0.0718, 0.0986, 0.0000, 0.0000, 0.0000],
        [0.0703, 0.0845, 0.0811, 0.0513, 0.0413, 0.0879, 0.0559, 0.0845, 0.0713, 0.0620, 0.1533, 0.0728, 0.0845, 0.0000, 0.0000],
        [0.0752, 0.0723, 0.0845, 0.1084, 0.0645, 0.0898, 0.0781, 0.0664, 0.0366, 0.0576, 0.0410, 0.1060, 0.0703, 0.0496, 0.0000],
        [0.0593, 0.0469, 0.0708, 0.0625, 0.0542, 0.0635, 0.0432, 0.1152, 0.0557, 0.1128, 0.0608, 0.0723, 0.0518, 0.0654, 0.0654]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0299, -0.0158, -0.0141,  ...,  0.0293, -0.0199, -0.0060],
        [-0.0207,  0.0186,  0.0125,  ..., -0.0126, -0.0057, -0.0294],
        [-0.0087,  0.0240,  0.0255,  ..., -0.0181, -0.0209, -0.0082],
        ...,
        [ 0.0139,  0.0324,  0.0253,  ..., -0.0186, -0.0151, -0.0245],
        [-0.0050,  0.0106,  0.0056,  ...,  0.0268, -0.0258,  0.0078],
        [-0.0089,  0.0129, -0.0283,  ..., -0.0087, -0.0253,  0.0040]], device='cuda:0', requires_grad=True)
K: tensor([ 0.0388,  0.3848,  0.1562, -0.8008, -0.7070, -0.0208, -0.5977, -0.9648,  0.2734, -0.7930, -0.4648, -0.2832, -0.7812,  0.3965,  0.2061, -0.8516,  0.4512,  0.4629,  0.1924, -0.0835, -0.2070, -0.2100,  0.4824, -0.0532, -0.3984, -0.7812, -0.4375,  0.1226,  0.1143, -0.5703,  0.4688, -0.7305,
         0.2832, -1.2500, -0.4004,  0.0728, -1.0938, -0.8398,  0.4062,  0.2910, -0.9609, -0.2988, -0.6211, -0.0065,  0.7461, -0.0286, -0.0283, -0.0728,  0.2500, -0.2812,  0.9805,  0.4766, -0.5781,  0.6758,  0.0175, -0.3594, -1.8125, -1.1484,  0.0352,  0.2305,  0.2305, -0.2109,  0.7461, -0.2832],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0040,  0.0041,  0.0118,  ..., -0.0069, -0.0306,  0.0086],
        [ 0.0039, -0.0137,  0.0062,  ...,  0.0015, -0.0142, -0.0150],
        [ 0.0146,  0.0264,  0.0267,  ...,  0.0259,  0.0128, -0.0135],
        ...,
        [-0.0125,  0.0195,  0.0203,  ...,  0.0046,  0.0025, -0.0398],
        [-0.0267,  0.0088, -0.0435,  ...,  0.0190, -0.0208, -0.0132],
        [ 0.0028,  0.0185, -0.0164,  ...,  0.0044,  0.0135, -0.0079]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.0496,  0.1807,  0.5586,  0.8438, -0.2832, -0.1562, -0.2012,  0.7461, -0.6328, -0.4297, -0.4570,  0.1123,  0.1562,  0.2021,  0.0165,  0.0369, -0.6406,  0.0972, -0.5391,  0.3516, -0.1816, -0.2793, -0.5938,  0.6484,  0.3477,  0.2969, -0.4902,  0.0605,  0.8828,  0.0554,  0.5273, -0.9180,
         0.8438,  0.2812, -0.1084,  0.9375, -0.5625,  0.3848,  0.1147, -0.1865, -1.2031, -0.3496, -1.5312, -0.2061, -0.1348, -0.3848, -0.6328, -0.4512,  0.1030,  0.0762, -0.2422, -0.8789,  0.3379, -0.6406, -0.3535,  0.6094, -0.0425, -0.0059, -0.8281,  0.9766,  0.4961,  0.1230, -0.2617, -0.2832],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -0.0330,     -0.0019,     -0.3320,      0.1738,     -0.2119,     -0.0581,      0.1196,     -0.0415,      0.1436,      0.2734,      0.2119,      0.2031,     -0.0830,      0.1216],
        [     0.0000,      0.3945,      0.2676,      0.6367,     -0.3574,      0.4766,     -0.1172,     -0.6484,     -0.2285,     -0.0554,     -1.1797,     -0.4336,      0.0172,     -0.1748,     -0.1729],
        [     0.0000,      0.0337,     -0.7852,      0.0256,      0.5352,     -0.0723,      0.6523,      0.0986,     -0.1973,     -0.2324,      0.1494,      0.5312,      0.2773,     -0.0278,      0.0520],
        [     0.0000,      0.1914,     -0.1128,      0.1289,     -0.1611,     -0.3555,      0.0850,      0.2119,      0.2012,      0.2402,      0.1035,      0.0815,     -0.4219,      0.0200,      0.3438],
        [     0.0000,     -0.1338,     -0.0254,     -0.2852,      0.2480,     -0.5195,      0.2715,     -0.4531,     -0.0620,      0.1582,      0.2871,     -0.4414,     -0.6289,     -0.4141,     -0.3184],
        [     0.0000,      0.4922,      0.3438,      0.0728,      0.1025,      0.1201,      0.5977,      0.1172,     -0.5508,      0.0811,      0.3203,     -0.3633,      0.2832,     -0.4727,     -0.3555],
        [     0.0000,     -0.1416,     -0.7539,     -0.4395,      0.5078,     -0.4062,     -0.3691,     -0.1074,      0.2383,     -0.3828,      0.5273,      0.4922,      0.2871,      0.2383,      0.4707],
        [     0.0000,      0.1338,      0.4668,      0.2031,      0.0295,     -0.0654,      0.1582,      0.0559,     -0.0874,     -0.5000,     -0.1523,      0.1416,      0.5312,     -0.5117,     -0.0942],
        [     0.0000,     -0.5547,     -0.2598,      0.2617,     -0.1904,     -0.0532,      0.3633,      0.1562,     -0.0137,      0.3027,      0.3906,      0.0513,     -0.1523,     -0.3066,      0.0111],
        [     0.0000,      0.0500,      0.0535,     -0.0090,      0.0884,     -0.0840,     -0.0483,     -0.0874,     -0.0508,     -0.1064,      0.1992,      0.2002,     -0.0041,     -0.0007,     -0.2598],
        [     0.0000,     -0.3984,      0.3398,      0.2656,      0.8438,     -0.2031,      0.0554,     -0.4102,      0.6211,     -0.0703,      0.0398,      0.3574,     -0.0535,      0.5703,     -0.0918],
        [     0.0000,      0.1836,      0.1406,     -0.3184,     -0.5312,      0.2217,     -0.2295,      0.1797,      0.0115,     -0.1279,      0.7734,      0.0298,      0.1787,      0.0247,      0.0107],
        [     0.0000,     -0.0444,      0.1152,      0.3633,     -0.1562,      0.1777,      0.0352,     -0.1245,     -0.7227,     -0.2676,     -0.6055,      0.3418,     -0.0684,     -0.4199,     -0.5469],
        [     0.0000,     -0.2344,      0.1807,      0.0562,     -0.0894,      0.0645,     -0.3145,      0.6641,     -0.0625,      0.6445,      0.0238,      0.1943,     -0.1348,      0.0977,      0.1011]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4779],
        [0.3315],
        [0.2412],
        [0.2072],
        [0.1661],
        [0.1383],
        [0.1276],
        [0.1062],
        [0.0946],
        [0.0872],
        [0.0780],
        [0.0722],
        [0.0693],
        [0.0631]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4590, 0.5391, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4219, 0.2988, 0.2793, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2812, 0.1758, 0.2373, 0.3047, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1943, 0.1221, 0.2715, 0.2207, 0.1904, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1738, 0.1836, 0.2051, 0.1074, 0.1602, 0.1689, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1367, 0.1650, 0.1553, 0.1924, 0.1196, 0.1138, 0.1172, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1089, 0.1177, 0.1514, 0.1621, 0.0967, 0.1855, 0.0845, 0.0947, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1045, 0.0674, 0.1338, 0.0908, 0.0737, 0.1064, 0.1172, 0.1396, 0.1660, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0918, 0.0801, 0.0879, 0.1494, 0.1108, 0.1016, 0.1123, 0.0476, 0.1299, 0.0884, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0767, 0.0457, 0.1099, 0.0986, 0.0996, 0.0752, 0.0728, 0.0728, 0.1396, 0.0854, 0.1240, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0781, 0.0654, 0.0864, 0.0918, 0.0588, 0.1128, 0.0688, 0.1123, 0.0718, 0.0947, 0.0742, 0.0850, 0.0000, 0.0000, 0.0000],
        [0.0923, 0.0537, 0.0640, 0.0669, 0.0684, 0.0503, 0.0757, 0.0908, 0.0559, 0.0903, 0.1377, 0.0859, 0.0688, 0.0000, 0.0000],
        [0.0684, 0.0583, 0.0830, 0.0613, 0.0398, 0.0986, 0.0737, 0.0762, 0.0747, 0.0608, 0.0566, 0.1270, 0.0603, 0.0620, 0.0000],
        [0.0698, 0.0449, 0.0591, 0.0679, 0.0752, 0.0515, 0.0630, 0.0583, 0.1045, 0.0693, 0.0649, 0.1211, 0.0391, 0.0547, 0.0564]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[-0.0007, -0.0047,  0.0534,  ...,  0.0347, -0.0118, -0.0105],
        [ 0.0052,  0.0307, -0.0043,  ..., -0.0106,  0.0218,  0.0071],
        [ 0.0202,  0.0042, -0.0103,  ..., -0.0172, -0.0271, -0.0027],
        ...,
        [-0.0393,  0.0070, -0.0003,  ..., -0.0170, -0.0352,  0.0265],
        [-0.0170, -0.0017,  0.0277,  ...,  0.0235, -0.0206,  0.0048],
        [ 0.0012,  0.0026, -0.0160,  ...,  0.0195, -0.0098, -0.0214]], device='cuda:0', requires_grad=True)
K: tensor([ 0.2158, -1.1484,  0.4609,  1.5625, -0.2871,  0.5117, -0.9102,  0.6250, -0.5352, -0.7852, -0.3613, -0.1211, -0.3047,  0.6445,  0.1504,  0.0198, -0.5391, -0.1621, -1.4141, -0.8711, -0.8398,  1.3359, -0.1729, -0.7891, -0.1797,  0.3633,  0.4766, -1.4062, -0.0052, -0.5664, -0.2305,  0.2354,
         0.1357,  0.6758,  0.1797, -0.2373, -0.5508,  0.7148,  0.0947, -0.5977,  0.1040, -0.0972, -0.7812, -1.3359,  0.6289,  0.0615,  0.8555,  0.3828, -0.1670, -0.5977, -0.6562,  0.5312,  0.6289, -0.3145, -0.7734,  0.1807, -0.3535,  0.1924,  0.9219, -0.7969, -0.0393,  1.1875,  0.0075, -1.3828],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0512, -0.0368, -0.0189,  ..., -0.0082,  0.0038,  0.0004],
        [ 0.0247, -0.0238,  0.0157,  ...,  0.0020,  0.0321,  0.0520],
        [ 0.0027,  0.0353,  0.0109,  ..., -0.0039,  0.0025,  0.0040],
        ...,
        [ 0.0060, -0.0151,  0.0117,  ..., -0.0297, -0.0058, -0.0077],
        [-0.0014,  0.0010,  0.0236,  ..., -0.0145,  0.0179,  0.0365],
        [ 0.0002,  0.0086, -0.0128,  ...,  0.0469,  0.0063, -0.0002]], device='cuda:0', requires_grad=True)
Q: tensor([-0.1299, -0.4414,  0.0315, -0.3340,  0.2461,  0.6719, -0.3633,  0.4121, -0.4805,  0.5156, -0.1182,  0.3496,  0.0640, -0.5898, -0.6367,  0.1572,  0.2197,  0.0825,  0.1582,  0.9648,  1.1172,  0.9922, -0.5117,  0.1177,  0.3672,  0.0845, -0.2471,  0.5469,  0.3086, -0.1943,  0.6797, -0.2256,
         1.1719,  0.2559, -0.6289, -0.2871, -0.0996, -0.4512, -0.5938, -0.0398,  0.0811,  0.3340, -0.0287,  0.5391,  0.3477,  0.6328,  0.4336,  0.2520,  0.7852,  0.5938, -0.4570, -0.4316,  0.4531, -0.6406,  0.0552,  0.7852, -0.4043, -0.1069,  0.0110, -0.2285,  0.9844, -0.0195, -0.4023,  0.3438],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,      0.1621,      0.1611,     -0.1611,      0.1904,      0.3418,     -0.2812,      0.1797,      0.0466,      0.2139,     -0.0515,      0.6875,      0.0908,      0.0131,      0.4043],
        [     0.0000,     -0.3438,     -0.4160,     -0.2246,     -0.2852,     -0.3184,      0.1475,     -0.0869,     -0.0771,      0.0090,      0.2852,      0.0145,      0.0654,     -0.2373,      0.2578],
        [     0.0000,     -0.4688,     -0.1680,      0.0820,      0.1924,      0.0014,     -0.3750,      0.1328,      0.2832,      0.1680,     -0.0130,      0.1240,      0.1680,      0.0630,      0.0898],
        [     0.0000,     -0.4648,      0.3379,      0.1299,     -0.0181,     -0.1357,     -0.2520,      0.0006,     -0.0972,      0.5312,     -0.1206,      0.1050,      0.3008,     -0.2061,      0.4004],
        [     0.0000,      0.0530,      0.1670,     -0.4805,     -0.0801,     -0.0277,      0.1216,     -0.0708,     -0.2891,     -0.1216,      0.0762,      0.0491,     -0.2373,     -0.4238,     -0.1729],
        [     0.0000,      0.1904,      0.1250,      0.3418,     -0.1328,     -0.1855,     -0.1543,     -0.3438,      0.1436,     -0.4062,      0.0003,     -0.1738,     -0.2051,     -0.1660,     -0.5078],
        [     0.0000,      0.0806,      0.3281,      0.3965,     -0.1201,      0.5312,     -0.2539,     -0.1367,      0.5938,     -0.3711,      0.2139,      0.4922,      0.3398,      0.0198,      0.0299],
        [     0.0000,     -0.4434,      0.2471,     -0.1426,     -0.3496,      0.0181,      0.1128,      0.2871,      0.4629,      0.1377,     -0.0840,      0.1963,     -0.0693,      0.0214,     -0.0625],
        [     0.0000,     -0.1348,     -0.0439,      0.4902,      0.1914,      0.1045,      0.2041,     -0.6562,      0.3496,     -0.0334,     -0.1182,      0.3633,      0.1289,      0.2617,     -0.1299],
        [     0.0000,     -0.5156,      0.3652,      0.2559,      0.2637,     -0.0160,     -0.0479,     -0.0469,      0.6055,      0.1094,      0.4824,      0.2275,      0.1729,      0.3320,     -0.2695],
        [     0.0000,     -0.1836,      0.0967,      0.1582,     -0.2871,      0.3652,     -0.1289,      0.3574,     -0.0879,      0.1904,     -0.0525,      0.0835,     -0.0161,     -0.0732,      0.0496],
        [     0.0000,     -0.5469,     -0.3691,     -0.3262,     -0.3047,     -0.6094,     -0.2031,     -0.0192,     -0.5039,     -0.0254,      0.3965,     -0.0708,     -0.2910,     -0.2129,     -0.1060],
        [     0.0000,     -0.1631,      0.1895,     -0.1143,     -0.5469,      0.3613,      0.0732,      0.1035,      0.0854,     -0.1226,     -0.1904,      0.6133,     -0.1299,     -0.0996,     -0.1680],
        [     0.0000,     -0.4395,     -0.1660,     -0.0280,      0.0732,     -0.3066,     -0.1050,     -0.1826,      0.4004,     -0.0073,     -0.0708,      0.5508,     -0.5859,     -0.2471,     -0.2139]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5293],
        [0.3352],
        [0.2371],
        [0.1908],
        [0.1653],
        [0.1299],
        [0.1202],
        [0.1057],
        [0.0966],
        [0.0852],
        [0.0834],
        [0.0760],
        [0.0725],
        [0.0644]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6406, 0.3594, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3320, 0.3320, 0.3359, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2188, 0.2158, 0.3281, 0.2363, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2061, 0.1924, 0.2578, 0.1147, 0.2285, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1885, 0.1885, 0.1475, 0.1875, 0.1318, 0.1562, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1523, 0.1211, 0.1953, 0.1768, 0.1377, 0.1182, 0.0981, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1191, 0.1367, 0.1157, 0.1836, 0.0850, 0.1523, 0.0874, 0.1206, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1118, 0.1436, 0.1250, 0.1235, 0.1011, 0.1240, 0.0923, 0.0806, 0.0977, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0835, 0.1670, 0.1152, 0.0913, 0.0674, 0.1260, 0.0898, 0.1206, 0.0708, 0.0688, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0913, 0.0623, 0.1484, 0.0981, 0.0928, 0.0544, 0.0713, 0.0811, 0.1475, 0.0742, 0.0781, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0757, 0.0654, 0.0874, 0.1216, 0.0417, 0.0942, 0.1118, 0.1250, 0.0781, 0.0752, 0.0559, 0.0679, 0.0000, 0.0000, 0.0000],
        [0.0962, 0.0347, 0.0762, 0.0874, 0.0320, 0.0496, 0.0713, 0.0540, 0.0938, 0.0840, 0.0510, 0.1787, 0.0918, 0.0000, 0.0000],
        [0.0674, 0.1011, 0.0579, 0.0649, 0.0625, 0.0879, 0.0645, 0.0786, 0.0674, 0.0742, 0.0693, 0.0491, 0.0854, 0.0693, 0.0000],
        [0.0703, 0.0374, 0.0603, 0.0845, 0.0454, 0.0879, 0.0664, 0.0723, 0.0718, 0.0767, 0.0454, 0.0535, 0.0938, 0.0603, 0.0747]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0019,  0.0163,  0.0684,  ...,  0.0193, -0.0191, -0.0256],
        [ 0.0312,  0.0078,  0.0013,  ...,  0.0020,  0.0051,  0.0035],
        [-0.0016,  0.0215, -0.0188,  ..., -0.0002,  0.0359, -0.0103],
        ...,
        [ 0.0235, -0.0052, -0.0062,  ...,  0.0007, -0.0153, -0.0141],
        [-0.0137,  0.0016,  0.0195,  ..., -0.0227,  0.0271,  0.0067],
        [ 0.0352, -0.0427,  0.0139,  ..., -0.0123, -0.0067, -0.0182]], device='cuda:0', requires_grad=True)
K: tensor([ 1.0391,  0.2969,  0.2432,  0.0162, -0.3125,  0.1299, -0.0403, -0.3223,  0.6406, -0.3184, -0.5391, -0.0232, -1.4375, -0.7812, -0.0918, -0.2617, -0.7969, -0.8398, -0.1089,  0.3281, -0.0645,  0.2891, -0.2773, -0.2910,  0.1855, -0.1885,  0.7500,  0.0574,  0.6484, -0.1914, -0.1147,  1.2031,
         0.6328,  0.7891,  0.0240,  0.2598, -0.1406,  0.3047, -1.3047,  0.3340,  0.8164, -1.0859,  0.1084,  0.2480,  0.1069,  0.1436,  1.4219, -0.2100, -0.0845, -0.1895, -0.1543,  0.4570, -0.3926,  0.2520, -0.1787,  0.3906,  0.6172, -1.2188,  0.6367, -0.0903, -0.0903, -0.2754, -0.0146, -0.1641],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[    -0.0197,     -0.0075,     -0.0299,  ...,      0.0143,      0.0103,      0.0049],
        [     0.0127,     -0.0084,     -0.0174,  ...,     -0.0010,      0.0239,      0.0217],
        [    -0.0124,     -0.0008,     -0.0033,  ...,      0.0012,     -0.0001,     -0.0036],
        ...,
        [    -0.0031,      0.0049,     -0.0153,  ...,     -0.0120,      0.0373,      0.0066],
        [    -0.0015,      0.0173,      0.0164,  ...,     -0.0214,      0.0063,      0.0219],
        [     0.0195,      0.0085,     -0.0175,  ...,      0.0221,     -0.0260,     -0.0230]], device='cuda:0', requires_grad=True)
Q: tensor([-1.0703, -0.0850, -0.3008,  0.3418,  0.3340, -0.9570,  0.5234,  0.6016,  0.4922, -0.1035, -0.5664, -0.3223,  0.6133,  0.2969, -0.0304,  0.6211, -1.3672,  0.0791,  0.1387,  0.6445,  0.3438, -0.3438, -1.2656,  0.6406, -0.9609,  0.0825,  0.1758,  0.3691,  0.9805, -0.2227,  0.6602,  0.1484,
         0.7422,  0.4570,  0.2539, -0.0874, -0.3887, -0.8789, -0.2598,  0.3105, -0.1787, -1.0859, -0.9180, -0.5977, -0.6484, -0.6562, -0.0815, -0.3770,  0.0610,  0.0249, -0.3047, -0.5234, -0.9805,  0.2793, -0.6172, -0.6094, -0.1484,  0.4160, -0.6602,  0.0322, -0.4551,  0.1328,  0.4082, -0.0237],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -0.5742,     -0.0859,     -0.3398,     -0.6328,     -0.2070,     -0.2715,     -0.2090,     -0.2100,     -0.3125,     -0.7656,     -0.1270,     -0.1709,     -0.4238,     -0.6055],
        [     0.0000,      0.0042,      0.0148,      0.6289,     -0.4023,      0.1079,      0.4062,      0.3281,      0.2285,      0.0283,     -0.1484,     -0.4141,      0.1523,     -0.0415,     -0.1777],
        [     0.0000,     -0.0106,      0.4102,      0.0806,     -0.4531,     -0.3672,     -0.1738,     -0.3887,     -0.0388,      0.3262,     -0.0752,      0.0334,      0.1221,     -0.0153,     -0.2354],
        [     0.0000,     -0.0713,      0.2246,     -0.5898,      0.1025,     -0.2773,      0.2188,     -0.1187,      0.0118,      0.1357,     -0.0520,     -0.3516,     -0.5039,      0.2559,     -0.1157],
        [     0.0000,     -0.0010,     -0.2422,     -0.0036,     -0.3535,     -0.1895,     -0.2773,      0.0557,      0.0214,     -0.2500,     -0.1670,     -0.1040,      0.0339,     -0.5156,     -0.0033],
        [     0.0000,     -0.2305,      0.2461,      0.1445,     -0.1016,     -0.2559,     -0.4414,     -0.5547,     -0.1543,     -0.2988,     -0.0505,      0.0854,      0.2715,     -0.3047,     -0.1768],
        [     0.0000,      0.1406,     -0.0264,      0.4316,     -0.3359,      0.2441,     -0.3105,      0.0122,     -0.4512,      0.1260,     -0.5430,     -0.0669,      0.2910,     -0.4727,      0.2559],
        [     0.0000,      0.2480,      0.1094,      0.0972,     -0.1025,      0.1025,     -0.1924,     -0.3281,     -0.1396,      0.0923,     -0.4453,     -0.3887,      0.5586,     -0.1021,     -0.2871],
        [     0.0000,      0.6953,      0.3242,      0.0894,     -0.2100,      0.4102,      0.0771,      0.3691,     -0.1650,     -0.1875,     -0.2383,      0.2012,      0.0060,      0.0520,     -0.2119],
        [     0.0000,     -0.3828,      0.4863,      0.0723,      0.0156,     -0.5195,     -0.2471,     -0.1177,      0.4746,     -0.2090,     -0.1592,      0.4707,     -0.1416,     -0.0190,     -0.0308],
        [     0.0000,     -0.1406,      0.1445,      0.4766,     -0.5938,      0.2207,      0.3926,      0.5039,      0.0332,     -0.0062,     -0.3027,     -0.1045,      0.3359,     -0.0074,     -0.4668],
        [     0.0000,     -1.0234,     -0.2363,     -0.0942,     -1.1016,     -0.6602,     -0.3027,     -0.5781,     -0.0244,     -0.1338,     -0.6328,      0.6172,     -0.0481,     -0.1226,     -0.4746],
        [     0.0000,      0.4062,     -0.1533,     -0.0344,     -0.0728,      0.2656,     -0.0474,      0.1572,      0.0009,      0.0972,      0.0294,     -0.3164,      0.2373,      0.0261,     -0.0664],
        [     0.0000,     -0.6289,     -0.1543,      0.1826,     -0.4375,      0.2256,     -0.0588,      0.0315,      0.0187,      0.0859,     -0.4355,     -0.2754,      0.2871,     -0.1514,      0.0596]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5034],
        [0.3416],
        [0.2411],
        [0.1941],
        [0.1493],
        [0.1364],
        [0.1235],
        [0.1083],
        [0.0907],
        [0.0905],
        [0.0828],
        [0.0703],
        [0.0706],
        [0.0641]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5859, 0.4121, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3555, 0.3301, 0.3145, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2754, 0.2520, 0.2363, 0.2354, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2012, 0.2520, 0.1533, 0.2197, 0.1738, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1914, 0.1709, 0.1504, 0.1445, 0.1455, 0.1973, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1689, 0.1260, 0.1245, 0.1396, 0.1357, 0.1309, 0.1748, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1270, 0.1387, 0.1396, 0.1196, 0.1230, 0.1533, 0.1030, 0.0957, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1348, 0.1436, 0.1196, 0.1016, 0.1089, 0.1089, 0.1108, 0.0903, 0.0815, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1172, 0.1348, 0.1016, 0.1128, 0.1006, 0.0806, 0.0786, 0.0620, 0.0732, 0.1396, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0972, 0.0938, 0.0776, 0.1191, 0.0801, 0.0830, 0.1162, 0.0957, 0.0608, 0.0991, 0.0771, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0947, 0.0957, 0.0996, 0.0820, 0.0723, 0.1021, 0.0703, 0.0598, 0.0757, 0.1074, 0.0752, 0.0645, 0.0000, 0.0000, 0.0000],
        [0.0728, 0.1021, 0.0957, 0.0903, 0.0742, 0.0898, 0.0767, 0.0708, 0.0515, 0.0574, 0.0806, 0.0669, 0.0708, 0.0000, 0.0000],
        [0.0786, 0.0757, 0.0732, 0.0752, 0.0874, 0.0684, 0.0806, 0.0510, 0.0664, 0.0859, 0.0649, 0.0620, 0.0669, 0.0635, 0.0000],
        [0.0581, 0.0557, 0.0664, 0.0850, 0.0664, 0.0815, 0.0603, 0.0767, 0.0554, 0.0679, 0.0623, 0.0659, 0.0603, 0.0713, 0.0659]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0277,  0.0214, -0.0014,  ...,  0.0040, -0.0121, -0.0177],
        [-0.0143, -0.0047,  0.0363,  ...,  0.0081, -0.0052, -0.0098],
        [ 0.0199,  0.0252,  0.0250,  ..., -0.0249,  0.0034, -0.0213],
        ...,
        [ 0.0365,  0.0067,  0.0247,  ...,  0.0430, -0.0101, -0.0009],
        [ 0.0021,  0.0039, -0.0267,  ..., -0.0221,  0.0334,  0.0011],
        [-0.0030, -0.0065,  0.0285,  ..., -0.0089,  0.0283,  0.0285]], device='cuda:0', requires_grad=True)
K: tensor([-0.2734, -0.0601, -0.2656, -0.5469, -0.6328, -0.0566, -1.0078, -0.1465, -0.2139, -0.7930,  0.5469, -0.7305, -0.0620,  0.4668,  0.8203,  0.5273, -0.2207, -1.4531,  0.2334,  1.4531, -0.6328, -0.7305,  0.6016,  0.7578, -0.2539, -1.2656, -0.4688,  0.7852, -0.2715, -0.1982, -0.5664, -0.0996,
        -0.1484,  0.0347,  0.0552, -0.3359,  0.9922,  0.5273,  0.3457,  0.6289, -1.2031, -0.5547,  0.2100,  0.7695, -0.1973,  0.3047,  0.2158, -0.1436,  0.6250, -0.4297, -0.2334, -1.6797,  0.6211,  0.4336,  0.6445, -0.1289,  0.7461,  0.9961,  0.6406,  0.5547, -0.3066, -0.2930, -0.2197, -0.7227],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0288, -0.0082,  0.0229,  ...,  0.0024, -0.0130, -0.0065],
        [-0.0174,  0.0164,  0.0385,  ..., -0.0187, -0.0081, -0.0092],
        [ 0.0346,  0.0225, -0.0184,  ...,  0.0213,  0.0422, -0.0045],
        ...,
        [-0.0482, -0.0153,  0.0189,  ...,  0.0019,  0.0181,  0.0078],
        [-0.0165, -0.0189, -0.0092,  ..., -0.0269,  0.0102, -0.0016],
        [ 0.0028, -0.0438, -0.0014,  ...,  0.0217, -0.0144,  0.0192]], device='cuda:0', requires_grad=True)
Q: tensor([-0.6445,  0.0488, -0.0310, -0.1836, -0.1582, -0.7227,  0.5469,  0.2266, -0.0913, -0.5312, -1.0703,  0.1035, -1.0312,  0.0193,  1.5391,  0.6445, -0.4199,  0.0557, -0.7188,  0.2676,  0.0190,  0.7266, -0.0376, -0.0194,  0.5352,  0.0403,  0.1709,  0.6680, -0.6758,  0.2188, -0.5430,  0.1895,
         0.2891, -0.0713,  0.5117, -0.2031, -0.3066,  0.1836,  0.0569, -0.0491,  0.1387,  0.3984,  0.2871, -0.0610,  0.1768, -0.3027,  0.4180, -0.3711, -0.3262, -0.1777,  0.0049,  0.1309,  0.6602,  0.1216,  0.0339, -0.1982,  0.1885, -0.4121, -0.6328,  0.4297, -1.2188,  0.0576,  0.0874,  0.1875],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -0.3535,     -0.4062,     -0.0684,     -0.2910,     -0.0532,      0.0371,      0.0352,     -0.2891,     -0.1934,     -0.3555,     -0.3691,      0.0508,     -0.0879,      0.1260],
        [     0.0000,     -0.0776,     -0.1260,     -0.0088,     -0.2100,     -0.0145,     -0.3203,      0.0101,     -0.3984,     -0.2061,     -0.2002,     -0.2871,      0.0786,     -0.0942,      0.1299],
        [     0.0000,     -0.0918,     -0.1543,     -0.1582,     -0.2227,     -0.2988,     -0.3828,     -0.0327,     -0.4219,     -0.2266,     -0.2715,     -0.0986,      0.0203,      0.0082,     -0.2314],
        [     0.0000,      0.2256,     -0.2695,      0.0879,     -0.1445,     -0.7148,     -0.1230,     -0.3145,     -0.6016,     -0.5391,     -0.3086,     -0.6484,      0.0054,     -0.1621,     -0.3867],
        [     0.0000,     -0.1089,     -0.2402,     -0.2812,     -0.2734,      0.0337,      0.0081,     -0.2109,     -0.3652,     -0.0679,     -0.0815,     -0.3770,     -0.0554,     -0.1138,     -0.0732],
        [     0.0000,     -0.2930,     -0.3027,     -0.1904,     -0.2158,     -0.2539,      0.0364,     -0.0981,     -0.1445,     -0.3145,     -0.1128,     -0.0515,      0.2461,      0.1318,      0.1758],
        [     0.0000,      0.0913,      0.0996,     -0.0557,     -0.0276,      0.1875,     -0.2051,     -0.2832,     -0.0737,     -0.0062,      0.1162,     -0.1191,     -0.2988,      0.0166,     -0.2188],
        [     0.0000,      0.0664,     -0.1187,     -0.2793,     -0.2109,     -0.2119,     -0.1953,     -0.3965,     -0.5000,     -0.0159,     -0.1973,     -0.4766,     -0.4121,     -0.2207,     -0.4492],
        [     0.0000,      0.1367,     -0.1465,     -0.0415,     -0.1523,     -0.3770,     -0.4043,     -0.6367,     -0.4727,      0.1729,     -0.2324,     -0.1123,     -0.3477,     -0.0674,     -0.5195],
        [     0.0000,     -0.0352,     -0.2236,      0.2021,     -0.1963,     -0.1592,      0.1777,     -0.0183,     -0.4707,      0.0176,     -0.2344,     -0.1177,      0.0299,      0.0012,     -0.2871],
        [     0.0000,      0.0087,      0.0486,     -0.1465,     -0.2754,      0.0723,     -0.2969,     -0.4609,     -0.2236,      0.1250,     -0.2344,     -0.3828,     -0.2969,     -0.0762,     -0.0005],
        [     0.0000,      0.3359,      0.2734,      0.2148,      0.0170,      0.2109,      0.0496,     -0.0281,     -0.3477,     -0.2383,      0.1030,     -0.0854,     -0.0287,      0.0085,     -0.1206],
        [     0.0000,     -0.0374,     -0.0728,     -0.0461,      0.1045,     -0.1445,      0.0205,     -0.4336,     -0.1699,      0.0850,     -0.1914,     -0.2383,     -0.1602,     -0.2129,     -0.4004],
        [     0.0000,     -0.0425,      0.1367,      0.3789,      0.1348,      0.3398,      0.0393,      0.2773,     -0.0488,      0.1582,      0.0688,      0.1299,      0.0388,      0.2070,      0.1289]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5190],
        [0.3394],
        [0.2688],
        [0.1982],
        [0.1775],
        [0.1520],
        [0.1286],
        [0.1136],
        [0.1025],
        [0.0981],
        [0.0885],
        [0.0765],
        [0.0762],
        [0.0650]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5898, 0.4102, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3711, 0.3555, 0.2734, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2354, 0.2676, 0.2988, 0.1992, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1748, 0.2393, 0.1680, 0.2383, 0.1787, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1875, 0.1855, 0.1934, 0.1494, 0.1504, 0.1338, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1582, 0.1533, 0.1211, 0.1172, 0.1689, 0.1670, 0.1133, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1406, 0.1660, 0.1299, 0.1084, 0.1387, 0.1104, 0.1221, 0.0840, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1348, 0.1494, 0.1094, 0.0869, 0.1055, 0.1250, 0.1147, 0.0874, 0.0864, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1118, 0.1118, 0.0996, 0.1016, 0.1025, 0.0879, 0.0786, 0.0693, 0.0933, 0.1436, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1167, 0.0923, 0.0913, 0.0762, 0.1147, 0.0864, 0.0845, 0.0864, 0.0894, 0.0786, 0.0840, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0986, 0.1162, 0.0952, 0.1133, 0.0742, 0.0713, 0.0608, 0.0520, 0.0649, 0.1104, 0.0557, 0.0869, 0.0000, 0.0000, 0.0000],
        [0.0933, 0.0806, 0.0806, 0.0630, 0.0859, 0.0569, 0.0645, 0.0620, 0.0732, 0.0908, 0.0645, 0.1064, 0.0786, 0.0000, 0.0000],
        [0.0815, 0.0923, 0.0645, 0.0718, 0.0713, 0.0923, 0.0728, 0.0579, 0.0574, 0.0605, 0.0654, 0.0674, 0.0767, 0.0684, 0.0000],
        [0.0840, 0.0674, 0.0654, 0.0630, 0.0811, 0.0608, 0.0574, 0.0591, 0.0496, 0.0649, 0.0752, 0.0762, 0.0874, 0.0483, 0.0603]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0191, -0.0311, -0.0153,  ...,  0.0387, -0.0096, -0.0107],
        [-0.0047,  0.0102, -0.0266,  ..., -0.0205, -0.0094,  0.0003],
        [-0.0152, -0.0110,  0.0469,  ..., -0.0405, -0.0264, -0.0060],
        ...,
        [ 0.0137, -0.0058,  0.0205,  ..., -0.0253, -0.0121, -0.0019],
        [ 0.0149,  0.0538,  0.0047,  ...,  0.0394, -0.0045, -0.0082],
        [ 0.0122, -0.0236, -0.0340,  ..., -0.0123, -0.0035, -0.0012]], device='cuda:0', requires_grad=True)
K: tensor([ 0.9219,  0.3398, -0.0601,  0.5625,  0.0091,  0.9062, -0.4023, -0.1050,  0.0287, -0.3965, -0.1211,  0.2275,  0.1602,  0.8203, -0.0603,  0.0266, -0.2910,  0.2354, -0.8164, -0.0981, -0.4629,  0.0547, -0.0381, -0.6289, -0.7344,  0.1021,  0.4102,  0.3398, -0.0618,  0.2139, -0.2539,  0.5742,
        -0.0103, -0.8516, -0.5312, -0.8555, -0.2275, -0.4766, -0.6602, -0.4922,  0.4043,  0.1689, -0.0459, -0.1748, -0.9648,  0.0018,  1.0938, -0.1221, -0.1260,  0.2656, -0.5000, -0.7070, -0.2930, -0.2891,  0.1289,  1.2969,  0.8906,  0.0767, -0.1943,  0.2217,  0.8242,  1.0625,  0.7461, -0.6758],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0001,  0.0078,  0.0056,  ..., -0.0512,  0.0188,  0.0044],
        [-0.0138,  0.0057,  0.0191,  ...,  0.0258, -0.0005,  0.0041],
        [ 0.0393,  0.0030,  0.0303,  ...,  0.0134,  0.0451, -0.0158],
        ...,
        [ 0.0194,  0.0271,  0.0078,  ..., -0.0230,  0.0046,  0.0142],
        [ 0.0022, -0.0341, -0.0097,  ...,  0.0311,  0.0011, -0.0116],
        [-0.0064, -0.0086, -0.0086,  ...,  0.0409,  0.0140,  0.0131]], device='cuda:0', requires_grad=True)
Q: tensor([-0.1226, -0.8867,  0.0698,  0.1885,  0.6758,  0.1748,  0.0134, -0.2188,  0.7070,  1.0312,  0.0366, -0.5234, -0.4883, -0.5508, -0.7109, -0.0732,  0.6914, -0.4980, -0.0967,  0.9180, -0.0776,  1.3203,  0.2441, -0.4805, -0.4844, -0.8516,  0.7656,  0.4766,  0.5195,  0.3105,  1.1016, -0.4727,
         0.0981,  0.4785,  0.3984, -0.0090, -0.4355, -1.0156,  0.6680,  0.2949,  0.9961,  0.2471,  0.3496,  0.3691, -0.4902,  0.7812,  0.4453, -0.6758, -0.3223, -0.4258,  0.3105,  1.1172,  0.4043,  0.5742, -0.9102, -0.7031,  0.2041,  0.0474,  0.3809, -0.0078, -0.1533, -0.0243, -0.8750, -0.6289],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.3672,  0.2930,  0.4902,  0.3320,  0.1191,  0.2021,  0.0110,  0.1680,  0.1377,  0.1006,  1.0156,  0.1768,  0.0110,  0.3477],
        [ 0.0000, -0.0420, -0.3086, -0.2617, -0.2002, -0.2617, -0.5938, -0.7969, -0.2266, -0.2266, -0.6055, -0.2695, -0.0767, -0.3867, -0.5508],
        [ 0.0000,  0.1270,  0.2363, -0.1680,  0.3516,  0.0635,  0.0236, -0.4102,  0.0471,  0.3477, -0.0391,  0.0432,  0.2002, -0.1914, -0.0432],
        [ 0.0000,  0.3105, -0.0400,  0.3086,  0.0204, -0.0420, -0.1787, -0.4551, -0.0093,  0.3711, -0.2061, -0.1738,  0.1021, -0.1221, -0.0173],
        [ 0.0000, -0.0073,  0.0312, -0.2246, -0.2227, -0.3340, -0.2949, -0.5430, -0.1953,  0.0288, -0.6641, -0.0137, -0.2354, -0.4609, -0.4570],
        [ 0.0000, -0.0299, -0.2676, -0.3008,  0.0674,  0.0554, -0.3359, -0.5586, -0.1250,  0.0996, -0.1914, -0.1670, -0.2197, -0.2910, -0.5195],
        [ 0.0000,  0.1641, -0.0854, -0.2617, -0.0177, -0.2471, -0.1445, -0.5195, -0.1768, -0.1260, -0.4082,  0.0081, -0.0957, -0.0889, -0.5195],
        [ 0.0000,  0.1025, -0.2100, -0.4395, -0.2451, -0.0742, -0.1611, -0.4316, -0.4473,  0.0264, -0.2383, -0.0825, -0.1514, -0.3145, -0.3496],
        [ 0.0000, -0.0025, -0.1182, -0.0986, -0.0894, -0.2402, -0.3574, -0.4766, -0.1846,  0.2461, -0.5391, -0.2383, -0.0156, -0.1436, -0.4492],
        [ 0.0000, -0.2334, -0.2461, -0.4258, -0.0173, -0.2988, -0.3223, -0.2988, -0.2695, -0.3965, -0.3301,  0.0275, -0.1318, -0.1631, -0.3633],
        [ 0.0000,  0.1641, -0.0386,  0.1348, -0.2832, -0.3281, -0.4844, -0.6406, -0.4180,  0.1108, -0.5703, -0.1260, -0.1230, -0.5078, -0.6250],
        [ 0.0000, -0.1504, -0.1475, -0.3945, -0.0820, -0.4961, -0.3711, -0.4121, -0.2461, -0.0305, -0.3711,  0.1309, -0.1699, -0.3848, -0.2412],
        [ 0.0000,  0.1206, -0.2354, -0.1309, -0.1357,  0.1250, -0.1167, -0.3418, -0.3535, -0.2988, -0.2236, -0.1914, -0.0625, -0.1748, -0.3203],
        [ 0.0000, -0.2227, -0.2471, -0.2871, -0.0327, -0.3223, -0.3809, -0.3516, -0.5273, -0.2598, -0.1099, -0.0962,  0.0405, -0.5547, -0.3301]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5293],
        [0.3120],
        [0.2448],
        [0.1762],
        [0.1490],
        [0.1475],
        [0.1155],
        [0.1049],
        [0.1014],
        [0.0870],
        [0.0705],
        [0.0729],
        [0.0668],
        [0.0623]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		(465:0.0002Kelly:0.0002Brazil:0.0002 1960:0.0002kj:0.0002 Yes:0.0002 tweaked:0.0002 Joseph:0.0002)
 Joseph
------
		(Kelly:0.0002Brazil:0.0002 1960:0.0002kj:0.0002 Yes:0.0002 tweaked:0.0002 Joseph:0.0002 Prior:0.0002)
 Prior tweakedComビ supplemental objectively airspace wires 530megaymes Yes presc fillingcape
@ 1 train 10.9852 , allloss: 883.8975, dt: 2506.54ms, fracRes: 0.0063, norm(attn): 0.0347, norm(output): 0.9997, norm(x): 0.9936, norm(y): 1.0001, norm:518.8583, tok/sec: 52291.96, flops:54.89, batch-reuse:1
@ 2 train 10.9711 , allloss: 881.5140, dt: 1262.13ms, fracRes: 0.0063, norm(attn): 0.0349, norm(output): 0.9997, norm(x): 0.9936, norm(y): 1.0001, norm:525.2276, tok/sec: 103849.82, flops:109.00, batch-reuse:1
@ 3 train 10.9512 , allloss: 877.8314, dt: 1264.30ms, fracRes: 0.0063, norm(attn): 0.0352, norm(output): 0.9997, norm(x): 0.9936, norm(y): 1.0001, norm:535.1963, tok/sec: 103671.65, flops:108.82, batch-reuse:1
@ 4 train 10.9269 , allloss: 872.8091, dt: 1272.31ms, fracRes: 0.0063, norm(attn): 0.0354, norm(output): 0.9997, norm(x): 0.9936, norm(y): 1.0001, norm:548.9161, tok/sec: 103018.88, flops:108.13, batch-reuse:1
@ 5 train 10.8958 , allloss: 866.2880, dt: 1274.59ms, fracRes: 0.0063, norm(attn): 0.0356, norm(output): 0.9997, norm(x): 0.9936, norm(y): 1.0001, norm:566.2278, tok/sec: 102834.92, flops:107.94, batch-reuse:1
@ 6 train 10.8466 , allloss: 858.0034, dt: 1270.13ms, fracRes: 0.0063, norm(attn): 0.0366, norm(output): 0.9998, norm(x): 0.9936, norm(y): 1.0001, norm:587.7460, tok/sec: 103195.34, flops:108.32, batch-reuse:1
@ 7 train 10.8074 , allloss: 848.0444, dt: 1269.03ms, fracRes: 0.0063, norm(attn): 0.0376, norm(output): 0.9998, norm(x): 0.9936, norm(y): 1.0001, norm:613.1024, tok/sec: 103285.59, flops:108.41, batch-reuse:1
@ 8 train 10.7582 , allloss: 836.1780, dt: 1274.60ms, fracRes: 0.0063, norm(attn): 0.0388, norm(output): 0.9998, norm(x): 0.9936, norm(y): 1.0001, norm:640.5591, tok/sec: 102834.15, flops:107.94, batch-reuse:1
@ 9 train 10.6967 , allloss: 822.2958, dt: 1279.56ms, fracRes: 0.0063, norm(attn): 0.0393, norm(output): 0.9998, norm(x): 0.9936, norm(y): 1.0001, norm:671.1021, tok/sec: 102435.13, flops:107.52, batch-reuse:1
@ 10 train 10.6462 , allloss: 806.4045, dt: 1290.11ms, fracRes: 0.0063, norm(attn): 0.0403, norm(output): 0.9998, norm(x): 0.9936, norm(y): 1.0001, norm:703.0829, tok/sec: 101597.30, flops:106.64, batch-reuse:1
@ 11 train 10.6137 , allloss: 788.6428, dt: 1286.86ms, fracRes: 0.0064, norm(attn): 0.0417, norm(output): 0.9998, norm(x): 0.9936, norm(y): 1.0001, norm:734.9479, tok/sec: 101853.79, flops:106.91, batch-reuse:1
@ 12 train 10.5241 , allloss: 768.7082, dt: 1292.60ms, fracRes: 0.0064, norm(attn): 0.0430, norm(output): 0.9998, norm(x): 0.9937, norm(y): 1.0001, norm:766.3183, tok/sec: 101402.13, flops:106.43, batch-reuse:1
@ 13 train 10.4813 , allloss: 747.1132, dt: 1297.96ms, fracRes: 0.0064, norm(attn): 0.0435, norm(output): 0.9998, norm(x): 0.9937, norm(y): 1.0002, norm:793.5236, tok/sec: 100982.87, flops:105.99, batch-reuse:1
@ 14 train 10.4260 , allloss: 723.8127, dt: 1302.35ms, fracRes: 0.0064, norm(attn): 0.0442, norm(output): 0.9998, norm(x): 0.9937, norm(y): 1.0002, norm:817.6357, tok/sec: 100642.57, flops:105.64, batch-reuse:1
@ 15 train 10.3714 , allloss: 698.8491, dt: 1268.12ms, fracRes: 0.0064, norm(attn): 0.0464, norm(output): 0.9998, norm(x): 0.9937, norm(y): 1.0002, norm:837.2578, tok/sec: 103359.53, flops:108.49, batch-reuse:1
@ 16 train 10.3327 , allloss: 672.7163, dt: 1286.18ms, fracRes: 0.0064, norm(attn): 0.0466, norm(output): 0.9999, norm(x): 0.9937, norm(y): 1.0002, norm:851.7938, tok/sec: 101908.30, flops:106.97, batch-reuse:1
@ 17 train 10.2818 , allloss: 645.2864, dt: 1283.96ms, fracRes: 0.0064, norm(attn): 0.0471, norm(output): 0.9999, norm(x): 0.9937, norm(y): 1.0002, norm:861.2731, tok/sec: 102084.19, flops:107.15, batch-reuse:1
@ 18 train 10.2400 , allloss: 617.0603, dt: 1285.70ms, fracRes: 0.0064, norm(attn): 0.0481, norm(output): 0.9999, norm(x): 0.9937, norm(y): 1.0002, norm:865.8767, tok/sec: 101945.79, flops:107.01, batch-reuse:1
@ 19 train 10.1693 , allloss: 588.1078, dt: 1274.73ms, fracRes: 0.0064, norm(attn): 0.0496, norm(output): 0.9999, norm(x): 0.9937, norm(y): 1.0002, norm:866.1329, tok/sec: 102823.38, flops:107.93, batch-reuse:1
@ 20 train 10.1281 , allloss: 558.8075, dt: 1269.99ms, fracRes: 0.0064, norm(attn): 0.0503, norm(output): 0.9999, norm(x): 0.9937, norm(y): 1.0002, norm:861.7630, tok/sec: 103207.06, flops:108.33, batch-reuse:1
@ 21 train 10.0783 , allloss: 529.3459, dt: 1299.61ms, fracRes: 0.0064, norm(attn): 0.0505, norm(output): 0.9999, norm(x): 0.9937, norm(y): 1.0002, norm:854.3264, tok/sec: 100854.60, flops:105.86, batch-reuse:1
@ 22 train 10.0443 , allloss: 500.1787, dt: 1302.63ms, fracRes: 0.0064, norm(attn): 0.0510, norm(output): 0.9999, norm(x): 0.9938, norm(y): 1.0002, norm:843.6743, tok/sec: 100621.42, flops:105.62, batch-reuse:1
@ 23 train 10.0261 , allloss: 471.5958, dt: 1285.43ms, fracRes: 0.0064, norm(attn): 0.0510, norm(output): 0.9999, norm(x): 0.9938, norm(y): 1.0002, norm:830.1302, tok/sec: 101967.40, flops:107.03, batch-reuse:1
@ 24 train 9.9919 , allloss: 443.7488, dt: 1293.93ms, fracRes: 0.0064, norm(attn): 0.0518, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:814.7829, tok/sec: 101297.57, flops:106.33, batch-reuse:1
@ 25 train 9.8992 , allloss: 416.5458, dt: 1299.38ms, fracRes: 0.0064, norm(attn): 0.0518, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:798.1578, tok/sec: 100872.55, flops:105.88, batch-reuse:1
@ 26 train 9.8949 , allloss: 390.9439, dt: 1298.25ms, fracRes: 0.0065, norm(attn): 0.0537, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:780.2458, tok/sec: 100960.16, flops:105.97, batch-reuse:1
@ 27 train 9.8650 , allloss: 366.5473, dt: 1303.36ms, fracRes: 0.0065, norm(attn): 0.0537, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:761.9608, tok/sec: 100564.79, flops:105.56, batch-reuse:1
@ 28 train 9.8351 , allloss: 343.7576, dt: 1311.29ms, fracRes: 0.0065, norm(attn): 0.0544, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:743.3275, tok/sec: 99956.33, flops:104.92, batch-reuse:1
@ 29 train 9.8074 , allloss: 322.5724, dt: 1283.78ms, fracRes: 0.0065, norm(attn): 0.0544, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:724.2798, tok/sec: 102098.58, flops:107.17, batch-reuse:1
@ 30 train 9.7554 , allloss: 302.8996, dt: 1301.63ms, fracRes: 0.0065, norm(attn): 0.0544, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:705.5649, tok/sec: 100698.41, flops:105.70, batch-reuse:1
@ 31 train 9.7629 , allloss: 284.9695, dt: 1322.59ms, fracRes: 0.0065, norm(attn): 0.0544, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:686.8870, tok/sec: 99102.17, flops:104.02, batch-reuse:1
@ 32 train 9.7165 , allloss: 268.7726, dt: 1303.81ms, fracRes: 0.0065, norm(attn): 0.0547, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:668.0022, tok/sec: 100530.14, flops:105.52, batch-reuse:1
@ 33 train 9.6603 , allloss: 254.2143, dt: 1291.31ms, fracRes: 0.0065, norm(attn): 0.0549, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:649.4345, tok/sec: 101503.03, flops:106.54, batch-reuse:1
@ 34 train 9.6640 , allloss: 241.9994, dt: 1307.76ms, fracRes: 0.0065, norm(attn): 0.0549, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:631.2571, tok/sec: 100226.63, flops:105.20, batch-reuse:1
@ 35 train 9.6497 , allloss: 231.5775, dt: 1291.99ms, fracRes: 0.0066, norm(attn): 0.0549, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0002, norm:613.6401, tok/sec: 101449.44, flops:106.48, batch-reuse:1
@ 36 train 9.6182 , allloss: 222.7393, dt: 1303.00ms, fracRes: 0.0066, norm(attn): 0.0549, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0003, norm:596.9966, tok/sec: 100592.17, flops:105.58, batch-reuse:1
@ 37 train 9.5964 , allloss: 216.0228, dt: 1310.67ms, fracRes: 0.0066, norm(attn): 0.0554, norm(output): 1.0000, norm(x): 0.9938, norm(y): 1.0003, norm:580.9976, tok/sec: 100004.10, flops:104.97, batch-reuse:1
@ 38 train 9.5717 , allloss: 210.1364, dt: 1296.94ms, fracRes: 0.0066, norm(attn): 0.0554, norm(output): 1.0001, norm(x): 0.9938, norm(y): 1.0003, norm:565.4480, tok/sec: 101062.77, flops:106.08, batch-reuse:1
@ 39 train 9.5653 , allloss: 205.0154, dt: 1311.85ms, fracRes: 0.0066, norm(attn): 0.0557, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:550.3485, tok/sec: 99913.98, flops:104.87, batch-reuse:1
@ 40 train 9.5183 , allloss: 200.2474, dt: 1298.77ms, fracRes: 0.0067, norm(attn): 0.0557, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:535.9688, tok/sec: 100920.44, flops:105.93, batch-reuse:1
@ 41 train 9.5041 , allloss: 195.6162, dt: 1318.02ms, fracRes: 0.0067, norm(attn): 0.0557, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:521.8059, tok/sec: 99446.29, flops:104.38, batch-reuse:1
@ 42 train 9.4875 , allloss: 191.2186, dt: 1295.23ms, fracRes: 0.0067, norm(attn): 0.0557, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:508.1111, tok/sec: 101195.91, flops:106.22, batch-reuse:1
@ 43 train 9.4897 , allloss: 186.9198, dt: 1288.90ms, fracRes: 0.0068, norm(attn): 0.0557, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:495.0561, tok/sec: 101692.96, flops:106.74, batch-reuse:1
@ 44 train 9.4900 , allloss: 182.8575, dt: 1293.09ms, fracRes: 0.0068, norm(attn): 0.0566, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:482.7935, tok/sec: 101363.24, flops:106.39, batch-reuse:1
@ 45 train 9.4453 , allloss: 178.9754, dt: 1318.37ms, fracRes: 0.0068, norm(attn): 0.0576, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:471.1647, tok/sec: 99419.39, flops:104.35, batch-reuse:1
@ 46 train 9.4101 , allloss: 175.2921, dt: 1311.39ms, fracRes: 0.0069, norm(attn): 0.0579, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:460.1028, tok/sec: 99948.93, flops:104.91, batch-reuse:1
@ 47 train 9.3791 , allloss: 171.8519, dt: 1310.60ms, fracRes: 0.0069, norm(attn): 0.0579, norm(output): 1.0001, norm(x): 0.9937, norm(y): 1.0003, norm:449.4538, tok/sec: 100009.23, flops:104.97, batch-reuse:1
@ 48 train 9.3732 , allloss: 168.6097, dt: 1296.64ms, fracRes: 0.0069, norm(attn): 0.0583, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0003, norm:439.3015, tok/sec: 101086.08, flops:106.10, batch-reuse:1
@ 49 train 9.3733 , allloss: 165.6646, dt: 1301.48ms, fracRes: 0.0070, norm(attn): 0.0583, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0003, norm:429.2693, tok/sec: 100710.23, flops:105.71, batch-reuse:1
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5039, 0.4980, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2676, 0.3926, 0.3398, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2832, 0.2969, 0.1309, 0.2871, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1943, 0.2383, 0.1777, 0.2256, 0.1641, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1807, 0.1621, 0.1807, 0.1387, 0.2324, 0.1060, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1099, 0.1787, 0.1553, 0.1201, 0.1216, 0.1221, 0.1934, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1445, 0.1250, 0.0684, 0.0957, 0.2402, 0.0981, 0.0991, 0.1289, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0991, 0.1152, 0.1592, 0.1187, 0.1030, 0.0913, 0.1191, 0.1040, 0.0903, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0967, 0.0564, 0.0757, 0.1260, 0.0796, 0.0908, 0.1357, 0.1118, 0.0967, 0.1299, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0913, 0.0947, 0.0957, 0.0938, 0.0991, 0.0830, 0.0825, 0.0835, 0.0845, 0.0859, 0.1055, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0688, 0.0461, 0.0972, 0.0879, 0.1602, 0.0564, 0.0747, 0.0457, 0.1279, 0.0635, 0.0742, 0.0981, 0.0000, 0.0000, 0.0000],
        [0.0698, 0.0845, 0.0801, 0.0500, 0.0415, 0.0884, 0.0579, 0.0830, 0.0708, 0.0605, 0.1611, 0.0708, 0.0811, 0.0000, 0.0000],
        [0.0752, 0.0737, 0.0850, 0.1060, 0.0649, 0.0884, 0.0796, 0.0659, 0.0366, 0.0566, 0.0432, 0.1064, 0.0693, 0.0488, 0.0000],
        [0.0591, 0.0474, 0.0718, 0.0635, 0.0544, 0.0630, 0.0430, 0.1133, 0.0564, 0.1133, 0.0601, 0.0728, 0.0518, 0.0654, 0.0649]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0307, -0.0150, -0.0149,  ...,  0.0285, -0.0191, -0.0052],
        [-0.0213,  0.0179,  0.0131,  ..., -0.0119, -0.0063, -0.0300],
        [-0.0079,  0.0247,  0.0248,  ..., -0.0189, -0.0201, -0.0075],
        ...,
        [ 0.0135,  0.0321,  0.0255,  ..., -0.0179, -0.0154, -0.0248],
        [-0.0058,  0.0098,  0.0064,  ...,  0.0276, -0.0266,  0.0070],
        [-0.0097,  0.0121, -0.0275,  ..., -0.0079, -0.0261,  0.0032]], device='cuda:0', requires_grad=True)
K: tensor([ 0.0427,  0.4023,  0.1523, -0.7930, -0.7188, -0.0258, -0.6055, -0.9492,  0.2559, -0.8008, -0.4629, -0.2812, -0.7578,  0.4023,  0.2090, -0.8555,  0.4414,  0.4570,  0.2021, -0.0938, -0.2080, -0.1982,  0.4824, -0.0393, -0.4023, -0.7969, -0.4336,  0.1338,  0.1069, -0.5820,  0.4766, -0.7305,
         0.2969, -1.2578, -0.3926,  0.0713, -1.0938, -0.8438,  0.4043,  0.2852, -0.9531, -0.2949, -0.6094, -0.0024,  0.7422, -0.0206, -0.0251, -0.0747,  0.2383, -0.2773,  0.9883,  0.4844, -0.5820,  0.6719,  0.0250, -0.3613, -1.8047, -1.1484,  0.0171,  0.2383,  0.2227, -0.2061,  0.7305, -0.2891],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0048,  0.0033,  0.0126,  ..., -0.0061, -0.0314,  0.0078],
        [ 0.0047, -0.0129,  0.0054,  ...,  0.0007, -0.0134, -0.0142],
        [ 0.0138,  0.0256,  0.0275,  ...,  0.0267,  0.0120, -0.0142],
        ...,
        [-0.0121,  0.0199,  0.0198,  ...,  0.0041,  0.0030, -0.0393],
        [-0.0258,  0.0096, -0.0443,  ...,  0.0182, -0.0200, -0.0124],
        [ 0.0036,  0.0194, -0.0172,  ...,  0.0036,  0.0143, -0.0071]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.0483,  0.1836,  0.5547,  0.8633, -0.2891, -0.1445, -0.2031,  0.7734, -0.6328, -0.4473, -0.4648,  0.1089,  0.1396,  0.1934,  0.0111,  0.0493, -0.6523,  0.0947, -0.5469,  0.3672, -0.1797, -0.2754, -0.5859,  0.6367,  0.3398,  0.3066, -0.4688,  0.0659,  0.8711,  0.0552,  0.5273, -0.9375,
         0.8477,  0.2754, -0.1025,  0.9414, -0.5781,  0.3828,  0.0762, -0.2051, -1.1953, -0.3555, -1.5312, -0.2090, -0.1328, -0.3730, -0.6250, -0.4473,  0.0908,  0.0825, -0.2490, -0.8867,  0.3457, -0.6406, -0.3281,  0.6133, -0.0262, -0.0052, -0.8164,  0.9688,  0.4863,  0.1328, -0.2773, -0.2812],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -0.0114,      0.0106,     -0.3281,      0.1768,     -0.2246,     -0.0598,      0.1045,     -0.0177,      0.1436,      0.2773,      0.2207,      0.1982,     -0.0757,      0.1099],
        [     0.0000,      0.3809,      0.2373,      0.5898,     -0.3613,      0.4551,     -0.0918,     -0.6289,     -0.2578,     -0.0786,     -1.1016,     -0.4492,     -0.0067,     -0.2041,     -0.1846],
        [     0.0000,      0.0476,     -0.7734,      0.0129,      0.5391,     -0.0879,      0.6602,      0.0908,     -0.1865,     -0.2422,      0.1660,      0.5352,      0.2734,     -0.0271,      0.0417],
        [     0.0000,      0.2061,     -0.0874,      0.1504,     -0.1650,     -0.3652,      0.0518,      0.1982,      0.2168,      0.2412,      0.0547,      0.1016,     -0.3965,      0.0181,      0.3301],
        [     0.0000,     -0.1074,      0.0032,     -0.2637,      0.2520,     -0.5312,      0.2393,     -0.4766,     -0.0342,      0.1504,      0.2480,     -0.4199,     -0.6172,     -0.4062,     -0.3320],
        [     0.0000,      0.4863,      0.3438,      0.0908,      0.1016,      0.1064,      0.5664,      0.1094,     -0.5586,      0.0957,      0.2773,     -0.3516,      0.2969,     -0.4902,     -0.3711],
        [     0.0000,     -0.1406,     -0.7422,     -0.4102,      0.5117,     -0.3848,     -0.3770,     -0.1138,      0.2578,     -0.3711,      0.4922,      0.4980,      0.3047,      0.2734,      0.4824],
        [     0.0000,      0.1475,      0.4707,      0.1787,      0.0371,     -0.0820,      0.1816,      0.0466,     -0.0938,     -0.5156,     -0.0874,      0.1348,      0.5039,     -0.5273,     -0.0991],
        [     0.0000,     -0.5391,     -0.2461,      0.2695,     -0.1953,     -0.0605,      0.3438,      0.1484,      0.0034,      0.2988,      0.3594,      0.0713,     -0.1328,     -0.3027,      0.0007],
        [     0.0000,      0.0393,      0.0503,      0.0291,      0.0854,     -0.0947,     -0.0996,     -0.0879,     -0.0791,     -0.0625,      0.1475,      0.1982,      0.0058,     -0.0435,     -0.2773],
        [     0.0000,     -0.4004,      0.3418,      0.2441,      0.8438,     -0.2012,      0.0786,     -0.4102,      0.6211,     -0.0850,      0.0757,      0.3535,     -0.0664,      0.5820,     -0.0889],
        [     0.0000,      0.1914,      0.1357,     -0.3340,     -0.5195,      0.2373,     -0.1865,      0.1738,      0.0157,     -0.1416,      0.8320,      0.0140,      0.1504,      0.0425,      0.0237],
        [     0.0000,     -0.0255,      0.1182,      0.3418,     -0.1504,      0.1572,      0.0542,     -0.1309,     -0.7227,     -0.2852,     -0.5547,      0.3477,     -0.0859,     -0.4336,     -0.5547],
        [     0.0000,     -0.2217,      0.1924,      0.0708,     -0.0815,      0.0664,     -0.3203,      0.6484,     -0.0461,      0.6523,      0.0153,      0.2080,     -0.1348,      0.1035,      0.0918]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4759],
        [0.3325],
        [0.2417],
        [0.2075],
        [0.1661],
        [0.1383],
        [0.1275],
        [0.1067],
        [0.0946],
        [0.0873],
        [0.0780],
        [0.0720],
        [0.0695],
        [0.0630]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.4668, 0.5352, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3887, 0.3027, 0.3086, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2432, 0.2188, 0.2695, 0.2695, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2178, 0.1445, 0.2275, 0.1885, 0.2217, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1709, 0.1738, 0.1865, 0.1270, 0.1826, 0.1602, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1416, 0.1602, 0.1504, 0.1709, 0.1416, 0.1348, 0.1006, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1074, 0.1270, 0.1465, 0.1436, 0.1235, 0.1436, 0.0840, 0.1235, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1230, 0.0850, 0.1167, 0.0938, 0.1050, 0.0986, 0.0942, 0.1484, 0.1357, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0918, 0.0864, 0.0962, 0.1133, 0.1235, 0.0942, 0.0928, 0.0732, 0.1221, 0.1064, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0776, 0.0640, 0.0981, 0.0918, 0.1064, 0.0786, 0.0640, 0.0894, 0.1260, 0.0962, 0.1084, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0703, 0.0684, 0.0913, 0.0820, 0.0737, 0.0840, 0.0613, 0.0933, 0.0850, 0.0991, 0.0908, 0.1001, 0.0000, 0.0000, 0.0000],
        [0.0801, 0.0554, 0.0698, 0.0645, 0.0757, 0.0571, 0.0552, 0.0913, 0.0688, 0.0908, 0.1289, 0.0981, 0.0640, 0.0000, 0.0000],
        [0.0752, 0.0640, 0.0757, 0.0618, 0.0596, 0.0752, 0.0571, 0.0845, 0.0728, 0.0684, 0.0835, 0.1045, 0.0620, 0.0562, 0.0000],
        [0.0654, 0.0518, 0.0649, 0.0623, 0.0762, 0.0549, 0.0479, 0.0669, 0.0889, 0.0728, 0.0811, 0.1025, 0.0493, 0.0554, 0.0596]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0001, -0.0039,  0.0527,  ...,  0.0355, -0.0110, -0.0097],
        [ 0.0060,  0.0315, -0.0050,  ..., -0.0097,  0.0226,  0.0079],
        [ 0.0194,  0.0034, -0.0097,  ..., -0.0180, -0.0278, -0.0035],
        ...,
        [-0.0387,  0.0075, -0.0007,  ..., -0.0164, -0.0346,  0.0271],
        [-0.0177, -0.0023,  0.0278,  ...,  0.0229, -0.0210,  0.0040],
        [ 0.0004,  0.0018, -0.0153,  ...,  0.0187, -0.0106, -0.0221]], device='cuda:0', requires_grad=True)
K: tensor([-0.4082, -0.6055,  0.4277,  1.8359, -0.1797,  0.3066, -0.5820,  0.0330, -0.6172, -0.2061, -0.4316, -0.4004,  0.2061,  0.4102,  0.8594,  0.0098, -0.3730,  0.1963, -0.6758, -1.3906, -0.5977,  0.8789, -0.2256, -0.5820,  0.7656,  0.3789,  0.3145, -1.0469,  0.4102, -0.4844, -0.0508, -0.3594,
        -0.1221,  0.7422,  0.8281,  0.1504, -0.3281,  0.1582, -0.7969, -0.7812,  0.1328, -0.2578, -0.4805, -0.9609,  0.4277, -0.1982,  0.8906,  0.3008,  0.0068, -0.5898, -0.1494,  0.2256,  0.7500, -0.0041, -0.2695,  0.2451, -0.0728, -0.0540,  0.5508, -0.4902,  0.4941,  0.6641, -0.4004, -0.5508],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0520, -0.0375, -0.0183,  ..., -0.0090,  0.0030, -0.0004],
        [ 0.0252, -0.0233,  0.0155,  ...,  0.0025,  0.0326,  0.0525],
        [ 0.0035,  0.0359,  0.0106,  ..., -0.0031,  0.0031,  0.0048],
        ...,
        [ 0.0068, -0.0143,  0.0110,  ..., -0.0289, -0.0050, -0.0069],
        [-0.0006,  0.0018,  0.0229,  ..., -0.0137,  0.0186,  0.0373],
        [-0.0006,  0.0078, -0.0121,  ...,  0.0461,  0.0056, -0.0010]], device='cuda:0', requires_grad=True)
Q: tensor([ 0.2578, -0.2197,  0.0437, -0.4883,  0.1934,  0.9883,  0.0688,  0.2988, -0.4727,  0.5664, -0.1318,  0.7461,  0.4375, -0.3008, -0.7148,  0.1875, -0.0118,  0.2754, -0.0933,  1.3438,  0.6328,  0.5781, -0.8242, -0.4043,  0.1689,  0.0688, -0.6055,  0.5039, -0.2461, -0.2910,  0.5156, -0.2969,
         0.8125,  0.1426, -0.5195,  0.2676,  0.0845, -0.5273, -1.4844, -0.2754,  0.0327,  0.2490, -0.1670,  0.4414,  0.4570, -0.0092,  1.0859, -0.0253,  0.2275,  0.4512, -0.8125,  0.1128,  0.3535, -0.6328,  0.1855,  0.8555, -0.4473, -0.2139, -0.0923, -0.4160,  0.3184,  0.3594, -0.3594,  0.8359],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.1357,  0.1982, -0.0017,  0.2676,  0.1543, -0.3398,  0.2930,  0.1328,  0.2656,  0.2295,  0.6133,  0.1201, -0.0080,  0.2656],
        [ 0.0000, -0.2480, -0.2314, -0.2197, -0.0732, -0.2178, -0.2031,  0.0688, -0.0574,  0.1611,  0.3945,  0.1396, -0.0918, -0.2832,  0.0732],
        [ 0.0000, -0.1035,  0.1011,  0.1064,  0.3320,  0.0718, -0.3867,  0.3438,  0.2598,  0.3418,  0.3066,  0.3457,  0.1699, -0.0050,  0.1836],
        [ 0.0000, -0.4082,  0.0452, -0.1455,  0.0192, -0.3125, -0.4258, -0.0076, -0.1650,  0.2832,  0.0288,  0.0222, -0.0591, -0.3633,  0.0654],
        [ 0.0000,  0.0154,  0.0869, -0.2930,  0.0664, -0.0645, -0.1396,  0.1035, -0.1328,  0.1084,  0.2520,  0.1494, -0.1167, -0.3555, -0.0703],
        [ 0.0000,  0.1260,  0.0583,  0.1865,  0.0016, -0.0496, -0.3398, -0.1079,  0.0659, -0.1631,  0.0918,  0.0869, -0.1406, -0.2031, -0.1992],
        [ 0.0000,  0.1660,  0.3105,  0.2891,  0.1387,  0.2910, -0.2490,  0.1377,  0.4238,  0.0219,  0.4180,  0.4414,  0.2930,  0.0815,  0.1758],
        [ 0.0000, -0.3711, -0.0535, -0.2734, -0.1592, -0.2227, -0.2656,  0.1875,  0.0962,  0.0723,  0.1494,  0.0742, -0.1768, -0.2871, -0.1807],
        [ 0.0000, -0.0608,  0.0503,  0.2109,  0.2969,  0.0299,  0.0139, -0.2207,  0.2871,  0.1514,  0.1621,  0.4180,  0.0679,  0.0718, -0.0066],
        [ 0.0000, -0.1904,  0.2373,  0.1719,  0.3184,  0.0153, -0.1934,  0.1426,  0.4844,  0.2148,  0.3359,  0.3340,  0.1416,  0.2246, -0.0270],
        [ 0.0000, -0.0309,  0.2598,  0.1543,  0.0449,  0.1738, -0.1406,  0.2793,  0.1885,  0.3418,  0.2520,  0.3496,  0.0811,  0.0306,  0.1836],
        [ 0.0000, -0.3691, -0.1387, -0.2197, -0.0559, -0.3379, -0.3730,  0.1289, -0.1533,  0.1260,  0.4727,  0.2002, -0.2236, -0.1621, -0.0483],
        [ 0.0000, -0.1631,  0.0049, -0.1973, -0.2295,  0.0021, -0.2715,  0.1182, -0.0315, -0.0952,  0.1040,  0.3320, -0.1914, -0.2891, -0.2012],
        [ 0.0000, -0.2314, -0.0058, -0.0469,  0.1523, -0.1719, -0.3086,  0.0244,  0.3066,  0.1108,  0.2188,  0.4531, -0.2793, -0.1641, -0.0898]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5495],
        [0.3605],
        [0.2645],
        [0.2162],
        [0.1835],
        [0.1353],
        [0.1382],
        [0.1214],
        [0.1097],
        [0.0922],
        [0.0942],
        [0.0843],
        [0.0832],
        [0.0717]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.6328, 0.3691, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3574, 0.3125, 0.3301, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2988, 0.2021, 0.2480, 0.2520, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2109, 0.1934, 0.2090, 0.2070, 0.1787, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2246, 0.1631, 0.1602, 0.1768, 0.1338, 0.1426, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1787, 0.1309, 0.1514, 0.1572, 0.1240, 0.1318, 0.1260, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1680, 0.1143, 0.1250, 0.1436, 0.1016, 0.1133, 0.1113, 0.1235, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1338, 0.1138, 0.1177, 0.1260, 0.0981, 0.0972, 0.1099, 0.1006, 0.1035, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0996, 0.1113, 0.1108, 0.1133, 0.0796, 0.0972, 0.0972, 0.1099, 0.0889, 0.0918, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1021, 0.0801, 0.1060, 0.1069, 0.0874, 0.0786, 0.0894, 0.0830, 0.1006, 0.0854, 0.0811, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1030, 0.0688, 0.0864, 0.1001, 0.0664, 0.0767, 0.0908, 0.0908, 0.0820, 0.0850, 0.0640, 0.0859, 0.0000, 0.0000, 0.0000],
        [0.1138, 0.0605, 0.0762, 0.0864, 0.0610, 0.0645, 0.0767, 0.0688, 0.0757, 0.0801, 0.0605, 0.0894, 0.0864, 0.0000, 0.0000],
        [0.0835, 0.0762, 0.0698, 0.0786, 0.0645, 0.0669, 0.0693, 0.0718, 0.0703, 0.0737, 0.0601, 0.0688, 0.0781, 0.0688, 0.0000],
        [0.0830, 0.0559, 0.0679, 0.0762, 0.0593, 0.0645, 0.0703, 0.0659, 0.0649, 0.0688, 0.0518, 0.0654, 0.0757, 0.0615, 0.0684]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0011,  0.0170,  0.0678,  ...,  0.0197, -0.0186, -0.0249],
        [ 0.0320,  0.0070,  0.0020,  ...,  0.0016,  0.0044,  0.0027],
        [-0.0010,  0.0211, -0.0183,  ..., -0.0008,  0.0355, -0.0108],
        ...,
        [ 0.0243, -0.0060, -0.0055,  ...,  0.0003, -0.0161, -0.0149],
        [-0.0129,  0.0008,  0.0203,  ..., -0.0231,  0.0263,  0.0059],
        [ 0.0360, -0.0435,  0.0146,  ..., -0.0127, -0.0073, -0.0190]], device='cuda:0', requires_grad=True)
K: tensor([ 0.6719,  0.1924,  0.0232,  0.9102, -0.2773,  0.3516,  0.1943, -0.3418,  0.0082, -0.7773, -0.0732, -0.2090, -1.4297, -0.6250,  0.0781,  0.0728, -0.3574, -1.1797,  0.3398,  0.7266, -0.5117,  0.3555, -0.5273, -0.5195, -0.3105, -0.0250,  0.2578,  0.0386, -0.0623, -0.1738, -0.2695,  0.6406,
        -0.4688,  0.9180, -0.8789,  0.5781,  1.0234, -0.5938, -0.8633,  0.0649,  1.6094, -1.2188,  0.1982, -0.1836,  0.0825, -0.0825,  1.5078, -0.1162, -0.4141, -0.7539,  0.3301,  0.5234,  0.3047,  0.2676,  0.0145,  0.8281,  1.0781, -1.0312,  1.3047,  0.1621, -0.1455, -0.0461,  0.2373, -0.1270],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[    -0.0196,     -0.0081,     -0.0299,  ...,      0.0137,      0.0099,      0.0046],
        [     0.0136,     -0.0092,     -0.0167,  ...,     -0.0015,      0.0231,      0.0209],
        [    -0.0132,     -0.0000,     -0.0040,  ...,      0.0017,      0.0007,     -0.0028],
        ...,
        [    -0.0039,      0.0057,     -0.0161,  ...,     -0.0115,      0.0381,      0.0074],
        [    -0.0023,      0.0180,      0.0157,  ...,     -0.0210,      0.0071,      0.0226],
        [     0.0193,      0.0085,     -0.0175,  ...,      0.0223,     -0.0262,     -0.0229]], device='cuda:0', requires_grad=True)
Q: tensor([-0.3145, -0.2812, -1.2969,  0.5781,  0.6836, -0.6094,  0.5039,  0.4453,  0.4219,  0.5273, -1.0547, -0.2852,  0.4297,  0.9844, -0.1279,  0.5664, -0.9414,  0.8164, -0.2471,  0.1562,  0.2949, -0.0437, -1.0000,  0.1406, -0.6250,  0.1465, -0.1182, -0.2305,  0.1118,  0.1797, -0.1797,  0.3516,
         0.9570,  0.8867,  0.4395, -0.0957, -0.1187, -0.5625,  0.2354,  0.1797,  0.1680, -0.8086, -0.6836, -0.4707, -0.5195, -0.8789,  0.3125,  0.0474, -0.0297, -0.2910, -0.4453, -1.4766, -0.6719, -0.0292,  0.5273, -0.2812,  0.0033,  0.4023, -0.2012, -0.0216, -0.2793,  0.3672,  0.3438, -0.7227],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.5352, -0.4023, -0.4355, -0.6641, -0.5703, -0.3379, -0.5781, -0.5781, -0.5078, -0.8281, -0.5156, -0.4238, -0.6797, -0.6406],
        [ 0.0000, -0.1348, -0.0815,  0.0767, -0.3027, -0.2041, -0.0060, -0.2080, -0.1807, -0.2041, -0.4844, -0.2275, -0.0344, -0.2451, -0.1709],
        [ 0.0000, -0.3906, -0.1865, -0.1709, -0.4648, -0.4531, -0.3672, -0.4355, -0.3496, -0.2441, -0.4746, -0.2637, -0.2715, -0.3730, -0.3809],
        [ 0.0000, -0.0835, -0.0060, -0.0170, -0.1641, -0.1934, -0.0214, -0.1680, -0.0952, -0.1167, -0.3262, -0.1040, -0.1289, -0.1172, -0.1211],
        [ 0.0000, -0.3223, -0.3398, -0.2383, -0.5195, -0.4570, -0.3828, -0.4141, -0.3984, -0.4414, -0.5898, -0.3281, -0.2520, -0.5117, -0.4160],
        [ 0.0000, -0.3125, -0.1631, -0.1299, -0.3633, -0.3047, -0.3477, -0.4277, -0.3008, -0.2334, -0.3984, -0.1484, -0.1172, -0.3770, -0.2676],
        [ 0.0000, -0.3828, -0.2949, -0.1533, -0.5039, -0.3926, -0.4121, -0.3086, -0.4414, -0.2656, -0.6211, -0.3184, -0.2217, -0.4688, -0.3633],
        [ 0.0000, -0.1592, -0.1279, -0.0579, -0.3086, -0.3184, -0.1963, -0.2852, -0.2539, -0.1973, -0.4297, -0.2305, -0.1006, -0.2754, -0.2891],
        [ 0.0000,  0.1094,  0.1050,  0.1279, -0.2256, -0.0242, -0.0278,  0.0952, -0.1172, -0.0815, -0.2891, -0.0479, -0.0718, -0.1367, -0.0742],
        [ 0.0000, -0.2441,  0.0347,  0.0439, -0.1572, -0.2617, -0.1328, -0.2080, -0.0177, -0.1777, -0.2295,  0.0091, -0.0757, -0.1504, -0.1055],
        [ 0.0000, -0.4043, -0.1797, -0.0308, -0.4414, -0.2988, -0.1260, -0.1309, -0.2295, -0.1973, -0.4785, -0.1846, -0.0884, -0.2637, -0.3086],
        [ 0.0000, -0.6289, -0.4023, -0.2773, -0.6211, -0.5664, -0.3965, -0.5039, -0.4062, -0.3555, -0.6289, -0.2412, -0.2754, -0.4316, -0.5195],
        [ 0.0000, -0.0913, -0.1768, -0.0618, -0.2578, -0.2236, -0.1855, -0.1523, -0.1709, -0.1260, -0.3262, -0.1914, -0.0649, -0.1914, -0.1943],
        [ 0.0000, -0.3965, -0.1992, -0.0889, -0.3340, -0.2559, -0.1670, -0.2354, -0.2432, -0.1875, -0.4727, -0.2373, -0.0903, -0.3008, -0.1973]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5306],
        [0.3703],
        [0.2733],
        [0.2088],
        [0.1806],
        [0.1519],
        [0.1414],
        [0.1200],
        [0.1024],
        [0.1007],
        [0.0920],
        [0.0821],
        [0.0797],
        [0.0726]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5195, 0.4805, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3652, 0.3301, 0.3047, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2832, 0.2559, 0.2314, 0.2305, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2324, 0.2090, 0.1885, 0.1855, 0.1846, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1982, 0.1777, 0.1592, 0.1562, 0.1553, 0.1543, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1748, 0.1543, 0.1377, 0.1348, 0.1338, 0.1328, 0.1318, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1553, 0.1367, 0.1216, 0.1191, 0.1177, 0.1172, 0.1162, 0.1167, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1396, 0.1226, 0.1089, 0.1064, 0.1055, 0.1050, 0.1040, 0.1040, 0.1035, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1270, 0.1113, 0.0986, 0.0967, 0.0957, 0.0947, 0.0942, 0.0942, 0.0938, 0.0938, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1162, 0.1016, 0.0903, 0.0884, 0.0874, 0.0869, 0.0859, 0.0859, 0.0859, 0.0859, 0.0859, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1084, 0.0942, 0.0835, 0.0811, 0.0801, 0.0796, 0.0791, 0.0791, 0.0786, 0.0786, 0.0786, 0.0786, 0.0000, 0.0000, 0.0000],
        [0.1006, 0.0874, 0.0771, 0.0752, 0.0742, 0.0737, 0.0732, 0.0732, 0.0732, 0.0732, 0.0728, 0.0728, 0.0728, 0.0000, 0.0000],
        [0.0938, 0.0815, 0.0723, 0.0703, 0.0693, 0.0688, 0.0684, 0.0684, 0.0679, 0.0679, 0.0679, 0.0679, 0.0679, 0.0674, 0.0000],
        [0.0884, 0.0762, 0.0674, 0.0659, 0.0649, 0.0645, 0.0640, 0.0640, 0.0635, 0.0640, 0.0635, 0.0635, 0.0635, 0.0630, 0.0635]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0270,  0.0209, -0.0012,  ...,  0.0034, -0.0121, -0.0182],
        [-0.0146, -0.0051,  0.0365,  ...,  0.0077, -0.0054, -0.0098],
        [ 0.0206,  0.0258,  0.0249,  ..., -0.0242,  0.0032, -0.0207],
        ...,
        [ 0.0364,  0.0064,  0.0242,  ...,  0.0429, -0.0102, -0.0008],
        [ 0.0016,  0.0035, -0.0266,  ..., -0.0225,  0.0331,  0.0006],
        [-0.0037, -0.0071,  0.0285,  ..., -0.0096,  0.0285,  0.0280]], device='cuda:0', requires_grad=True)
K: tensor([-0.8516, -0.4551, -0.2012, -0.1387, -0.3418,  0.6992, -1.0391,  0.6133,  0.1875,  0.5234, -0.3828, -0.2617, -0.9375,  0.3672, -0.1387,  0.6680,  0.0239, -1.1719,  0.3945,  1.0547, -0.4258, -0.4180, -0.3594,  0.9141, -0.3789, -0.1572, -0.3359,  0.1826,  0.1367, -0.3281, -0.7539, -0.0354,
        -1.2656,  0.4746,  0.6133,  0.2256,  0.5703,  0.3242, -0.0593,  0.1953, -0.0591,  0.2061, -0.8945,  0.5781,  0.4590,  0.2676, -0.5234,  0.4512,  0.7695, -0.3203,  0.6328, -0.0420,  0.0654,  0.0315, -0.7383, -0.3008,  0.9023,  0.2295,  1.0703,  0.1318, -0.8789,  0.9961, -0.8750, -0.1748],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0283, -0.0076,  0.0229,  ...,  0.0028, -0.0128, -0.0063],
        [-0.0181,  0.0158,  0.0386,  ..., -0.0193, -0.0081, -0.0097],
        [ 0.0350,  0.0227, -0.0190,  ...,  0.0217,  0.0423, -0.0042],
        ...,
        [-0.0489, -0.0159,  0.0190,  ...,  0.0013,  0.0180,  0.0073],
        [-0.0161, -0.0187, -0.0093,  ..., -0.0266,  0.0099, -0.0009],
        [ 0.0034, -0.0432, -0.0015,  ...,  0.0223, -0.0143,  0.0197]], device='cuda:0', requires_grad=True)
Q: tensor([-0.1543,  0.3203,  0.4512, -0.1235,  0.4746, -0.6953,  0.4941, -0.5000, -0.4941,  0.3809, -0.4844, -0.2031, -1.5312, -0.6367,  1.2031, -0.2334,  0.0088,  0.5195, -1.0234,  0.5117,  0.5117,  0.2500, -0.1187,  0.2930,  0.2070,  0.0359, -0.0613, -0.0747,  0.0050,  0.1875,  0.5312, -1.0078,
         0.3438,  0.2012,  0.1533, -1.5859, -0.7344,  1.0078,  0.3691,  0.4395, -0.5078, -0.0938, -0.3555, -0.8281, -0.0420,  0.0156,  0.1123, -0.1660, -0.3242,  0.3828,  0.9688,  0.0310, -0.4805,  0.5742,  0.2354,  0.0520, -0.2539, -0.5000, -0.4121,  0.6602, -0.5391, -0.2227, -0.2041,  0.9766],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.0815, -0.1084, -0.0801, -0.0596, -0.0439, -0.0447, -0.0266, -0.0236, -0.0210, -0.0151, -0.0111, -0.0086, -0.0069, -0.0043],
        [ 0.0000, -0.1035, -0.1816, -0.1777, -0.1709, -0.1650, -0.1680, -0.1582, -0.1572, -0.1553, -0.1523, -0.1504, -0.1504, -0.1504, -0.1465],
        [ 0.0000, -0.1045, -0.2002, -0.2070, -0.2070, -0.2061, -0.2109, -0.2041, -0.2051, -0.2031, -0.2021, -0.2012, -0.2021, -0.2031, -0.1992],
        [ 0.0000, -0.1069, -0.2119, -0.2256, -0.2295, -0.2314, -0.2383, -0.2334, -0.2354, -0.2344, -0.2334, -0.2334, -0.2354, -0.2373, -0.2334],
        [ 0.0000, -0.1143, -0.2246, -0.2422, -0.2480, -0.2520, -0.2598, -0.2559, -0.2598, -0.2578, -0.2578, -0.2578, -0.2598, -0.2617, -0.2578],
        [ 0.0000, -0.1250, -0.2393, -0.2578, -0.2656, -0.2715, -0.2793, -0.2773, -0.2793, -0.2773, -0.2793, -0.2793, -0.2812, -0.2832, -0.2793],
        [ 0.0000, -0.1309, -0.2461, -0.2676, -0.2754, -0.2812, -0.2891, -0.2871, -0.2910, -0.2891, -0.2891, -0.2910, -0.2930, -0.2949, -0.2910],
        [ 0.0000, -0.1309, -0.2500, -0.2715, -0.2812, -0.2871, -0.2949, -0.2949, -0.2988, -0.2969, -0.2988, -0.2988, -0.3008, -0.3047, -0.3008],
        [ 0.0000, -0.1338, -0.2539, -0.2773, -0.2891, -0.2949, -0.3047, -0.3027, -0.3066, -0.3066, -0.3066, -0.3086, -0.3105, -0.3145, -0.3105],
        [ 0.0000, -0.1338, -0.2520, -0.2773, -0.2871, -0.2949, -0.3027, -0.3027, -0.3047, -0.3047, -0.3066, -0.3066, -0.3105, -0.3125, -0.3086],
        [ 0.0000, -0.1406, -0.2637, -0.2891, -0.3008, -0.3086, -0.3164, -0.3164, -0.3203, -0.3203, -0.3223, -0.3223, -0.3262, -0.3281, -0.3242],
        [ 0.0000, -0.1436, -0.2656, -0.2910, -0.3027, -0.3105, -0.3184, -0.3184, -0.3223, -0.3203, -0.3223, -0.3242, -0.3262, -0.3301, -0.3262],
        [ 0.0000, -0.1426, -0.2656, -0.2910, -0.3027, -0.3105, -0.3184, -0.3184, -0.3223, -0.3223, -0.3242, -0.3242, -0.3281, -0.3301, -0.3262],
        [ 0.0000, -0.1475, -0.2695, -0.2949, -0.3066, -0.3145, -0.3242, -0.3242, -0.3281, -0.3262, -0.3281, -0.3301, -0.3320, -0.3340, -0.3320]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5093],
        [0.3381],
        [0.2517],
        [0.2014],
        [0.1683],
        [0.1446],
        [0.1265],
        [0.1128],
        [0.1014],
        [0.0924],
        [0.0849],
        [0.0784],
        [0.0727],
        [0.0681]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5078, 0.4922, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3418, 0.3164, 0.3418, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2559, 0.2344, 0.2520, 0.2598, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2041, 0.1846, 0.1992, 0.2041, 0.2080, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1699, 0.1523, 0.1641, 0.1689, 0.1719, 0.1738, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1455, 0.1289, 0.1396, 0.1436, 0.1455, 0.1475, 0.1484, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1270, 0.1123, 0.1216, 0.1245, 0.1270, 0.1279, 0.1289, 0.1309, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1128, 0.0991, 0.1074, 0.1104, 0.1118, 0.1133, 0.1143, 0.1152, 0.1152, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1021, 0.0894, 0.0962, 0.0986, 0.1001, 0.1016, 0.1021, 0.1030, 0.1035, 0.1035, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0923, 0.0806, 0.0869, 0.0894, 0.0908, 0.0918, 0.0923, 0.0933, 0.0933, 0.0938, 0.0947, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0845, 0.0737, 0.0796, 0.0815, 0.0830, 0.0840, 0.0845, 0.0854, 0.0854, 0.0854, 0.0864, 0.0864, 0.0000, 0.0000, 0.0000],
        [0.0781, 0.0679, 0.0732, 0.0752, 0.0762, 0.0771, 0.0776, 0.0786, 0.0786, 0.0791, 0.0796, 0.0796, 0.0801, 0.0000, 0.0000],
        [0.0723, 0.0630, 0.0679, 0.0693, 0.0708, 0.0713, 0.0718, 0.0728, 0.0728, 0.0728, 0.0737, 0.0737, 0.0737, 0.0742, 0.0000],
        [0.0674, 0.0586, 0.0630, 0.0649, 0.0659, 0.0664, 0.0669, 0.0674, 0.0674, 0.0679, 0.0684, 0.0684, 0.0688, 0.0688, 0.0693]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0191, -0.0318, -0.0155,  ...,  0.0395, -0.0103, -0.0100],
        [-0.0048,  0.0109, -0.0264,  ..., -0.0213, -0.0086, -0.0004],
        [-0.0156, -0.0105,  0.0466,  ..., -0.0411, -0.0259, -0.0065],
        ...,
        [ 0.0138, -0.0052,  0.0207,  ..., -0.0261, -0.0115, -0.0027],
        [ 0.0149,  0.0530,  0.0046,  ...,  0.0402, -0.0052, -0.0074],
        [ 0.0124, -0.0230, -0.0337,  ..., -0.0130, -0.0030, -0.0020]], device='cuda:0', requires_grad=True)
K: tensor([ 0.4746,  0.2598, -0.2773,  0.1826,  0.1553,  0.5586,  0.4551, -0.2520,  0.7891, -0.5000, -0.2988,  1.3125,  0.0845,  0.4121, -0.3672, -0.1309, -0.2832,  0.3008,  0.2363, -0.0659, -0.5977, -0.4688,  0.5703, -0.0113, -0.2578, -0.9609, -0.0205,  0.2256,  0.2617,  0.4551,  0.0874, -0.1729,
        -0.2852, -0.7617, -0.2246, -0.2539,  0.0106,  1.7266, -0.6172, -1.2578,  0.4609, -1.0234, -0.6328,  0.1064, -0.1729, -0.4688, -0.5195, -0.6953, -0.2217, -0.1094, -0.1699, -0.5000, -0.1787, -0.1025,  0.3457,  0.4512,  0.7461,  0.6914,  0.3945, -0.0698,  0.8203, -0.2275,  0.2871, -0.2402],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[     0.0001,      0.0085,      0.0059,  ...,     -0.0519,      0.0194,      0.0036],
        [    -0.0134,      0.0051,      0.0194,  ...,      0.0264,     -0.0010,      0.0047],
        [     0.0397,      0.0030,      0.0307,  ...,      0.0137,      0.0451,     -0.0155],
        ...,
        [     0.0196,      0.0265,      0.0079,  ...,     -0.0223,      0.0040,      0.0149],
        [     0.0022,     -0.0338,     -0.0101,  ...,      0.0311,      0.0012,     -0.0117],
        [    -0.0067,     -0.0089,     -0.0089,  ...,      0.0410,      0.0138,      0.0133]], device='cuda:0', requires_grad=True)
Q: tensor([     0.1025,     -0.1738,      0.2012,      0.1533,     -0.4961,     -0.0913,     -0.8945,      0.4375,      0.7031,      0.6055,      0.6523,     -0.0471,     -0.0571,      0.2812,     -0.2314,     -0.0066,      0.2158,      0.9180,      0.5234,      0.7734,     -1.6406,      0.1030,
            -0.3633,     -0.4590,     -0.0898,     -0.6836,     -0.6211,      0.4062,      0.0034,     -0.3008,      0.4980,      0.2559,      0.5742,     -0.0884,      0.0742,     -0.2949,      0.5977,     -0.3457,     -0.7383,     -0.0214,      0.2988,      0.5469,      0.0845,      0.7422,
            -0.3184,     -0.0007,     -0.6055,     -0.7070,      0.5938,      0.0045,     -0.4609,      0.3809,      0.9922,     -1.0938,     -0.6406,      0.0703,     -1.1641,     -0.7812,      0.2139,     -0.0840,      0.4238,      0.2500,      0.7773,      0.0571], device='cuda:0',
       dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000, -0.0330,  0.0320,  0.0649,  0.0864,  0.1006,  0.1162,  0.1250,  0.1309,  0.1357,  0.1475,  0.1484,  0.1523,  0.1572,  0.1621],
        [ 0.0000, -0.0752, -0.0014,  0.0280,  0.0469,  0.0593,  0.0728,  0.0820,  0.0859,  0.0908,  0.1021,  0.1030,  0.1069,  0.1113,  0.1152],
        [ 0.0000, -0.0874, -0.0126,  0.0142,  0.0311,  0.0425,  0.0537,  0.0635,  0.0659,  0.0703,  0.0811,  0.0820,  0.0854,  0.0894,  0.0928],
        [ 0.0000, -0.0981, -0.0221,  0.0041,  0.0204,  0.0317,  0.0417,  0.0518,  0.0535,  0.0579,  0.0684,  0.0688,  0.0723,  0.0762,  0.0796],
        [ 0.0000, -0.1128, -0.0344, -0.0078,  0.0084,  0.0199,  0.0294,  0.0398,  0.0413,  0.0457,  0.0557,  0.0566,  0.0598,  0.0635,  0.0664],
        [ 0.0000, -0.1196, -0.0410, -0.0144,  0.0017,  0.0131,  0.0223,  0.0327,  0.0339,  0.0383,  0.0481,  0.0493,  0.0522,  0.0559,  0.0588],
        [ 0.0000, -0.1187, -0.0415, -0.0156, -0.0002,  0.0110,  0.0197,  0.0300,  0.0309,  0.0352,  0.0447,  0.0459,  0.0486,  0.0522,  0.0552],
        [ 0.0000, -0.1289, -0.0515, -0.0253, -0.0098,  0.0016,  0.0100,  0.0204,  0.0211,  0.0254,  0.0349,  0.0361,  0.0388,  0.0425,  0.0452],
        [ 0.0000, -0.1328, -0.0564, -0.0306, -0.0156, -0.0045,  0.0036,  0.0139,  0.0144,  0.0186,  0.0280,  0.0292,  0.0320,  0.0354,  0.0381],
        [ 0.0000, -0.1348, -0.0579, -0.0322, -0.0171, -0.0058,  0.0022,  0.0126,  0.0131,  0.0172,  0.0266,  0.0278,  0.0305,  0.0339,  0.0369],
        [ 0.0000, -0.1387, -0.0623, -0.0369, -0.0219, -0.0108, -0.0030,  0.0073,  0.0077,  0.0118,  0.0210,  0.0223,  0.0249,  0.0283,  0.0311],
        [ 0.0000, -0.1416, -0.0649, -0.0386, -0.0236, -0.0123, -0.0045,  0.0060,  0.0063,  0.0105,  0.0197,  0.0211,  0.0237,  0.0271,  0.0298],
        [ 0.0000, -0.1416, -0.0649, -0.0391, -0.0242, -0.0131, -0.0054,  0.0049,  0.0052,  0.0093,  0.0184,  0.0198,  0.0223,  0.0256,  0.0283],
        [ 0.0000, -0.1436, -0.0679, -0.0427, -0.0281, -0.0171, -0.0097,  0.0007,  0.0008,  0.0049,  0.0139,  0.0153,  0.0177,  0.0210,  0.0237]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.5000],
        [0.3334],
        [0.2503],
        [0.2000],
        [0.1666],
        [0.1428],
        [0.1250],
        [0.1110],
        [0.1001],
        [0.0909],
        [0.0834],
        [0.0770],
        [0.0714],
        [0.0667]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		(,:0.0113,:0.0117,:0.0117,:0.0120,:0.0120 the:0.0124,:0.0124,:0.0124)
,
------
		(,:0.0117,:0.0117,:0.0120,:0.0120 the:0.0124,:0.0124,:0.0124,:0.0124)
, the the the the the the the the the the the the the the
@ 50 train 9.3427 , allloss: 162.5847, dt: 1711.42ms, fracRes: 0.0070, norm(attn): 0.0583, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0003, norm:419.4950, tok/sec: 76586.53, flops:80.39, batch-reuse:1
@ 51 train 9.3745 , allloss: 159.6024, dt: 1309.86ms, fracRes: 0.0070, norm(attn): 0.0583, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0004, norm:409.8588, tok/sec: 100065.60, flops:105.03, batch-reuse:1
@ 52 train 9.2878 , allloss: 156.5364, dt: 1324.56ms, fracRes: 0.0071, norm(attn): 0.0583, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0004, norm:400.2339, tok/sec: 98954.92, flops:103.87, batch-reuse:1
@ 53 train 9.2977 , allloss: 153.4877, dt: 1299.47ms, fracRes: 0.0071, norm(attn): 0.0586, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0004, norm:390.8851, tok/sec: 100865.72, flops:105.87, batch-reuse:1
@ 54 train 9.2839 , allloss: 150.3485, dt: 1306.00ms, fracRes: 0.0071, norm(attn): 0.0586, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0004, norm:381.5539, tok/sec: 100361.67, flops:105.34, batch-reuse:1
@ 55 train 9.3148 , allloss: 147.0343, dt: 1294.14ms, fracRes: 0.0071, norm(attn): 0.0588, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0004, norm:372.0852, tok/sec: 101281.28, flops:106.31, batch-reuse:1
@ 56 train 9.2293 , allloss: 143.2729, dt: 1314.67ms, fracRes: 0.0072, norm(attn): 0.0588, norm(output): 1.0001, norm(x): 0.9936, norm(y): 1.0004, norm:362.6088, tok/sec: 99699.27, flops:104.65, batch-reuse:1
@ 57 train 9.1769 , allloss: 139.4872, dt: 1308.82ms, fracRes: 0.0072, norm(attn): 0.0591, norm(output): 1.0002, norm(x): 0.9936, norm(y): 1.0004, norm:352.7858, tok/sec: 100145.19, flops:105.12, batch-reuse:1
@ 58 train 9.2132 , allloss: 135.6723, dt: 1334.32ms, fracRes: 0.0072, norm(attn): 0.0593, norm(output): 1.0002, norm(x): 0.9936, norm(y): 1.0005, norm:342.6577, tok/sec: 98231.65, flops:103.11, batch-reuse:1
@ 59 train 9.1167 , allloss: 131.4513, dt: 1316.65ms, fracRes: 0.0072, norm(attn): 0.0596, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0005, norm:332.1354, tok/sec: 99549.51, flops:104.49, batch-reuse:1
@ 60 train 9.1430 , allloss: 127.3563, dt: 1311.43ms, fracRes: 0.0073, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0005, norm:321.1301, tok/sec: 99945.84, flops:104.91, batch-reuse:1
@ 61 train 9.1321 , allloss: 123.2187, dt: 1314.96ms, fracRes: 0.0073, norm(attn): 0.0596, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0005, norm:309.6961, tok/sec: 99677.59, flops:104.62, batch-reuse:1
@ 62 train 9.0833 , allloss: 119.2873, dt: 1309.20ms, fracRes: 0.0073, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0005, norm:297.8201, tok/sec: 100115.82, flops:105.08, batch-reuse:1
@ 63 train 9.0980 , allloss: 115.7280, dt: 1300.80ms, fracRes: 0.0073, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0006, norm:285.5371, tok/sec: 100762.84, flops:105.76, batch-reuse:1
@ 64 train 9.0657 , allloss: 112.3177, dt: 1307.55ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0006, norm:272.9143, tok/sec: 100242.81, flops:105.22, batch-reuse:1
@ 65 train 9.0651 , allloss: 109.2926, dt: 1291.86ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0006, norm:259.9829, tok/sec: 101460.24, flops:106.50, batch-reuse:1
@ 66 train 9.0350 , allloss: 106.5942, dt: 1305.08ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0006, norm:247.0334, tok/sec: 100432.00, flops:105.42, batch-reuse:1
@ 67 train 8.9472 , allloss: 104.0748, dt: 1333.70ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0007, norm:234.0853, tok/sec: 98277.15, flops:103.15, batch-reuse:1
@ 68 train 8.9797 , allloss: 102.0365, dt: 1291.11ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0007, norm:221.3970, tok/sec: 101518.94, flops:106.56, batch-reuse:1
@ 69 train 8.9109 , allloss: 100.1651, dt: 1281.34ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0007, norm:209.2423, tok/sec: 102292.86, flops:107.37, batch-reuse:1
@ 70 train 8.8958 , allloss: 98.2041, dt: 1310.60ms, fracRes: 0.0075, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0007, norm:197.8317, tok/sec: 100009.39, flops:104.97, batch-reuse:1
@ 71 train 8.8605 , allloss: 96.1045, dt: 1308.34ms, fracRes: 0.0075, norm(attn): 0.0598, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0008, norm:187.3796, tok/sec: 100182.18, flops:105.15, batch-reuse:1
@ 72 train 8.8421 , allloss: 93.5577, dt: 1315.65ms, fracRes: 0.0075, norm(attn): 0.0601, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0008, norm:177.7181, tok/sec: 99625.06, flops:104.57, batch-reuse:1
@ 73 train 8.8283 , allloss: 90.6229, dt: 1298.47ms, fracRes: 0.0075, norm(attn): 0.0596, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0008, norm:168.9595, tok/sec: 100943.79, flops:105.95, batch-reuse:1
@ 74 train 8.7953 , allloss: 87.3107, dt: 1301.72ms, fracRes: 0.0075, norm(attn): 0.0593, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0008, norm:160.8564, tok/sec: 100691.77, flops:105.69, batch-reuse:1
@ 75 train 9.0411 , allloss: 84.4277, dt: 1321.64ms, fracRes: 0.0075, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0009, norm:153.1207, tok/sec: 99173.81, flops:104.10, batch-reuse:1
@ 76 train 8.7459 , allloss: 79.9016, dt: 1327.69ms, fracRes: 0.0075, norm(attn): 0.0593, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0009, norm:145.7500, tok/sec: 98721.71, flops:103.62, batch-reuse:1
@ 77 train 9.0605 , allloss: 76.5719, dt: 1318.93ms, fracRes: 0.0075, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0009, norm:138.5226, tok/sec: 99377.51, flops:104.31, batch-reuse:1
@ 78 train 8.8255 , allloss: 72.4719, dt: 1288.94ms, fracRes: 0.0075, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0010, norm:131.2230, tok/sec: 101689.37, flops:106.74, batch-reuse:1
@ 79 train 8.6087 , allloss: 68.4305, dt: 1287.34ms, fracRes: 0.0074, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0010, norm:123.7760, tok/sec: 101816.34, flops:106.87, batch-reuse:1
@ 80 train 8.6092 , allloss: 64.5899, dt: 1296.63ms, fracRes: 0.0074, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0010, norm:115.9197, tok/sec: 101086.87, flops:106.10, batch-reuse:1
@ 81 train 8.5794 , allloss: 60.4898, dt: 1295.56ms, fracRes: 0.0074, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0010, norm:107.5455, tok/sec: 101170.40, flops:106.19, batch-reuse:1
@ 82 train 8.5041 , allloss: 56.1408, dt: 1272.46ms, fracRes: 0.0073, norm(attn): 0.0586, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0011, norm:98.3520, tok/sec: 103006.49, flops:108.12, batch-reuse:1
@ 83 train 8.4834 , allloss: 51.9070, dt: 1280.56ms, fracRes: 0.0073, norm(attn): 0.0583, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0011, norm:88.8624, tok/sec: 102355.62, flops:107.44, batch-reuse:1
@ 84 train 8.4733 , allloss: 47.5719, dt: 1298.48ms, fracRes: 0.0073, norm(attn): 0.0583, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0011, norm:78.8399, tok/sec: 100942.79, flops:105.95, batch-reuse:1
@ 85 train 8.4080 , allloss: 43.2056, dt: 1298.79ms, fracRes: 0.0073, norm(attn): 0.0583, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0012, norm:68.7899, tok/sec: 100918.59, flops:105.93, batch-reuse:1
@ 86 train 8.3452 , allloss: 39.1959, dt: 1331.73ms, fracRes: 0.0072, norm(attn): 0.0586, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0012, norm:59.2001, tok/sec: 98422.61, flops:103.31, batch-reuse:1
@ 87 train 8.3673 , allloss: 35.6810, dt: 1308.84ms, fracRes: 0.0072, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0012, norm:50.4292, tok/sec: 100143.84, flops:105.11, batch-reuse:1
@ 88 train 8.3338 , allloss: 32.7506, dt: 1321.65ms, fracRes: 0.0072, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0013, norm:42.9133, tok/sec: 99172.86, flops:104.09, batch-reuse:1
@ 89 train 8.2586 , allloss: 30.3050, dt: 1331.98ms, fracRes: 0.0072, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0013, norm:37.2259, tok/sec: 98403.85, flops:103.29, batch-reuse:1
@ 90 train 8.2651 , allloss: 28.5366, dt: 1304.64ms, fracRes: 0.0072, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0013, norm:33.5213, tok/sec: 100466.17, flops:105.45, batch-reuse:1
@ 91 train 8.2231 , allloss: 27.1873, dt: 1305.57ms, fracRes: 0.0073, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0013, norm:31.0796, tok/sec: 100394.09, flops:105.38, batch-reuse:1
@ 92 train 8.1862 , allloss: 26.0220, dt: 1319.51ms, fracRes: 0.0073, norm(attn): 0.0588, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0014, norm:29.6491, tok/sec: 99333.95, flops:104.26, batch-reuse:1
@ 93 train 8.1688 , allloss: 25.1619, dt: 1308.57ms, fracRes: 0.0073, norm(attn): 0.0596, norm(output): 1.0002, norm(x): 0.9935, norm(y): 1.0014, norm:28.8966, tok/sec: 100164.02, flops:105.14, batch-reuse:1
@ 94 train 8.2860 , allloss: 24.5883, dt: 1301.42ms, fracRes: 0.0073, norm(attn): 0.0596, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0014, norm:28.6025, tok/sec: 100714.42, flops:105.71, batch-reuse:1
@ 95 train 8.1270 , allloss: 23.5555, dt: 1322.78ms, fracRes: 0.0073, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0015, norm:28.3446, tok/sec: 99088.63, flops:104.01, batch-reuse:1
@ 96 train 8.0268 , allloss: 22.6415, dt: 1313.14ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0015, norm:28.2990, tok/sec: 99815.79, flops:104.77, batch-reuse:1
@ 97 train 8.0438 , allloss: 21.9280, dt: 1324.27ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9934, norm(y): 1.0015, norm:28.2696, tok/sec: 98976.74, flops:103.89, batch-reuse:1
@ 98 train 8.0284 , allloss: 21.1727, dt: 1289.23ms, fracRes: 0.0074, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9933, norm(y): 1.0015, norm:28.2095, tok/sec: 101666.78, flops:106.71, batch-reuse:1
@ 99 train 8.0079 , allloss: 20.5364, dt: 1325.29ms, fracRes: 0.0075, norm(attn): 0.0615, norm(output): 1.0002, norm(x): 0.9933, norm(y): 1.0015, norm:28.0497, tok/sec: 98900.89, flops:103.81, batch-reuse:1
@ 100 train 7.9677 , allloss: 19.9353, dt: 1307.35ms, fracRes: 0.0075, norm(attn): 0.0623, norm(output): 1.0002, norm(x): 0.9933, norm(y): 1.0016, norm:27.9215, tok/sec: 100257.65, flops:105.23, batch-reuse:1
@ 101 train 7.8938 , allloss: 19.2992, dt: 1334.82ms, fracRes: 0.0075, norm(attn): 0.0623, norm(output): 1.0002, norm(x): 0.9933, norm(y): 1.0016, norm:27.7474, tok/sec: 98194.49, flops:103.07, batch-reuse:1
@ 102 train 7.9211 , allloss: 18.9364, dt: 1318.80ms, fracRes: 0.0075, norm(attn): 0.0623, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0016, norm:27.4328, tok/sec: 99386.96, flops:104.32, batch-reuse:1
@ 103 train 7.9205 , allloss: 18.5290, dt: 1331.57ms, fracRes: 0.0075, norm(attn): 0.0623, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0016, norm:26.9571, tok/sec: 98434.04, flops:103.32, batch-reuse:1
@ 104 train 7.9311 , allloss: 18.1929, dt: 1320.25ms, fracRes: 0.0075, norm(attn): 0.0623, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0016, norm:26.4025, tok/sec: 99278.04, flops:104.21, batch-reuse:1
@ 105 train 7.9119 , allloss: 17.7718, dt: 1303.45ms, fracRes: 0.0075, norm(attn): 0.0623, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0017, norm:25.8665, tok/sec: 100558.00, flops:105.55, batch-reuse:1
@ 106 train 7.8722 , allloss: 17.4211, dt: 1306.09ms, fracRes: 0.0076, norm(attn): 0.0623, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0017, norm:25.4800, tok/sec: 100354.85, flops:105.34, batch-reuse:1
@ 107 train 7.8347 , allloss: 17.0060, dt: 1289.51ms, fracRes: 0.0076, norm(attn): 0.0623, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0017, norm:25.0535, tok/sec: 101644.89, flops:106.69, batch-reuse:1
@ 108 train 7.8129 , allloss: 16.7323, dt: 1287.30ms, fracRes: 0.0076, norm(attn): 0.0625, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0017, norm:24.7466, tok/sec: 101819.32, flops:106.87, batch-reuse:1
@ 109 train 7.7448 , allloss: 16.4592, dt: 1300.27ms, fracRes: 0.0076, norm(attn): 0.0625, norm(output): 1.0003, norm(x): 0.9933, norm(y): 1.0017, norm:24.3849, tok/sec: 100803.80, flops:105.81, batch-reuse:1
@ 110 train 7.7987 , allloss: 16.4720, dt: 1300.10ms, fracRes: 0.0076, norm(attn): 0.0625, norm(output): 1.0003, norm(x): 0.9932, norm(y): 1.0017, norm:24.2359, tok/sec: 100816.54, flops:105.82, batch-reuse:1
@ 111 train 7.7732 , allloss: 16.3812, dt: 1283.38ms, fracRes: 0.0076, norm(attn): 0.0630, norm(output): 1.0003, norm(x): 0.9932, norm(y): 1.0017, norm:24.0363, tok/sec: 102130.37, flops:107.20, batch-reuse:1
@ 112 train 7.7840 , allloss: 16.3758, dt: 1307.29ms, fracRes: 0.0076, norm(attn): 0.0630, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0017, norm:23.9131, tok/sec: 100262.02, flops:105.24, batch-reuse:1
@ 113 train 7.7367 , allloss: 16.2853, dt: 1315.85ms, fracRes: 0.0076, norm(attn): 0.0630, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0017, norm:23.8248, tok/sec: 99609.99, flops:104.55, batch-reuse:1
@ 114 train 7.7410 , allloss: 16.2715, dt: 1312.47ms, fracRes: 0.0076, norm(attn): 0.0630, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:23.7517, tok/sec: 99866.63, flops:104.82, batch-reuse:1
@ 115 train 7.6983 , allloss: 16.2107, dt: 1301.76ms, fracRes: 0.0076, norm(attn): 0.0630, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:23.7642, tok/sec: 100688.38, flops:105.69, batch-reuse:1
@ 116 train 7.6594 , allloss: 16.1330, dt: 1322.98ms, fracRes: 0.0076, norm(attn): 0.0630, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:23.7251, tok/sec: 99073.58, flops:103.99, batch-reuse:1
@ 117 train 7.6633 , allloss: 16.0628, dt: 1310.55ms, fracRes: 0.0076, norm(attn): 0.0630, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:23.5430, tok/sec: 100012.66, flops:104.98, batch-reuse:1
@ 118 train 7.6753 , allloss: 15.7540, dt: 1309.53ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:23.1798, tok/sec: 100091.09, flops:105.06, batch-reuse:1
@ 119 train 7.6498 , allloss: 15.2129, dt: 1304.73ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:22.7013, tok/sec: 100459.47, flops:105.45, batch-reuse:1
@ 120 train 7.7795 , allloss: 14.9681, dt: 1290.05ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:22.3161, tok/sec: 101602.45, flops:106.65, batch-reuse:1
@ 121 train 7.8270 , allloss: 14.5391, dt: 1300.92ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:21.7078, tok/sec: 100753.55, flops:105.75, batch-reuse:1
@ 122 train 7.7784 , allloss: 13.8822, dt: 1319.24ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:20.8308, tok/sec: 99354.06, flops:104.29, batch-reuse:1
@ 123 train 7.6733 , allloss: 13.1144, dt: 1313.28ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:19.7354, tok/sec: 99805.31, flops:104.76, batch-reuse:1
@ 124 train 7.6891 , allloss: 12.6387, dt: 1293.30ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:18.6126, tok/sec: 101347.19, flops:106.38, batch-reuse:1
@ 125 train 7.6893 , allloss: 12.2264, dt: 1301.82ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:17.5553, tok/sec: 100683.40, flops:105.68, batch-reuse:1
@ 126 train 7.7111 , allloss: 11.9261, dt: 1317.94ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:16.5652, tok/sec: 99451.91, flops:104.39, batch-reuse:1
@ 127 train 7.6242 , allloss: 11.5794, dt: 1305.82ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0018, norm:15.7421, tok/sec: 100375.06, flops:105.36, batch-reuse:1
@ 128 train 7.6004 , allloss: 11.4509, dt: 1327.49ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0019, norm:15.2079, tok/sec: 98736.94, flops:103.64, batch-reuse:1
@ 129 train 7.7828 , allloss: 11.7819, dt: 1330.62ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0019, norm:15.2431, tok/sec: 98504.21, flops:103.39, batch-reuse:1
@ 130 train 7.7064 , allloss: 11.9310, dt: 1333.58ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9932, norm(y): 1.0019, norm:15.4460, tok/sec: 98285.87, flops:103.16, batch-reuse:1
@ 131 train 7.6771 , allloss: 12.3059, dt: 1335.07ms, fracRes: 0.0076, norm(attn): 0.0635, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:16.1025, tok/sec: 98176.43, flops:103.05, batch-reuse:1
@ 132 train 7.7088 , allloss: 12.8181, dt: 1307.97ms, fracRes: 0.0076, norm(attn): 0.0654, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:16.9432, tok/sec: 100209.94, flops:105.18, batch-reuse:1
@ 133 train 7.6581 , allloss: 13.1323, dt: 1296.71ms, fracRes: 0.0077, norm(attn): 0.0659, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:17.5421, tok/sec: 101080.56, flops:106.10, batch-reuse:1
@ 134 train 7.6906 , allloss: 13.3281, dt: 1301.94ms, fracRes: 0.0077, norm(attn): 0.0659, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:17.8745, tok/sec: 100674.16, flops:105.67, batch-reuse:1
@ 135 train 7.6088 , allloss: 12.9931, dt: 1317.82ms, fracRes: 0.0077, norm(attn): 0.0659, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:17.8595, tok/sec: 99461.55, flops:104.40, batch-reuse:1
@ 136 train 7.6521 , allloss: 12.7006, dt: 1306.80ms, fracRes: 0.0077, norm(attn): 0.0659, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:17.5292, tok/sec: 100300.11, flops:105.28, batch-reuse:1
@ 137 train 7.5682 , allloss: 12.1024, dt: 1297.17ms, fracRes: 0.0077, norm(attn): 0.0659, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:16.7733, tok/sec: 101044.90, flops:106.06, batch-reuse:1
@ 138 train 7.5609 , allloss: 11.6759, dt: 1286.47ms, fracRes: 0.0077, norm(attn): 0.0664, norm(output): 1.0002, norm(x): 0.9931, norm(y): 1.0019, norm:15.8369, tok/sec: 101885.23, flops:106.94, batch-reuse:1
@ 139 train 7.5408 , allloss: 11.3362, dt: 1297.33ms, fracRes: 0.0077, norm(attn): 0.0664, norm(output): 1.0002, norm(x): 0.9930, norm(y): 1.0019, norm:14.8229, tok/sec: 101031.90, flops:106.05, batch-reuse:1
@ 140 train 7.5640 , allloss: 11.1715, dt: 1302.56ms, fracRes: 0.0078, norm(attn): 0.0664, norm(output): 1.0002, norm(x): 0.9930, norm(y): 1.0019, norm:13.9489, tok/sec: 100626.08, flops:105.62, batch-reuse:1
@ 141 train 7.5753 , allloss: 11.1477, dt: 1316.32ms, fracRes: 0.0078, norm(attn): 0.0664, norm(output): 1.0002, norm(x): 0.9930, norm(y): 1.0019, norm:13.3732, tok/sec: 99574.36, flops:104.52, batch-reuse:1
@ 142 train 7.6717 , allloss: 11.3557, dt: 1336.26ms, fracRes: 0.0078, norm(attn): 0.0664, norm(output): 1.0001, norm(x): 0.9930, norm(y): 1.0019, norm:13.0787, tok/sec: 98088.62, flops:102.96, batch-reuse:1
@ 143 train 7.6421 , allloss: 11.5263, dt: 1289.07ms, fracRes: 0.0078, norm(attn): 0.0664, norm(output): 1.0001, norm(x): 0.9929, norm(y): 1.0019, norm:12.8679, tok/sec: 101679.83, flops:106.73, batch-reuse:1
@ 144 train 7.6126 , allloss: 11.7435, dt: 1307.94ms, fracRes: 0.0078, norm(attn): 0.0664, norm(output): 1.0001, norm(x): 0.9929, norm(y): 1.0019, norm:12.8217, tok/sec: 100212.42, flops:105.19, batch-reuse:1
@ 145 train 7.6342 , allloss: 12.2296, dt: 1304.17ms, fracRes: 0.0079, norm(attn): 0.0664, norm(output): 1.0001, norm(x): 0.9929, norm(y): 1.0019, norm:12.9400, tok/sec: 100502.48, flops:105.49, batch-reuse:1
@ 146 train 7.7471 , allloss: 12.9827, dt: 1317.72ms, fracRes: 0.0079, norm(attn): 0.0664, norm(output): 1.0001, norm(x): 0.9928, norm(y): 1.0019, norm:13.2283, tok/sec: 99468.80, flops:104.41, batch-reuse:1
@ 147 train 7.6194 , allloss: 13.2971, dt: 1287.72ms, fracRes: 0.0080, norm(attn): 0.0669, norm(output): 1.0001, norm(x): 0.9928, norm(y): 1.0019, norm:13.4045, tok/sec: 101785.80, flops:106.84, batch-reuse:1
@ 148 train 7.6035 , allloss: 13.5366, dt: 1303.42ms, fracRes: 0.0080, norm(attn): 0.0669, norm(output): 1.0001, norm(x): 0.9928, norm(y): 1.0020, norm:13.6584, tok/sec: 100560.28, flops:105.55, batch-reuse:1
@ 149 train 7.5105 , allloss: 13.5464, dt: 1323.39ms, fracRes: 0.0081, norm(attn): 0.0679, norm(output): 1.0001, norm(x): 0.9927, norm(y): 1.0020, norm:13.8883, tok/sec: 99042.82, flops:103.96, batch-reuse:1
@ 150 train 7.7094 , allloss: 13.8524, dt: 1303.66ms, fracRes: 0.0081, norm(attn): 0.0684, norm(output): 1.0001, norm(x): 0.9927, norm(y): 1.0020, norm:14.0859, tok/sec: 100541.28, flops:105.53, batch-reuse:1
@ 151 train 7.5291 , allloss: 13.2093, dt: 1309.42ms, fracRes: 0.0081, norm(attn): 0.0693, norm(output): 1.0001, norm(x): 0.9927, norm(y): 1.0020, norm:13.8379, tok/sec: 100099.51, flops:105.07, batch-reuse:1
@ 152 train 7.4954 , allloss: 12.9071, dt: 1326.75ms, fracRes: 0.0082, norm(attn): 0.0693, norm(output): 1.0001, norm(x): 0.9926, norm(y): 1.0020, norm:13.6451, tok/sec: 98792.07, flops:103.70, batch-reuse:1
@ 153 train 7.5447 , allloss: 12.9681, dt: 1310.46ms, fracRes: 0.0083, norm(attn): 0.0698, norm(output): 1.0001, norm(x): 0.9925, norm(y): 1.0020, norm:13.4120, tok/sec: 100020.07, flops:104.98, batch-reuse:1
@ 154 train 7.5954 , allloss: 13.2670, dt: 1309.17ms, fracRes: 0.0083, norm(attn): 0.0698, norm(output): 1.0001, norm(x): 0.9925, norm(y): 1.0020, norm:13.4771, tok/sec: 100118.10, flops:105.09, batch-reuse:1
@ 155 train 7.7117 , allloss: 13.5533, dt: 1314.19ms, fracRes: 0.0083, norm(attn): 0.0698, norm(output): 1.0001, norm(x): 0.9925, norm(y): 1.0020, norm:13.5812, tok/sec: 99736.06, flops:104.69, batch-reuse:1
@ 156 train 7.5918 , allloss: 13.4567, dt: 1317.66ms, fracRes: 0.0083, norm(attn): 0.0698, norm(output): 1.0001, norm(x): 0.9925, norm(y): 1.0020, norm:13.8872, tok/sec: 99473.50, flops:104.41, batch-reuse:1
@ 157 train 7.6872 , allloss: 13.8715, dt: 1288.70ms, fracRes: 0.0084, norm(attn): 0.0698, norm(output): 1.0001, norm(x): 0.9925, norm(y): 1.0020, norm:14.5862, tok/sec: 101708.77, flops:106.76, batch-reuse:1
@ 158 train 7.6720 , allloss: 13.8375, dt: 1297.48ms, fracRes: 0.0084, norm(attn): 0.0703, norm(output): 1.0001, norm(x): 0.9924, norm(y): 1.0020, norm:14.7167, tok/sec: 101020.08, flops:106.03, batch-reuse:1
@ 159 train 7.6980 , allloss: 14.3706, dt: 1303.18ms, fracRes: 0.0084, norm(attn): 0.0703, norm(output): 1.0001, norm(x): 0.9924, norm(y): 1.0020, norm:15.1347, tok/sec: 100578.60, flops:105.57, batch-reuse:1
@ 160 train 7.5986 , allloss: 15.0185, dt: 1302.72ms, fracRes: 0.0085, norm(attn): 0.0703, norm(output): 1.0000, norm(x): 0.9924, norm(y): 1.0020, norm:16.1212, tok/sec: 100613.97, flops:105.61, batch-reuse:1
@ 161 train 7.6169 , allloss: 15.6324, dt: 1330.40ms, fracRes: 0.0086, norm(attn): 0.0703, norm(output): 1.0000, norm(x): 0.9923, norm(y): 1.0020, norm:16.9766, tok/sec: 98520.69, flops:103.41, batch-reuse:1
@ 162 train 7.7136 , allloss: 15.6533, dt: 1324.02ms, fracRes: 0.0086, norm(attn): 0.0708, norm(output): 1.0000, norm(x): 0.9922, norm(y): 1.0020, norm:15.7068, tok/sec: 98995.76, flops:103.91, batch-reuse:1
@ 163 train 7.6292 , allloss: 14.9116, dt: 1288.36ms, fracRes: 0.0087, norm(attn): 0.0708, norm(output): 1.0000, norm(x): 0.9922, norm(y): 1.0020, norm:14.4077, tok/sec: 101735.34, flops:106.78, batch-reuse:1
@ 164 train 7.5575 , allloss: 14.4490, dt: 1299.21ms, fracRes: 0.0087, norm(attn): 0.0708, norm(output): 1.0000, norm(x): 0.9921, norm(y): 1.0020, norm:13.7014, tok/sec: 100885.71, flops:105.89, batch-reuse:1
@ 165 train 7.6561 , allloss: 14.9244, dt: 1304.30ms, fracRes: 0.0088, norm(attn): 0.0708, norm(output): 1.0000, norm(x): 0.9921, norm(y): 1.0020, norm:13.3613, tok/sec: 100492.01, flops:105.48, batch-reuse:1
@ 166 train 7.5750 , allloss: 15.3367, dt: 1307.90ms, fracRes: 0.0088, norm(attn): 0.0708, norm(output): 1.0000, norm(x): 0.9920, norm(y): 1.0020, norm:12.7368, tok/sec: 100215.32, flops:105.19, batch-reuse:1
@ 167 train 7.5991 , allloss: 16.1859, dt: 1322.75ms, fracRes: 0.0089, norm(attn): 0.0708, norm(output): 1.0000, norm(x): 0.9920, norm(y): 1.0020, norm:12.4914, tok/sec: 99090.35, flops:104.01, batch-reuse:1
@ 168 train 7.5495 , allloss: 17.1052, dt: 1276.71ms, fracRes: 0.0089, norm(attn): 0.0708, norm(output): 0.9999, norm(x): 0.9919, norm(y): 1.0021, norm:12.3565, tok/sec: 102663.95, flops:107.76, batch-reuse:1
@ 169 train 7.6101 , allloss: 18.2506, dt: 1298.75ms, fracRes: 0.0090, norm(attn): 0.0703, norm(output): 0.9999, norm(x): 0.9919, norm(y): 1.0021, norm:14.4009, tok/sec: 100921.99, flops:105.93, batch-reuse:1
@ 170 train 7.5997 , allloss: 19.0398, dt: 1307.29ms, fracRes: 0.0090, norm(attn): 0.0708, norm(output): 0.9999, norm(x): 0.9918, norm(y): 1.0021, norm:16.1318, tok/sec: 100262.08, flops:105.24, batch-reuse:1
@ 171 train 7.5635 , allloss: 19.4803, dt: 1305.83ms, fracRes: 0.0091, norm(attn): 0.0708, norm(output): 0.9999, norm(x): 0.9918, norm(y): 1.0021, norm:16.1075, tok/sec: 100374.35, flops:105.36, batch-reuse:1
@ 172 train 7.6103 , allloss: 19.5941, dt: 1310.30ms, fracRes: 0.0092, norm(attn): 0.0708, norm(output): 0.9999, norm(x): 0.9917, norm(y): 1.0021, norm:16.7479, tok/sec: 100032.17, flops:105.00, batch-reuse:1
@ 173 train 7.5835 , allloss: 19.2834, dt: 1294.76ms, fracRes: 0.0092, norm(attn): 0.0708, norm(output): 0.9999, norm(x): 0.9916, norm(y): 1.0021, norm:17.7403, tok/sec: 101232.59, flops:106.26, batch-reuse:1
@ 174 train 7.7281 , allloss: 19.1363, dt: 1302.02ms, fracRes: 0.0092, norm(attn): 0.0713, norm(output): 0.9999, norm(x): 0.9917, norm(y): 1.0021, norm:20.2272, tok/sec: 100668.00, flops:105.66, batch-reuse:1
@ 175 train 7.6050 , allloss: 18.5069, dt: 1330.93ms, fracRes: 0.0091, norm(attn): 0.0723, norm(output): 0.9998, norm(x): 0.9917, norm(y): 1.0021, norm:20.8282, tok/sec: 98481.71, flops:103.37, batch-reuse:1
@ 176 train 7.6408 , allloss: 18.3040, dt: 1308.35ms, fracRes: 0.0091, norm(attn): 0.0732, norm(output): 0.9998, norm(x): 0.9916, norm(y): 1.0021, norm:22.4851, tok/sec: 100180.90, flops:105.15, batch-reuse:1
@ 177 train 7.6112 , allloss: 18.1252, dt: 1336.21ms, fracRes: 0.0092, norm(attn): 0.0732, norm(output): 0.9998, norm(x): 0.9916, norm(y): 1.0021, norm:21.2426, tok/sec: 98092.22, flops:102.96, batch-reuse:1
@ 178 train 7.6722 , allloss: 18.2433, dt: 1305.32ms, fracRes: 0.0093, norm(attn): 0.0742, norm(output): 0.9998, norm(x): 0.9915, norm(y): 1.0021, norm:20.8480, tok/sec: 100413.47, flops:105.40, batch-reuse:1
@ 179 train 7.5495 , allloss: 17.9607, dt: 1328.72ms, fracRes: 0.0094, norm(attn): 0.0752, norm(output): 0.9998, norm(x): 0.9914, norm(y): 1.0021, norm:23.4832, tok/sec: 98645.66, flops:103.54, batch-reuse:1
@ 180 train 7.6773 , allloss: 17.9839, dt: 1311.49ms, fracRes: 0.0094, norm(attn): 0.0757, norm(output): 0.9998, norm(x): 0.9914, norm(y): 1.0021, norm:24.3638, tok/sec: 99941.63, flops:104.90, batch-reuse:1
@ 181 train 7.6344 , allloss: 17.8276, dt: 1289.76ms, fracRes: 0.0094, norm(attn): 0.0762, norm(output): 0.9998, norm(x): 0.9914, norm(y): 1.0021, norm:25.9780, tok/sec: 101625.38, flops:106.67, batch-reuse:1
@ 182 train 7.6573 , allloss: 17.8894, dt: 1305.50ms, fracRes: 0.0094, norm(attn): 0.0767, norm(output): 0.9998, norm(x): 0.9914, norm(y): 1.0021, norm:27.3916, tok/sec: 100400.10, flops:105.38, batch-reuse:1
@ 183 train 7.6245 , allloss: 17.7866, dt: 1304.54ms, fracRes: 0.0094, norm(attn): 0.0767, norm(output): 0.9998, norm(x): 0.9914, norm(y): 1.0021, norm:27.3730, tok/sec: 100473.86, flops:105.46, batch-reuse:1
@ 184 train 7.5078 , allloss: 17.4599, dt: 1304.58ms, fracRes: 0.0094, norm(attn): 0.0776, norm(output): 0.9998, norm(x): 0.9914, norm(y): 1.0021, norm:29.8417, tok/sec: 100470.50, flops:105.46, batch-reuse:1
@ 185 train 7.5655 , allloss: 17.3632, dt: 1287.21ms, fracRes: 0.0095, norm(attn): 0.0776, norm(output): 0.9997, norm(x): 0.9913, norm(y): 1.0021, norm:31.2025, tok/sec: 101826.77, flops:106.88, batch-reuse:1
@ 186 train 7.7352 , allloss: 17.7329, dt: 1315.83ms, fracRes: 0.0095, norm(attn): 0.0781, norm(output): 0.9997, norm(x): 0.9913, norm(y): 1.0021, norm:34.7446, tok/sec: 99611.80, flops:104.56, batch-reuse:1
@ 187 train 7.7742 , allloss: 17.9640, dt: 1299.86ms, fracRes: 0.0096, norm(attn): 0.0781, norm(output): 0.9997, norm(x): 0.9912, norm(y): 1.0021, norm:35.5595, tok/sec: 100835.57, flops:105.84, batch-reuse:1
@ 188 train 7.6163 , allloss: 17.6802, dt: 1290.50ms, fracRes: 0.0096, norm(attn): 0.0786, norm(output): 0.9997, norm(x): 0.9912, norm(y): 1.0021, norm:36.7208, tok/sec: 101566.88, flops:106.61, batch-reuse:1
@ 189 train 7.7347 , allloss: 17.6989, dt: 1294.55ms, fracRes: 0.0097, norm(attn): 0.0786, norm(output): 0.9997, norm(x): 0.9912, norm(y): 1.0021, norm:37.1630, tok/sec: 101249.35, flops:106.27, batch-reuse:1
@ 190 train 7.7144 , allloss: 17.6038, dt: 1300.21ms, fracRes: 0.0097, norm(attn): 0.0786, norm(output): 0.9997, norm(x): 0.9911, norm(y): 1.0021, norm:35.6532, tok/sec: 100808.11, flops:105.81, batch-reuse:1
@ 191 train 7.6792 , allloss: 17.7000, dt: 1328.57ms, fracRes: 0.0098, norm(attn): 0.0786, norm(output): 0.9997, norm(x): 0.9911, norm(y): 1.0021, norm:34.0060, tok/sec: 98656.58, flops:103.55, batch-reuse:1
@ 192 train 7.7254 , allloss: 17.9313, dt: 1334.23ms, fracRes: 0.0099, norm(attn): 0.0806, norm(output): 0.9997, norm(x): 0.9910, norm(y): 1.0021, norm:33.5525, tok/sec: 98238.25, flops:103.11, batch-reuse:1
@ 193 train 7.6228 , allloss: 17.7777, dt: 1328.49ms, fracRes: 0.0100, norm(attn): 0.0811, norm(output): 0.9997, norm(x): 0.9909, norm(y): 1.0021, norm:35.7433, tok/sec: 98662.37, flops:103.56, batch-reuse:1
@ 194 train 7.7492 , allloss: 17.8282, dt: 1335.49ms, fracRes: 0.0101, norm(attn): 0.0825, norm(output): 0.9997, norm(x): 0.9909, norm(y): 1.0021, norm:40.6721, tok/sec: 98145.29, flops:103.02, batch-reuse:1
@ 195 train 7.7241 , allloss: 17.5272, dt: 1333.90ms, fracRes: 0.0103, norm(attn): 0.0825, norm(output): 0.9997, norm(x): 0.9907, norm(y): 1.0022, norm:54.6086, tok/sec: 98262.21, flops:103.14, batch-reuse:1
@ 196 train 7.6341 , allloss: 16.9799, dt: 1321.98ms, fracRes: 0.0105, norm(attn): 0.0845, norm(output): 0.9997, norm(x): 0.9906, norm(y): 1.0022, norm:66.0370, tok/sec: 99148.32, flops:104.07, batch-reuse:1
@ 197 train 7.6514 , allloss: 16.7450, dt: 1330.98ms, fracRes: 0.0107, norm(attn): 0.0854, norm(output): 0.9997, norm(x): 0.9905, norm(y): 1.0022, norm:73.7342, tok/sec: 98477.97, flops:103.37, batch-reuse:1
@ 198 train 7.6289 , allloss: 16.6576, dt: 1307.98ms, fracRes: 0.0108, norm(attn): 0.0850, norm(output): 0.9996, norm(x): 0.9904, norm(y): 1.0022, norm:71.3312, tok/sec: 100209.57, flops:105.18, batch-reuse:1
@ 199 train 7.6849 , allloss: 16.8810, dt: 1311.18ms, fracRes: 0.0108, norm(attn): 0.0854, norm(output): 0.9996, norm(x): 0.9904, norm(y): 1.0022, norm:68.5592, tok/sec: 99964.78, flops:104.93, batch-reuse:1
@ 200 train 7.7067 , allloss: 17.0262, dt: 1303.51ms, fracRes: 0.0108, norm(attn): 0.0854, norm(output): 0.9996, norm(x): 0.9904, norm(y): 1.0022, norm:62.9830, tok/sec: 100552.74, flops:105.54, batch-reuse:1
@ 201 train 7.7225 , allloss: 17.0900, dt: 1308.25ms, fracRes: 0.0109, norm(attn): 0.0854, norm(output): 0.9996, norm(x): 0.9903, norm(y): 1.0022, norm:55.3743, tok/sec: 100188.90, flops:105.16, batch-reuse:1
@ 202 train 7.7630 , allloss: 17.1657, dt: 1339.32ms, fracRes: 0.0109, norm(attn): 0.0854, norm(output): 0.9996, norm(x): 0.9903, norm(y): 1.0022, norm:52.9978, tok/sec: 97864.94, flops:102.72, batch-reuse:1
@ 203 train 7.7014 , allloss: 16.9865, dt: 1285.84ms, fracRes: 0.0109, norm(attn): 0.0859, norm(output): 0.9996, norm(x): 0.9903, norm(y): 1.0022, norm:68.5271, tok/sec: 101934.81, flops:106.99, batch-reuse:1
@ 204 train 7.6993 , allloss: 16.8018, dt: 1309.03ms, fracRes: 0.0109, norm(attn): 0.0854, norm(output): 0.9996, norm(x): 0.9903, norm(y): 1.0022, norm:90.5002, tok/sec: 100129.14, flops:105.10, batch-reuse:1
@ 205 train 7.6775 , allloss: 16.6444, dt: 1297.15ms, fracRes: 0.0108, norm(attn): 0.0850, norm(output): 0.9996, norm(x): 0.9904, norm(y): 1.0022, norm:99.4220, tok/sec: 101046.41, flops:106.06, batch-reuse:1
@ 206 train 7.7125 , allloss: 16.6565, dt: 1298.73ms, fracRes: 0.0107, norm(attn): 0.0845, norm(output): 0.9996, norm(x): 0.9904, norm(y): 1.0022, norm:82.1444, tok/sec: 100923.27, flops:105.93, batch-reuse:1
@ 207 train 7.5968 , allloss: 16.5712, dt: 1306.73ms, fracRes: 0.0106, norm(attn): 0.0845, norm(output): 0.9996, norm(x): 0.9904, norm(y): 1.0022, norm:66.4962, tok/sec: 100305.21, flops:105.28, batch-reuse:1
@ 208 train 7.7017 , allloss: 16.8029, dt: 1311.96ms, fracRes: 0.0107, norm(attn): 0.0835, norm(output): 0.9996, norm(x): 0.9904, norm(y): 1.0022, norm:64.0272, tok/sec: 99905.45, flops:104.86, batch-reuse:1
@ 209 train 7.7338 , allloss: 16.7454, dt: 1310.53ms, fracRes: 0.0108, norm(attn): 0.0820, norm(output): 0.9996, norm(x): 0.9903, norm(y): 1.0022, norm:67.3887, tok/sec: 100014.74, flops:104.98, batch-reuse:1
@ 210 train 7.7026 , allloss: 16.6001, dt: 1347.52ms, fracRes: 0.0110, norm(attn): 0.0825, norm(output): 0.9996, norm(x): 0.9901, norm(y): 1.0022, norm:76.1704, tok/sec: 97268.95, flops:102.10, batch-reuse:1
@ 211 train 7.6451 , allloss: 16.4045, dt: 1303.45ms, fracRes: 0.0113, norm(attn): 0.0820, norm(output): 0.9996, norm(x): 0.9899, norm(y): 1.0022, norm:77.8627, tok/sec: 100557.69, flops:105.55, batch-reuse:1
@ 212 train 7.7205 , allloss: 16.5628, dt: 1304.31ms, fracRes: 0.0117, norm(attn): 0.0811, norm(output): 0.9996, norm(x): 0.9897, norm(y): 1.0022, norm:83.5149, tok/sec: 100491.13, flops:105.48, batch-reuse:1
@ 213 train 7.6332 , allloss: 16.2826, dt: 1308.27ms, fracRes: 0.0120, norm(attn): 0.0811, norm(output): 0.9996, norm(x): 0.9894, norm(y): 1.0022, norm:86.3992, tok/sec: 100187.36, flops:105.16, batch-reuse:1
@ 214 train 7.6690 , allloss: 16.3292, dt: 1288.54ms, fracRes: 0.0125, norm(attn): 0.0811, norm(output): 0.9996, norm(x): 0.9890, norm(y): 1.0022, norm:95.7746, tok/sec: 101721.11, flops:106.77, batch-reuse:1
@ 215 train 7.6080 , allloss: 16.2013, dt: 1287.93ms, fracRes: 0.0132, norm(attn): 0.0806, norm(output): 0.9995, norm(x): 0.9886, norm(y): 1.0022, norm:86.3890, tok/sec: 101769.81, flops:106.82, batch-reuse:1
@ 216 train 7.6223 , allloss: 16.3547, dt: 1305.49ms, fracRes: 0.0140, norm(attn): 0.0806, norm(output): 0.9995, norm(x): 0.9880, norm(y): 1.0022, norm:78.3690, tok/sec: 100400.32, flops:105.38, batch-reuse:1
@ 217 train 7.7020 , allloss: 16.5386, dt: 1318.55ms, fracRes: 0.0149, norm(attn): 0.0801, norm(output): 0.9995, norm(x): 0.9874, norm(y): 1.0022, norm:72.0425, tok/sec: 99406.00, flops:104.34, batch-reuse:1
@ 218 train 7.6874 , allloss: 16.4055, dt: 1327.10ms, fracRes: 0.0159, norm(attn): 0.0801, norm(output): 0.9995, norm(x): 0.9866, norm(y): 1.0022, norm:77.3719, tok/sec: 98765.87, flops:103.67, batch-reuse:1
@ 219 train 7.7850 , allloss: 16.4502, dt: 1305.84ms, fracRes: 0.0173, norm(attn): 0.0796, norm(output): 0.9995, norm(x): 0.9857, norm(y): 1.0022, norm:81.3892, tok/sec: 100373.69, flops:105.36, batch-reuse:1
@ 220 train 7.7091 , allloss: 16.3046, dt: 1297.17ms, fracRes: 0.0190, norm(attn): 0.0796, norm(output): 0.9995, norm(x): 0.9846, norm(y): 1.0022, norm:83.9758, tok/sec: 101044.55, flops:106.06, batch-reuse:1
@ 221 train 7.7129 , allloss: 16.2792, dt: 1293.92ms, fracRes: 0.0212, norm(attn): 0.0796, norm(output): 0.9995, norm(x): 0.9833, norm(y): 1.0022, norm:73.8417, tok/sec: 101298.51, flops:106.33, batch-reuse:1
@ 222 train 7.6711 , allloss: 16.2666, dt: 1310.97ms, fracRes: 0.0231, norm(attn): 0.0791, norm(output): 0.9995, norm(x): 0.9821, norm(y): 1.0022, norm:85.0318, tok/sec: 99980.96, flops:104.94, batch-reuse:1
@ 223 train 7.7143 , allloss: 16.2113, dt: 1304.76ms, fracRes: 0.0253, norm(attn): 0.0791, norm(output): 0.9995, norm(x): 0.9808, norm(y): 1.0022, norm:84.4221, tok/sec: 100456.77, flops:105.44, batch-reuse:1
@ 224 train 7.6475 , allloss: 16.1114, dt: 1325.18ms, fracRes: 0.0276, norm(attn): 0.0796, norm(output): 0.9995, norm(x): 0.9795, norm(y): 1.0022, norm:86.7670, tok/sec: 98908.88, flops:103.82, batch-reuse:1
@ 225 train 7.6728 , allloss: 16.1843, dt: 1323.31ms, fracRes: 0.0297, norm(attn): 0.0791, norm(output): 0.9995, norm(x): 0.9783, norm(y): 1.0022, norm:75.4634, tok/sec: 99048.69, flops:103.96, batch-reuse:1
@ 226 train 7.7184 , allloss: 16.3333, dt: 1318.41ms, fracRes: 0.0317, norm(attn): 0.0796, norm(output): 0.9995, norm(x): 0.9771, norm(y): 1.0022, norm:77.8873, tok/sec: 99416.64, flops:104.35, batch-reuse:1
@ 227 train 7.7170 , allloss: 16.2014, dt: 1313.07ms, fracRes: 0.0336, norm(attn): 0.0811, norm(output): 0.9995, norm(x): 0.9758, norm(y): 1.0022, norm:83.8464, tok/sec: 99820.97, flops:104.78, batch-reuse:1
@ 228 train 7.6998 , allloss: 16.0576, dt: 1299.26ms, fracRes: 0.0355, norm(attn): 0.0830, norm(output): 0.9994, norm(x): 0.9741, norm(y): 1.0022, norm:91.3642, tok/sec: 100881.94, flops:105.89, batch-reuse:1
@ 229 train 7.7320 , allloss: 16.0773, dt: 1316.18ms, fracRes: 0.0377, norm(attn): 0.0854, norm(output): 0.9994, norm(x): 0.9717, norm(y): 1.0022, norm:89.3589, tok/sec: 99585.45, flops:104.53, batch-reuse:1
@ 230 train 7.7311 , allloss: 16.1887, dt: 1332.04ms, fracRes: 0.0427, norm(attn): 0.0854, norm(output): 0.9994, norm(x): 0.9696, norm(y): 1.0022, norm:81.3170, tok/sec: 98399.32, flops:103.28, batch-reuse:1
@ 231 train 7.6721 , allloss: 16.5815, dt: 1329.21ms, fracRes: 0.0597, norm(attn): 0.0811, norm(output): 0.9994, norm(x): 0.9739, norm(y): 1.0022, norm:78.8124, tok/sec: 98609.09, flops:103.50, batch-reuse:1
@ 232 train 7.6566 , allloss: 16.8480, dt: 1305.33ms, fracRes: 0.0772, norm(attn): 0.0781, norm(output): 0.9993, norm(x): 0.9828, norm(y): 1.0022, norm:97.4405, tok/sec: 100413.05, flops:105.40, batch-reuse:1
@ 233 train 7.7201 , allloss: 17.1162, dt: 1300.85ms, fracRes: 0.0879, norm(attn): 0.0776, norm(output): 0.9993, norm(x): 0.9888, norm(y): 1.0022, norm:101.9907, tok/sec: 100758.82, flops:105.76, batch-reuse:1
@ 234 train 7.5941 , allloss: 16.3606, dt: 1297.62ms, fracRes: 0.0915, norm(attn): 0.0776, norm(output): 0.9993, norm(x): 0.9901, norm(y): 1.0022, norm:98.2822, tok/sec: 101009.80, flops:106.02, batch-reuse:1
@ 235 train 7.7001 , allloss: 16.1357, dt: 1310.61ms, fracRes: 0.0932, norm(attn): 0.0776, norm(output): 0.9993, norm(x): 0.9901, norm(y): 1.0022, norm:90.1520, tok/sec: 100008.41, flops:104.97, batch-reuse:1
@ 236 train 7.6046 , allloss: 15.8600, dt: 1325.53ms, fracRes: 0.0943, norm(attn): 0.0781, norm(output): 0.9993, norm(x): 0.9898, norm(y): 1.0023, norm:92.8902, tok/sec: 98882.94, flops:103.79, batch-reuse:1
@ 237 train 7.7141 , allloss: 15.9418, dt: 1312.08ms, fracRes: 0.0949, norm(attn): 0.0781, norm(output): 0.9992, norm(x): 0.9895, norm(y): 1.0023, norm:88.6663, tok/sec: 99896.70, flops:104.85, batch-reuse:1
@ 238 train 7.6701 , allloss: 16.1713, dt: 1305.80ms, fracRes: 0.0956, norm(attn): 0.0786, norm(output): 0.9992, norm(x): 0.9891, norm(y): 1.0023, norm:95.8404, tok/sec: 100376.88, flops:105.36, batch-reuse:1
@ 239 train 7.6843 , allloss: 21.7631, dt: 1337.74ms, fracRes: 0.0958, norm(attn): 0.0811, norm(output): 0.9992, norm(x): 0.9888, norm(y): 1.0023, norm:109.3784, tok/sec: 97980.02, flops:102.84, batch-reuse:1
@ 240 train 7.7361 , allloss: 55.4845, dt: 1336.53ms, fracRes: 0.0940, norm(attn): 0.0840, norm(output): 0.9991, norm(x): 0.9898, norm(y): 1.0023, norm:190.4663, tok/sec: 98068.57, flops:102.94, batch-reuse:1
@ 241 train 7.6894 , allloss: 76.1335, dt: 1320.74ms, fracRes: 0.0908, norm(attn): 0.0859, norm(output): 0.9990, norm(x): 0.9908, norm(y): 1.0023, norm:288.8182, tok/sec: 99241.26, flops:104.17, batch-reuse:1
@ 242 train 7.7225 , allloss: 82.2749, dt: 1321.77ms, fracRes: 0.0672, norm(attn): 0.0923, norm(output): 0.9990, norm(x): 0.9775, norm(y): 1.0022, norm:303.7973, tok/sec: 99163.88, flops:104.09, batch-reuse:1
@ 243 train 7.5879 , allloss: 62.8347, dt: 1312.56ms, fracRes: 0.0629, norm(attn): 0.0938, norm(output): 0.9990, norm(x): 0.9769, norm(y): 1.0022, norm:319.9424, tok/sec: 99859.81, flops:104.82, batch-reuse:1
@ 244 train 7.7448 , allloss: 44.7818, dt: 1308.45ms, fracRes: 0.0793, norm(attn): 0.0928, norm(output): 0.9990, norm(x): 0.9857, norm(y): 1.0022, norm:268.7305, tok/sec: 100173.18, flops:105.14, batch-reuse:1
@ 245 train 7.6051 , allloss: 37.0669, dt: 1305.23ms, fracRes: 0.0871, norm(attn): 0.0933, norm(output): 0.9990, norm(x): 0.9899, norm(y): 1.0022, norm:220.9137, tok/sec: 100420.95, flops:105.41, batch-reuse:1
@ 246 train 7.7986 , allloss: 33.3328, dt: 1309.39ms, fracRes: 0.0865, norm(attn): 0.0933, norm(output): 0.9990, norm(x): 0.9901, norm(y): 1.0023, norm:193.0834, tok/sec: 100101.51, flops:105.07, batch-reuse:1
@ 247 train 7.7109 , allloss: 29.4406, dt: 1315.70ms, fracRes: 0.0833, norm(attn): 0.0947, norm(output): 0.9990, norm(x): 0.9900, norm(y): 1.0023, norm:172.0115, tok/sec: 99621.62, flops:104.57, batch-reuse:1
@ 248 train 7.6672 , allloss: 28.6979, dt: 1332.21ms, fracRes: 0.0827, norm(attn): 0.0967, norm(output): 0.9990, norm(x): 0.9908, norm(y): 1.0023, norm:160.0259, tok/sec: 98386.67, flops:103.27, batch-reuse:1
@ 249 train 7.6307 , allloss: 28.7144, dt: 1329.09ms, fracRes: 0.0858, norm(attn): 0.0986, norm(output): 0.9990, norm(x): 0.9913, norm(y): 1.0023, norm:157.8881, tok/sec: 98617.67, flops:103.51, batch-reuse:1
@ 250 train 7.6874 , allloss: 26.6685, dt: 1305.52ms, fracRes: 0.0876, norm(attn): 0.0996, norm(output): 0.9990, norm(x): 0.9915, norm(y): 1.0023, norm:155.5735, tok/sec: 100397.94, flops:105.38, batch-reuse:1
@ 251 train 7.6110 , allloss: 24.8354, dt: 1307.51ms, fracRes: 0.0880, norm(attn): 0.1011, norm(output): 0.9990, norm(x): 0.9915, norm(y): 1.0023, norm:153.7219, tok/sec: 100245.15, flops:105.22, batch-reuse:1
@ 252 train 7.7591 , allloss: 24.2477, dt: 1327.58ms, fracRes: 0.0873, norm(attn): 0.1016, norm(output): 0.9990, norm(x): 0.9915, norm(y): 1.0023, norm:137.6828, tok/sec: 98729.72, flops:103.63, batch-reuse:1
@ 253 train 7.6366 , allloss: 23.3574, dt: 1303.18ms, fracRes: 0.0865, norm(attn): 0.1021, norm(output): 0.9990, norm(x): 0.9915, norm(y): 1.0023, norm:132.1454, tok/sec: 100578.31, flops:105.57, batch-reuse:1
@ 254 train 7.5923 , allloss: 22.2771, dt: 1327.04ms, fracRes: 0.0864, norm(attn): 0.1035, norm(output): 0.9990, norm(x): 0.9916, norm(y): 1.0023, norm:127.3969, tok/sec: 98770.43, flops:103.67, batch-reuse:1
@ 255 train 7.6135 , allloss: 21.2187, dt: 1304.71ms, fracRes: 0.0875, norm(attn): 0.1035, norm(output): 0.9990, norm(x): 0.9917, norm(y): 1.0023, norm:141.7054, tok/sec: 100460.44, flops:105.45, batch-reuse:1
@ 256 train 7.6260 , allloss: 20.2428, dt: 1287.99ms, fracRes: 0.0888, norm(attn): 0.1055, norm(output): 0.9990, norm(x): 0.9917, norm(y): 1.0024, norm:177.2203, tok/sec: 101764.38, flops:106.82, batch-reuse:1
@ 257 train 7.6874 , allloss: 19.6333, dt: 1302.95ms, fracRes: 0.0896, norm(attn): 0.1074, norm(output): 0.9990, norm(x): 0.9917, norm(y): 1.0024, norm:159.1828, tok/sec: 100596.60, flops:105.59, batch-reuse:1
@ 258 train 7.6413 , allloss: 19.2714, dt: 1326.07ms, fracRes: 0.0899, norm(attn): 0.1074, norm(output): 0.9990, norm(x): 0.9917, norm(y): 1.0024, norm:136.2350, tok/sec: 98842.14, flops:103.75, batch-reuse:1
@ 259 train 7.6469 , allloss: 19.0178, dt: 1324.45ms, fracRes: 0.0901, norm(attn): 0.1074, norm(output): 0.9991, norm(x): 0.9917, norm(y): 1.0024, norm:129.6097, tok/sec: 98963.50, flops:103.88, batch-reuse:1
@ 260 train 7.7243 , allloss: 18.8095, dt: 1306.85ms, fracRes: 0.0903, norm(attn): 0.1084, norm(output): 0.9991, norm(x): 0.9916, norm(y): 1.0024, norm:138.6793, tok/sec: 100296.41, flops:105.27, batch-reuse:1
@ 261 train 7.6696 , allloss: 18.1480, dt: 1330.45ms, fracRes: 0.0906, norm(attn): 0.1094, norm(output): 0.9990, norm(x): 0.9914, norm(y): 1.0024, norm:154.1411, tok/sec: 98517.22, flops:103.41, batch-reuse:1
@ 262 train 7.7014 , allloss: 17.8859, dt: 1319.75ms, fracRes: 0.0909, norm(attn): 0.1104, norm(output): 0.9991, norm(x): 0.9913, norm(y): 1.0024, norm:151.6966, tok/sec: 99316.06, flops:104.25, batch-reuse:1
@ 263 train 7.6755 , allloss: 17.3343, dt: 1337.62ms, fracRes: 0.0912, norm(attn): 0.1113, norm(output): 0.9991, norm(x): 0.9912, norm(y): 1.0024, norm:120.8802, tok/sec: 97988.65, flops:102.85, batch-reuse:1
@ 264 train 7.6570 , allloss: 17.1567, dt: 1328.86ms, fracRes: 0.0915, norm(attn): 0.1133, norm(output): 0.9991, norm(x): 0.9911, norm(y): 1.0024, norm:144.5434, tok/sec: 98635.09, flops:103.53, batch-reuse:1
@ 265 train 7.6570 , allloss: 16.7203, dt: 1298.47ms, fracRes: 0.0917, norm(attn): 0.1167, norm(output): 0.9990, norm(x): 0.9910, norm(y): 1.0025, norm:166.6288, tok/sec: 100943.51, flops:105.95, batch-reuse:1
@ 266 train 7.6562 , allloss: 16.4825, dt: 1306.61ms, fracRes: 0.0919, norm(attn): 0.1167, norm(output): 0.9990, norm(x): 0.9909, norm(y): 1.0025, norm:159.5867, tok/sec: 100314.31, flops:105.29, batch-reuse:1
@ 267 train 7.6297 , allloss: 16.1679, dt: 1297.75ms, fracRes: 0.0921, norm(attn): 0.1172, norm(output): 0.9990, norm(x): 0.9908, norm(y): 1.0025, norm:112.6375, tok/sec: 100999.31, flops:106.01, batch-reuse:1
@ 268 train 7.7074 , allloss: 16.3519, dt: 1307.03ms, fracRes: 0.0923, norm(attn): 0.1172, norm(output): 0.9990, norm(x): 0.9906, norm(y): 1.0025, norm:109.7506, tok/sec: 100282.49, flops:105.26, batch-reuse:1
@ 269 train 7.6446 , allloss: 15.7448, dt: 1337.49ms, fracRes: 0.0926, norm(attn): 0.1191, norm(output): 0.9990, norm(x): 0.9904, norm(y): 1.0025, norm:122.0529, tok/sec: 97998.71, flops:102.86, batch-reuse:1
@ 270 train 7.7318 , allloss: 16.0076, dt: 1305.85ms, fracRes: 0.0929, norm(attn): 0.1201, norm(output): 0.9990, norm(x): 0.9903, norm(y): 1.0025, norm:166.0102, tok/sec: 100372.75, flops:105.35, batch-reuse:1
@ 271 train 7.6362 , allloss: 15.3788, dt: 1308.45ms, fracRes: 0.0931, norm(attn): 0.1235, norm(output): 0.9990, norm(x): 0.9901, norm(y): 1.0025, norm:127.6397, tok/sec: 100173.45, flops:105.15, batch-reuse:1
@ 272 train 7.6419 , allloss: 15.7913, dt: 1327.13ms, fracRes: 0.0933, norm(attn): 0.1240, norm(output): 0.9990, norm(x): 0.9900, norm(y): 1.0025, norm:121.6745, tok/sec: 98763.26, flops:103.67, batch-reuse:1
@ 273 train 7.7973 , allloss: 15.7952, dt: 1297.51ms, fracRes: 0.0935, norm(attn): 0.1235, norm(output): 0.9990, norm(x): 0.9898, norm(y): 1.0025, norm:83.5302, tok/sec: 101017.94, flops:106.03, batch-reuse:1
@ 274 train 7.6781 , allloss: 15.7524, dt: 1305.01ms, fracRes: 0.0937, norm(attn): 0.1245, norm(output): 0.9990, norm(x): 0.9897, norm(y): 1.0025, norm:125.1057, tok/sec: 100437.21, flops:105.42, batch-reuse:1
@ 275 train 7.6719 , allloss: 15.3949, dt: 1296.51ms, fracRes: 0.0939, norm(attn): 0.1260, norm(output): 0.9990, norm(x): 0.9895, norm(y): 1.0025, norm:141.2134, tok/sec: 101096.39, flops:106.11, batch-reuse:1
@ 276 train 7.6522 , allloss: 15.4705, dt: 1309.76ms, fracRes: 0.0941, norm(attn): 0.1270, norm(output): 0.9990, norm(x): 0.9894, norm(y): 1.0025, norm:136.8853, tok/sec: 100073.63, flops:105.04, batch-reuse:1
@ 277 train 7.5635 , allloss: 15.3794, dt: 1302.30ms, fracRes: 0.0944, norm(attn): 0.1289, norm(output): 0.9990, norm(x): 0.9892, norm(y): 1.0025, norm:105.1622, tok/sec: 100646.86, flops:105.64, batch-reuse:1
@ 278 train 7.6484 , allloss: 15.6173, dt: 1305.72ms, fracRes: 0.0946, norm(attn): 0.1309, norm(output): 0.9990, norm(x): 0.9890, norm(y): 1.0026, norm:89.7128, tok/sec: 100383.00, flops:105.37, batch-reuse:1
@ 279 train 7.6063 , allloss: 15.4754, dt: 1298.98ms, fracRes: 0.0949, norm(attn): 0.1318, norm(output): 0.9990, norm(x): 0.9888, norm(y): 1.0026, norm:115.4270, tok/sec: 100903.56, flops:105.91, batch-reuse:1
@ 280 train 7.7061 , allloss: 15.3296, dt: 1316.08ms, fracRes: 0.0952, norm(attn): 0.1328, norm(output): 0.9990, norm(x): 0.9886, norm(y): 1.0026, norm:129.8911, tok/sec: 99593.08, flops:104.54, batch-reuse:1
@ 281 train 7.6365 , allloss: 15.4033, dt: 1287.61ms, fracRes: 0.0955, norm(attn): 0.1328, norm(output): 0.9990, norm(x): 0.9884, norm(y): 1.0026, norm:138.9763, tok/sec: 101794.49, flops:106.85, batch-reuse:1
@ 282 train 7.6041 , allloss: 15.2579, dt: 1315.70ms, fracRes: 0.0958, norm(attn): 0.1338, norm(output): 0.9990, norm(x): 0.9882, norm(y): 1.0026, norm:94.0283, tok/sec: 99621.60, flops:104.57, batch-reuse:1
@ 283 train 7.5613 , allloss: 15.4142, dt: 1306.05ms, fracRes: 0.0962, norm(attn): 0.1348, norm(output): 0.9990, norm(x): 0.9879, norm(y): 1.0026, norm:97.7245, tok/sec: 100357.80, flops:105.34, batch-reuse:1
@ 284 train 7.6628 , allloss: 15.3864, dt: 1322.26ms, fracRes: 0.0965, norm(attn): 0.1357, norm(output): 0.9990, norm(x): 0.9877, norm(y): 1.0026, norm:108.0287, tok/sec: 99127.12, flops:104.05, batch-reuse:1
@ 285 train 7.6706 , allloss: 15.3179, dt: 1292.54ms, fracRes: 0.0969, norm(attn): 0.1377, norm(output): 0.9990, norm(x): 0.9875, norm(y): 1.0026, norm:142.7691, tok/sec: 101406.68, flops:106.44, batch-reuse:1
@ 286 train 7.6844 , allloss: 15.2830, dt: 1305.95ms, fracRes: 0.0973, norm(attn): 0.1396, norm(output): 0.9989, norm(x): 0.9872, norm(y): 1.0026, norm:139.8819, tok/sec: 100364.93, flops:105.35, batch-reuse:1
@ 287 train 7.6707 , allloss: 15.2279, dt: 1342.12ms, fracRes: 0.0977, norm(attn): 0.1406, norm(output): 0.9989, norm(x): 0.9869, norm(y): 1.0026, norm:107.9844, tok/sec: 97660.15, flops:102.51, batch-reuse:1
@ 288 train 7.6897 , allloss: 15.5425, dt: 1311.10ms, fracRes: 0.0982, norm(attn): 0.1406, norm(output): 0.9989, norm(x): 0.9866, norm(y): 1.0026, norm:104.9848, tok/sec: 99971.29, flops:104.93, batch-reuse:1
@ 289 train 7.6574 , allloss: 15.3035, dt: 1316.93ms, fracRes: 0.0988, norm(attn): 0.1416, norm(output): 0.9989, norm(x): 0.9863, norm(y): 1.0026, norm:90.7151, tok/sec: 99528.26, flops:104.47, batch-reuse:1
@ 290 train 7.6329 , allloss: 15.3530, dt: 1311.09ms, fracRes: 0.0994, norm(attn): 0.1436, norm(output): 0.9989, norm(x): 0.9859, norm(y): 1.0026, norm:140.4057, tok/sec: 99971.94, flops:104.93, batch-reuse:1
@ 291 train 7.5683 , allloss: 14.9010, dt: 1304.94ms, fracRes: 0.1001, norm(attn): 0.1455, norm(output): 0.9989, norm(x): 0.9854, norm(y): 1.0026, norm:152.8492, tok/sec: 100442.80, flops:105.43, batch-reuse:1
@ 292 train 7.5967 , allloss: 15.2287, dt: 1312.54ms, fracRes: 0.1009, norm(attn): 0.1465, norm(output): 0.9989, norm(x): 0.9850, norm(y): 1.0026, norm:154.3466, tok/sec: 99861.37, flops:104.82, batch-reuse:1
@ 293 train 7.6724 , allloss: 15.0968, dt: 1322.21ms, fracRes: 0.1017, norm(attn): 0.1465, norm(output): 0.9989, norm(x): 0.9845, norm(y): 1.0026, norm:124.1341, tok/sec: 99130.99, flops:104.05, batch-reuse:1
@ 294 train 7.6375 , allloss: 15.2115, dt: 1320.73ms, fracRes: 0.1028, norm(attn): 0.1465, norm(output): 0.9989, norm(x): 0.9839, norm(y): 1.0026, norm:130.1662, tok/sec: 99241.94, flops:104.17, batch-reuse:1
@ 295 train 7.6603 , allloss: 15.0804, dt: 1292.96ms, fracRes: 0.1042, norm(attn): 0.1484, norm(output): 0.9989, norm(x): 0.9832, norm(y): 1.0026, norm:116.5202, tok/sec: 101373.80, flops:106.41, batch-reuse:1
@ 296 train 7.5767 , allloss: 15.1611, dt: 1306.52ms, fracRes: 0.1059, norm(attn): 0.1484, norm(output): 0.9989, norm(x): 0.9823, norm(y): 1.0026, norm:150.4200, tok/sec: 100321.72, flops:105.30, batch-reuse:1
@ 297 train 7.5409 , allloss: 14.7821, dt: 1328.28ms, fracRes: 0.1080, norm(attn): 0.1504, norm(output): 0.9989, norm(x): 0.9812, norm(y): 1.0026, norm:131.2222, tok/sec: 98678.04, flops:103.58, batch-reuse:1
@ 298 train 7.6451 , allloss: 15.2796, dt: 1311.84ms, fracRes: 0.1108, norm(attn): 0.1484, norm(output): 0.9989, norm(x): 0.9799, norm(y): 1.0026, norm:147.7370, tok/sec: 99914.93, flops:104.87, batch-reuse:1
@ 299 train 7.6497 , allloss: 15.0551, dt: 1303.35ms, fracRes: 0.1147, norm(attn): 0.1475, norm(output): 0.9989, norm(x): 0.9782, norm(y): 1.0026, norm:124.3552, tok/sec: 100565.16, flops:105.56, batch-reuse:1
@ 300 train 7.6328 , allloss: 15.3219, dt: 1313.99ms, fracRes: 0.1199, norm(attn): 0.1465, norm(output): 0.9988, norm(x): 0.9763, norm(y): 1.0026, norm:133.0539, tok/sec: 99751.06, flops:104.70, batch-reuse:1
@ 301 train 7.7791 , allloss: 15.3469, dt: 1289.99ms, fracRes: 0.1268, norm(attn): 0.1455, norm(output): 0.9988, norm(x): 0.9745, norm(y): 1.0026, norm:110.1669, tok/sec: 101607.03, flops:106.65, batch-reuse:1
@ 302 train 7.6180 , allloss: 15.2494, dt: 1303.69ms, fracRes: 0.1365, norm(attn): 0.1416, norm(output): 0.9988, norm(x): 0.9735, norm(y): 1.0026, norm:126.9477, tok/sec: 100539.06, flops:105.53, batch-reuse:1
@ 303 train 7.6447 , allloss: 15.2837, dt: 1306.80ms, fracRes: 0.1486, norm(attn): 0.1396, norm(output): 0.9988, norm(x): 0.9753, norm(y): 1.0026, norm:136.5953, tok/sec: 100299.61, flops:105.28, batch-reuse:1
@ 304 train 7.6090 , allloss: 15.5150, dt: 1322.67ms, fracRes: 0.1607, norm(attn): 0.1348, norm(output): 0.9988, norm(x): 0.9806, norm(y): 1.0026, norm:137.1914, tok/sec: 99096.58, flops:104.01, batch-reuse:1
@ 305 train 7.5553 , allloss: 16.0105, dt: 1327.27ms, fracRes: 0.1688, norm(attn): 0.1328, norm(output): 0.9988, norm(x): 0.9861, norm(y): 1.0026, norm:137.2981, tok/sec: 98753.08, flops:103.65, batch-reuse:1
@ 306 train 7.5605 , allloss: 15.6629, dt: 1295.20ms, fracRes: 0.1725, norm(attn): 0.1328, norm(output): 0.9988, norm(x): 0.9890, norm(y): 1.0026, norm:117.8601, tok/sec: 101198.47, flops:106.22, batch-reuse:1
@ 307 train 7.7476 , allloss: 15.5160, dt: 1299.18ms, fracRes: 0.1737, norm(attn): 0.1328, norm(output): 0.9988, norm(x): 0.9901, norm(y): 1.0027, norm:128.9589, tok/sec: 100888.38, flops:105.90, batch-reuse:1
@ 308 train 7.6128 , allloss: 14.8352, dt: 1333.78ms, fracRes: 0.1740, norm(attn): 0.1328, norm(output): 0.9988, norm(x): 0.9903, norm(y): 1.0027, norm:141.4215, tok/sec: 98271.20, flops:103.15, batch-reuse:1
@ 309 train 7.6421 , allloss: 15.0263, dt: 1322.52ms, fracRes: 0.1740, norm(attn): 0.1328, norm(output): 0.9988, norm(x): 0.9903, norm(y): 1.0027, norm:160.3261, tok/sec: 99107.64, flops:104.03, batch-reuse:1
@ 310 train 7.6731 , allloss: 14.8253, dt: 1316.15ms, fracRes: 0.1740, norm(attn): 0.1328, norm(output): 0.9988, norm(x): 0.9903, norm(y): 1.0027, norm:115.3602, tok/sec: 99587.53, flops:104.53, batch-reuse:1
@ 311 train 7.6864 , allloss: 15.2397, dt: 1322.69ms, fracRes: 0.1741, norm(attn): 0.1328, norm(output): 0.9987, norm(x): 0.9902, norm(y): 1.0027, norm:120.1834, tok/sec: 99094.83, flops:104.01, batch-reuse:1
@ 312 train 7.7760 , allloss: 15.1073, dt: 1309.08ms, fracRes: 0.1741, norm(attn): 0.1338, norm(output): 0.9987, norm(x): 0.9902, norm(y): 1.0027, norm:108.7346, tok/sec: 100125.58, flops:105.10, batch-reuse:1
@ 313 train 7.5936 , allloss: 14.9936, dt: 1308.30ms, fracRes: 0.1742, norm(attn): 0.1357, norm(output): 0.9987, norm(x): 0.9901, norm(y): 1.0027, norm:147.0184, tok/sec: 100185.01, flops:105.16, batch-reuse:1
@ 314 train 7.5970 , allloss: 14.7209, dt: 1297.50ms, fracRes: 0.1742, norm(attn): 0.1357, norm(output): 0.9987, norm(x): 0.9901, norm(y): 1.0027, norm:141.4648, tok/sec: 101019.09, flops:106.03, batch-reuse:1
@ 315 train 7.6462 , allloss: 14.9334, dt: 1294.38ms, fracRes: 0.1742, norm(attn): 0.1387, norm(output): 0.9987, norm(x): 0.9900, norm(y): 1.0027, norm:162.3140, tok/sec: 101262.09, flops:106.29, batch-reuse:1
@ 316 train 7.6586 , allloss: 14.9239, dt: 1290.23ms, fracRes: 0.1743, norm(attn): 0.1387, norm(output): 0.9987, norm(x): 0.9900, norm(y): 1.0027, norm:167.5082, tok/sec: 101588.10, flops:106.63, batch-reuse:1
@ 317 train 7.6860 , allloss: 14.7704, dt: 1313.81ms, fracRes: 0.1743, norm(attn): 0.1387, norm(output): 0.9987, norm(x): 0.9899, norm(y): 1.0027, norm:139.7029, tok/sec: 99764.56, flops:104.72, batch-reuse:1
@ 318 train 7.5910 , allloss: 14.9873, dt: 1298.07ms, fracRes: 0.1744, norm(attn): 0.1396, norm(output): 0.9987, norm(x): 0.9898, norm(y): 1.0027, norm:131.9035, tok/sec: 100974.84, flops:105.99, batch-reuse:1
@ 319 train 7.5524 , allloss: 14.7453, dt: 1301.01ms, fracRes: 0.1745, norm(attn): 0.1396, norm(output): 0.9987, norm(x): 0.9897, norm(y): 1.0028, norm:110.6931, tok/sec: 100746.50, flops:105.75, batch-reuse:1
@ 320 train 7.6143 , allloss: 14.9314, dt: 1302.69ms, fracRes: 0.1745, norm(attn): 0.1396, norm(output): 0.9987, norm(x): 0.9896, norm(y): 1.0028, norm:156.4768, tok/sec: 100616.58, flops:105.61, batch-reuse:1
@ 321 train 7.6609 , allloss: 14.9314, dt: 1306.62ms, fracRes: 0.1746, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9894, norm(y): 1.0028, norm:195.1846, tok/sec: 100314.14, flops:105.29, batch-reuse:1
@ 322 train 7.5877 , allloss: 14.7006, dt: 1320.20ms, fracRes: 0.1747, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9893, norm(y): 1.0028, norm:156.7138, tok/sec: 99282.09, flops:104.21, batch-reuse:1
@ 323 train 7.6700 , allloss: 14.9187, dt: 1339.50ms, fracRes: 0.1748, norm(attn): 0.1387, norm(output): 0.9986, norm(x): 0.9891, norm(y): 1.0028, norm:107.4893, tok/sec: 97851.70, flops:102.71, batch-reuse:1
@ 324 train 7.6006 , allloss: 14.9787, dt: 1327.22ms, fracRes: 0.1749, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9890, norm(y): 1.0028, norm:144.5025, tok/sec: 98756.55, flops:103.66, batch-reuse:1
@ 325 train 7.6265 , allloss: 14.6107, dt: 1301.88ms, fracRes: 0.1750, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9888, norm(y): 1.0028, norm:183.7934, tok/sec: 100678.64, flops:105.68, batch-reuse:1
@ 326 train 7.6632 , allloss: 15.0080, dt: 1313.80ms, fracRes: 0.1752, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9886, norm(y): 1.0028, norm:180.7445, tok/sec: 99765.45, flops:104.72, batch-reuse:1
@ 327 train 7.7324 , allloss: 14.8566, dt: 1297.68ms, fracRes: 0.1752, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9885, norm(y): 1.0028, norm:111.8814, tok/sec: 101004.49, flops:106.02, batch-reuse:1
@ 328 train 7.6251 , allloss: 15.0235, dt: 1292.62ms, fracRes: 0.1752, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9886, norm(y): 1.0028, norm:131.4029, tok/sec: 101400.09, flops:106.43, batch-reuse:1
@ 329 train 7.6480 , allloss: 14.6535, dt: 1300.85ms, fracRes: 0.1752, norm(attn): 0.1406, norm(output): 0.9986, norm(x): 0.9886, norm(y): 1.0028, norm:146.1096, tok/sec: 100759.00, flops:105.76, batch-reuse:1
@ 330 train 7.6314 , allloss: 15.0116, dt: 1311.39ms, fracRes: 0.1754, norm(attn): 0.1406, norm(output): 0.9986, norm(x): 0.9884, norm(y): 1.0028, norm:192.5076, tok/sec: 99948.72, flops:104.91, batch-reuse:1
@ 331 train 7.5843 , allloss: 14.4127, dt: 1304.77ms, fracRes: 0.1756, norm(attn): 0.1406, norm(output): 0.9986, norm(x): 0.9881, norm(y): 1.0028, norm:143.5672, tok/sec: 100455.65, flops:105.44, batch-reuse:1
@ 332 train 7.5898 , allloss: 15.1400, dt: 1302.25ms, fracRes: 0.1759, norm(attn): 0.1406, norm(output): 0.9986, norm(x): 0.9876, norm(y): 1.0028, norm:166.9454, tok/sec: 100650.75, flops:105.65, batch-reuse:1
@ 333 train 7.6423 , allloss: 14.6997, dt: 1306.43ms, fracRes: 0.1763, norm(attn): 0.1396, norm(output): 0.9986, norm(x): 0.9871, norm(y): 1.0028, norm:139.3215, tok/sec: 100328.31, flops:105.31, batch-reuse:1
@ 334 train 7.5847 , allloss: 14.7972, dt: 1309.68ms, fracRes: 0.1767, norm(attn): 0.1396, norm(output): 0.9985, norm(x): 0.9866, norm(y): 1.0028, norm:152.5088, tok/sec: 100079.17, flops:105.05, batch-reuse:1
@ 335 train 7.5876 , allloss: 14.7158, dt: 1307.60ms, fracRes: 0.1771, norm(attn): 0.1377, norm(output): 0.9985, norm(x): 0.9862, norm(y): 1.0028, norm:133.7074, tok/sec: 100238.40, flops:105.21, batch-reuse:1
@ 336 train 7.6039 , allloss: 14.6851, dt: 1320.57ms, fracRes: 0.1774, norm(attn): 0.1377, norm(output): 0.9985, norm(x): 0.9857, norm(y): 1.0028, norm:115.9371, tok/sec: 99254.25, flops:104.18, batch-reuse:1
@ 337 train 7.6186 , allloss: 15.0337, dt: 1294.48ms, fracRes: 0.1775, norm(attn): 0.1348, norm(output): 0.9985, norm(x): 0.9856, norm(y): 1.0028, norm:172.0463, tok/sec: 101254.91, flops:106.28, batch-reuse:1
@ 338 train 7.5821 , allloss: 14.5391, dt: 1308.38ms, fracRes: 0.1777, norm(attn): 0.1348, norm(output): 0.9985, norm(x): 0.9853, norm(y): 1.0028, norm:154.5201, tok/sec: 100179.06, flops:105.15, batch-reuse:1
@ 339 train 7.6516 , allloss: 14.9352, dt: 1292.71ms, fracRes: 0.1782, norm(attn): 0.1338, norm(output): 0.9985, norm(x): 0.9848, norm(y): 1.0028, norm:117.6529, tok/sec: 101393.36, flops:106.43, batch-reuse:1
@ 340 train 7.6727 , allloss: 15.2063, dt: 1298.33ms, fracRes: 0.1790, norm(attn): 0.1338, norm(output): 0.9985, norm(x): 0.9839, norm(y): 1.0028, norm:90.7952, tok/sec: 100954.61, flops:105.97, batch-reuse:1
@ 341 train 7.6013 , allloss: 14.9169, dt: 1301.13ms, fracRes: 0.1800, norm(attn): 0.1348, norm(output): 0.9985, norm(x): 0.9827, norm(y): 1.0029, norm:102.2632, tok/sec: 100737.34, flops:105.74, batch-reuse:1
@ 342 train 7.5341 , allloss: 14.8760, dt: 1329.39ms, fracRes: 0.1809, norm(attn): 0.1357, norm(output): 0.9985, norm(x): 0.9817, norm(y): 1.0029, norm:190.3534, tok/sec: 98595.66, flops:103.49, batch-reuse:1
@ 343 train 7.5872 , allloss: 14.5497, dt: 1295.85ms, fracRes: 0.1821, norm(attn): 0.1357, norm(output): 0.9985, norm(x): 0.9805, norm(y): 1.0029, norm:188.7185, tok/sec: 101147.77, flops:106.17, batch-reuse:1
@ 344 train 7.5624 , allloss: 14.6662, dt: 1305.31ms, fracRes: 0.1834, norm(attn): 0.1377, norm(output): 0.9985, norm(x): 0.9792, norm(y): 1.0029, norm:124.8388, tok/sec: 100414.39, flops:105.40, batch-reuse:1
@ 345 train 7.5881 , allloss: 15.1835, dt: 1298.96ms, fracRes: 0.1860, norm(attn): 0.1387, norm(output): 0.9984, norm(x): 0.9767, norm(y): 1.0029, norm:91.4590, tok/sec: 100905.42, flops:105.91, batch-reuse:1
@ 346 train 7.6370 , allloss: 15.0319, dt: 1318.22ms, fracRes: 0.1911, norm(attn): 0.1387, norm(output): 0.9984, norm(x): 0.9723, norm(y): 1.0029, norm:100.1938, tok/sec: 99431.06, flops:104.37, batch-reuse:1
@ 347 train 7.6615 , allloss: 17.0839, dt: 1291.22ms, fracRes: 0.2002, norm(attn): 0.1406, norm(output): 0.9984, norm(x): 0.9665, norm(y): 1.0029, norm:241.9039, tok/sec: 101510.54, flops:106.55, batch-reuse:1
@ 348 train 7.6055 , allloss: 19.1552, dt: 1300.54ms, fracRes: 0.2133, norm(attn): 0.1377, norm(output): 0.9984, norm(x): 0.9626, norm(y): 1.0030, norm:280.7207, tok/sec: 100783.07, flops:105.79, batch-reuse:1
@ 349 train 7.6357 , allloss: 15.8616, dt: 1284.70ms, fracRes: 0.2294, norm(attn): 0.1318, norm(output): 0.9984, norm(x): 0.9663, norm(y): 1.0030, norm:244.5199, tok/sec: 102025.08, flops:107.09, batch-reuse:1
@ 350 train 7.6540 , allloss: 15.4364, dt: 1293.81ms, fracRes: 0.2440, norm(attn): 0.1260, norm(output): 0.9984, norm(x): 0.9784, norm(y): 1.0030, norm:97.4746, tok/sec: 101306.98, flops:106.34, batch-reuse:1
@ 351 train 7.6548 , allloss: 16.5398, dt: 1296.66ms, fracRes: 0.2510, norm(attn): 0.1250, norm(output): 0.9984, norm(x): 0.9869, norm(y): 1.0030, norm:107.6562, tok/sec: 101084.09, flops:106.10, batch-reuse:1
@ 352 train 7.6917 , allloss: 15.8950, dt: 1300.34ms, fracRes: 0.2542, norm(attn): 0.1250, norm(output): 0.9983, norm(x): 0.9905, norm(y): 1.0030, norm:146.4507, tok/sec: 100798.41, flops:105.80, batch-reuse:1
@ 353 train 7.6337 , allloss: 16.8253, dt: 1309.87ms, fracRes: 0.2554, norm(attn): 0.1260, norm(output): 0.9983, norm(x): 0.9913, norm(y): 1.0030, norm:237.5401, tok/sec: 100064.78, flops:105.03, batch-reuse:1
@ 354 train 7.6059 , allloss: 15.6640, dt: 1305.67ms, fracRes: 0.2557, norm(attn): 0.1250, norm(output): 0.9982, norm(x): 0.9914, norm(y): 1.0030, norm:198.9143, tok/sec: 100387.14, flops:105.37, batch-reuse:1
@ 355 train 7.5829 , allloss: 15.2875, dt: 1330.37ms, fracRes: 0.2558, norm(attn): 0.1250, norm(output): 0.9981, norm(x): 0.9913, norm(y): 1.0030, norm:90.7858, tok/sec: 98522.85, flops:103.41, batch-reuse:1
@ 356 train 7.6855 , allloss: 16.2705, dt: 1318.75ms, fracRes: 0.2559, norm(attn): 0.1260, norm(output): 0.9981, norm(x): 0.9912, norm(y): 1.0030, norm:74.3789, tok/sec: 99390.97, flops:104.32, batch-reuse:1
@ 357 train 7.6567 , allloss: 16.5109, dt: 1332.86ms, fracRes: 0.2560, norm(attn): 0.1309, norm(output): 0.9981, norm(x): 0.9910, norm(y): 1.0030, norm:113.0154, tok/sec: 98338.82, flops:103.22, batch-reuse:1
@ 358 train 7.5885 , allloss: 15.2889, dt: 1331.02ms, fracRes: 0.2562, norm(attn): 0.1318, norm(output): 0.9981, norm(x): 0.9907, norm(y): 1.0031, norm:146.9143, tok/sec: 98475.11, flops:103.36, batch-reuse:1
@ 359 train 7.7904 , allloss: 16.0664, dt: 1315.94ms, fracRes: 0.2563, norm(attn): 0.1328, norm(output): 0.9981, norm(x): 0.9906, norm(y): 1.0031, norm:142.4650, tok/sec: 99603.51, flops:104.55, batch-reuse:1
@ 360 train 7.6783 , allloss: 14.4508, dt: 1305.38ms, fracRes: 0.2564, norm(attn): 0.1338, norm(output): 0.9981, norm(x): 0.9903, norm(y): 1.0031, norm:121.3695, tok/sec: 100408.81, flops:105.39, batch-reuse:1
@ 361 train 7.6685 , allloss: 18.0763, dt: 1332.48ms, fracRes: 0.2566, norm(attn): 0.1357, norm(output): 0.9981, norm(x): 0.9901, norm(y): 1.0031, norm:157.4652, tok/sec: 98366.66, flops:103.25, batch-reuse:1
@ 362 train 7.5448 , allloss: 16.1807, dt: 1313.77ms, fracRes: 0.2568, norm(attn): 0.1387, norm(output): 0.9981, norm(x): 0.9898, norm(y): 1.0031, norm:136.8152, tok/sec: 99767.59, flops:104.72, batch-reuse:1
@ 363 train 7.6321 , allloss: 15.0701, dt: 1304.64ms, fracRes: 0.2569, norm(attn): 0.1396, norm(output): 0.9981, norm(x): 0.9897, norm(y): 1.0032, norm:82.7432, tok/sec: 100465.88, flops:105.45, batch-reuse:1
@ 364 train 7.6386 , allloss: 12.8338, dt: 1304.18ms, fracRes: 0.2568, norm(attn): 0.1387, norm(output): 0.9980, norm(x): 0.9898, norm(y): 1.0032, norm:45.8981, tok/sec: 100501.32, flops:105.49, batch-reuse:1
@ 365 train 7.6419 , allloss: 10.8244, dt: 1313.08ms, fracRes: 0.2568, norm(attn): 0.1377, norm(output): 0.9980, norm(x): 0.9900, norm(y): 1.0032, norm:40.7391, tok/sec: 99820.50, flops:104.77, batch-reuse:1
@ 366 train 7.6498 , allloss: 10.8170, dt: 1323.92ms, fracRes: 0.2568, norm(attn): 0.1387, norm(output): 0.9980, norm(x): 0.9899, norm(y): 1.0032, norm:47.6577, tok/sec: 99002.84, flops:103.92, batch-reuse:1
@ 367 train 7.5962 , allloss: 10.8461, dt: 1311.45ms, fracRes: 0.2569, norm(attn): 0.1396, norm(output): 0.9980, norm(x): 0.9897, norm(y): 1.0032, norm:44.5567, tok/sec: 99944.46, flops:104.90, batch-reuse:1
@ 368 train 7.6768 , allloss: 9.7521, dt: 1309.85ms, fracRes: 0.2574, norm(attn): 0.1406, norm(output): 0.9980, norm(x): 0.9891, norm(y): 1.0033, norm:27.5582, tok/sec: 100066.64, flops:105.03, batch-reuse:1
@ 369 train 7.6208 , allloss: 8.7383, dt: 1296.36ms, fracRes: 0.2587, norm(attn): 0.1465, norm(output): 0.9980, norm(x): 0.9872, norm(y): 1.0033, norm:14.4704, tok/sec: 101107.83, flops:106.13, batch-reuse:1
@ 370 train 7.6924 , allloss: 8.4421, dt: 1307.58ms, fracRes: 0.2606, norm(attn): 0.1465, norm(output): 0.9980, norm(x): 0.9848, norm(y): 1.0033, norm:8.5076, tok/sec: 100240.05, flops:105.22, batch-reuse:1
@ 371 train 7.6369 , allloss: 10.1684, dt: 1299.54ms, fracRes: 0.2710, norm(attn): 0.1475, norm(output): 0.9980, norm(x): 0.9739, norm(y): 1.0034, norm:27.3989, tok/sec: 100860.62, flops:105.87, batch-reuse:1
@ 372 train 7.7163 , allloss: 8.4758, dt: 1303.21ms, fracRes: 0.2728, norm(attn): 0.1475, norm(output): 0.9980, norm(x): 0.9724, norm(y): 1.0034, norm:6.4071, tok/sec: 100576.14, flops:105.57, batch-reuse:1
@ 373 train 7.7038 , allloss: 8.2370, dt: 1316.61ms, fracRes: 0.2675, norm(attn): 0.1533, norm(output): 0.9980, norm(x): 0.9786, norm(y): 1.0034, norm:5.2775, tok/sec: 99552.52, flops:104.49, batch-reuse:1
@ 374 train 7.6917 , allloss: 8.1101, dt: 1305.68ms, fracRes: 0.2693, norm(attn): 0.1523, norm(output): 0.9980, norm(x): 0.9761, norm(y): 1.0034, norm:4.2317, tok/sec: 100386.04, flops:105.37, batch-reuse:1
@ 375 train 7.7752 , allloss: 68.2119, dt: 1297.68ms, fracRes: 0.2002, norm(attn): 0.1553, norm(output): 0.9980, norm(x): 0.9745, norm(y): 1.0035, norm:155.2837, tok/sec: 101004.92, flops:106.02, batch-reuse:1
@ 376 train 7.7962 , allloss: 66.8663, dt: 1305.06ms, fracRes: 0.1878, norm(attn): 0.1562, norm(output): 0.9980, norm(x): 0.9738, norm(y): 1.0035, norm:139.3458, tok/sec: 100433.85, flops:105.42, batch-reuse:1
@ 377 train 7.7071 , allloss: 66.1721, dt: 1307.90ms, fracRes: 0.1894, norm(attn): 0.1562, norm(output): 0.9980, norm(x): 0.9637, norm(y): 1.0035, norm:109.6543, tok/sec: 100215.84, flops:105.19, batch-reuse:1
@ 378 train 7.6787 , allloss: 36.8490, dt: 1324.11ms, fracRes: 0.2195, norm(attn): 0.1582, norm(output): 0.9980, norm(x): 0.9413, norm(y): 1.0036, norm:85.3365, tok/sec: 98989.06, flops:103.90, batch-reuse:1
@ 379 train 7.7670 , allloss: 11.8584, dt: 1302.80ms, fracRes: 0.3050, norm(attn): 0.1367, norm(output): 0.9981, norm(x): 0.9050, norm(y): 1.0037, norm:26.6136, tok/sec: 100607.58, flops:105.60, batch-reuse:1
@ 380 train 7.8202 , allloss: 18.7488, dt: 1317.71ms, fracRes: 0.3269, norm(attn): 0.1211, norm(output): 0.9981, norm(x): 0.9215, norm(y): 1.0037, norm:20.6657, tok/sec: 99469.22, flops:104.41, batch-reuse:1
@ 381 train 7.7738 , allloss: 28.3145, dt: 1332.34ms, fracRes: 0.3224, norm(attn): 0.1147, norm(output): 0.9981, norm(x): 0.9424, norm(y): 1.0038, norm:59.0582, tok/sec: 98377.43, flops:103.26, batch-reuse:1
@ 382 train 7.7180 , allloss: 26.7800, dt: 1305.92ms, fracRes: 0.3072, norm(attn): 0.1162, norm(output): 0.9981, norm(x): 0.9608, norm(y): 1.0038, norm:37.5514, tok/sec: 100367.46, flops:105.35, batch-reuse:1
@ 383 train 7.7162 , allloss: 22.6782, dt: 1322.09ms, fracRes: 0.3105, norm(attn): 0.1187, norm(output): 0.9981, norm(x): 0.9720, norm(y): 1.0039, norm:29.7049, tok/sec: 99139.86, flops:104.06, batch-reuse:1
@ 384 train 7.7068 , allloss: 26.0342, dt: 1316.77ms, fracRes: 0.2936, norm(attn): 0.1260, norm(output): 0.9981, norm(x): 0.9772, norm(y): 1.0039, norm:50.0338, tok/sec: 99540.92, flops:104.48, batch-reuse:1
@ 385 train 7.6865 , allloss: 11.6316, dt: 1304.13ms, fracRes: 0.3667, norm(attn): 0.1123, norm(output): 0.9982, norm(x): 0.9717, norm(y): 1.0038, norm:16.1744, tok/sec: 100504.96, flops:105.49, batch-reuse:1
@ 386 train 7.7279 , allloss: 9.6648, dt: 1314.74ms, fracRes: 0.3970, norm(attn): 0.1089, norm(output): 0.9982, norm(x): 0.9385, norm(y): 1.0039, norm:21.1912, tok/sec: 99693.95, flops:104.64, batch-reuse:1
@ 387 train 7.7175 , allloss: 11.0068, dt: 1312.52ms, fracRes: 0.3975, norm(attn): 0.1123, norm(output): 0.9982, norm(x): 0.9155, norm(y): 1.0040, norm:34.4609, tok/sec: 99862.71, flops:104.82, batch-reuse:1
@ 388 train 7.6563 , allloss: 10.1470, dt: 1302.99ms, fracRes: 0.4063, norm(attn): 0.1167, norm(output): 0.9982, norm(x): 0.9259, norm(y): 1.0040, norm:29.9316, tok/sec: 100593.60, flops:105.59, batch-reuse:1
@ 389 train 7.7058 , allloss: 8.9145, dt: 1294.87ms, fracRes: 0.4176, norm(attn): 0.1167, norm(output): 0.9983, norm(x): 0.9354, norm(y): 1.0040, norm:14.4948, tok/sec: 101224.37, flops:106.25, batch-reuse:1
@ 390 train 7.7377 , allloss: 8.5842, dt: 1313.31ms, fracRes: 0.4245, norm(attn): 0.1187, norm(output): 0.9983, norm(x): 0.9485, norm(y): 1.0040, norm:6.3414, tok/sec: 99803.16, flops:104.76, batch-reuse:1
@ 391 train 7.6781 , allloss: 8.6825, dt: 1318.07ms, fracRes: 0.4309, norm(attn): 0.1221, norm(output): 0.9983, norm(x): 0.9644, norm(y): 1.0040, norm:13.3993, tok/sec: 99442.37, flops:104.38, batch-reuse:1
@ 392 train 7.7027 , allloss: 8.6585, dt: 1283.10ms, fracRes: 0.4371, norm(attn): 0.1245, norm(output): 0.9983, norm(x): 0.9716, norm(y): 1.0041, norm:9.4217, tok/sec: 102152.57, flops:107.22, batch-reuse:1
@ 393 train 7.6979 , allloss: 7.9557, dt: 1292.41ms, fracRes: 0.4432, norm(attn): 0.1245, norm(output): 0.9983, norm(x): 0.9715, norm(y): 1.0041, norm:2.4316, tok/sec: 101416.74, flops:106.45, batch-reuse:1
@ 394 train 7.6688 , allloss: 8.1705, dt: 1327.87ms, fracRes: 0.4548, norm(attn): 0.1226, norm(output): 0.9982, norm(x): 0.9677, norm(y): 1.0040, norm:2.8052, tok/sec: 98708.71, flops:103.61, batch-reuse:1
@ 395 train 7.8040 , allloss: 28.7460, dt: 1316.95ms, fracRes: 0.3729, norm(attn): 0.1328, norm(output): 0.9980, norm(x): 0.9568, norm(y): 1.0040, norm:54.9165, tok/sec: 99527.15, flops:104.47, batch-reuse:1
@ 396 train 16.0026 , allloss: 103.3006, dt: 1308.84ms, fracRes: 0.3344, norm(attn): 0.1328, norm(output): 0.9966, norm(x): 0.9714, norm(y): 1.0026, norm:1990.7296, tok/sec: 100143.82, flops:105.11, batch-reuse:1
@ 397 train 11.6937 , allloss: 156.8972, dt: 1342.63ms, fracRes: 0.2906, norm(attn): 0.1670, norm(output): 0.9970, norm(x): 0.9760, norm(y): 1.0031, norm:191.5357, tok/sec: 97623.36, flops:102.47, batch-reuse:1
@ 398 train 8.5834 , allloss: 128.2755, dt: 1316.09ms, fracRes: 0.2136, norm(attn): 0.2080, norm(output): 0.9974, norm(x): 0.9759, norm(y): 1.0035, norm:120.6566, tok/sec: 99591.87, flops:104.53, batch-reuse:1
@ 399 train 8.9847 , allloss: 114.4286, dt: 1333.08ms, fracRes: 0.1982, norm(attn): 0.2090, norm(output): 0.9974, norm(x): 0.9785, norm(y): 1.0035, norm:103.0129, tok/sec: 98322.71, flops:103.20, batch-reuse:1
@ 400 train 8.0536 , allloss: 103.9132, dt: 1336.80ms, fracRes: 0.2006, norm(attn): 0.2246, norm(output): 0.9974, norm(x): 0.9778, norm(y): 1.0033, norm:168.5928, tok/sec: 98048.75, flops:102.92, batch-reuse:1
@ 401 train 8.0616 , allloss: 83.9483, dt: 1309.99ms, fracRes: 0.2917, norm(attn): 0.1602, norm(output): 0.9972, norm(x): 0.9645, norm(y): 1.0031, norm:135.5896, tok/sec: 100055.73, flops:105.02, batch-reuse:1
@ 402 train 7.8005 , allloss: 57.3912, dt: 1326.48ms, fracRes: 0.2512, norm(attn): 0.1943, norm(output): 0.9974, norm(x): 0.9736, norm(y): 1.0032, norm:75.7866, tok/sec: 98811.65, flops:103.72, batch-reuse:1
@ 403 train 7.8400 , allloss: 87.8272, dt: 1318.84ms, fracRes: 0.2907, norm(attn): 0.1709, norm(output): 0.9980, norm(x): 0.9757, norm(y): 1.0041, norm:98.1435, tok/sec: 99384.34, flops:104.32, batch-reuse:1
@ 404 train 7.7741 , allloss: 65.6344, dt: 1308.91ms, fracRes: 0.3506, norm(attn): 0.1777, norm(output): 0.9980, norm(x): 0.9665, norm(y): 1.0042, norm:62.5484, tok/sec: 100138.31, flops:105.11, batch-reuse:1
@ 405 train 7.7897 , allloss: 30.1735, dt: 1331.60ms, fracRes: 0.4127, norm(attn): 0.1748, norm(output): 0.9977, norm(x): 0.9635, norm(y): 1.0039, norm:66.4062, tok/sec: 98431.75, flops:103.32, batch-reuse:1
@ 406 train 7.8109 , allloss: 23.7751, dt: 1293.27ms, fracRes: 0.4348, norm(attn): 0.1738, norm(output): 0.9977, norm(x): 0.9685, norm(y): 1.0040, norm:53.6563, tok/sec: 101349.02, flops:106.38, batch-reuse:1
@ 407 train 7.8030 , allloss: 23.0029, dt: 1309.70ms, fracRes: 0.4487, norm(attn): 0.1787, norm(output): 0.9977, norm(x): 0.9641, norm(y): 1.0041, norm:75.3235, tok/sec: 100077.79, flops:105.04, batch-reuse:1
@ 408 train 7.8382 , allloss: 20.0277, dt: 1319.66ms, fracRes: 0.4886, norm(attn): 0.1650, norm(output): 0.9978, norm(x): 0.9474, norm(y): 1.0042, norm:59.4019, tok/sec: 99322.38, flops:104.25, batch-reuse:1
@ 409 train 7.7764 , allloss: 16.1360, dt: 1305.46ms, fracRes: 0.5307, norm(attn): 0.1406, norm(output): 0.9980, norm(x): 0.9480, norm(y): 1.0044, norm:38.7062, tok/sec: 100402.63, flops:105.39, batch-reuse:1
@ 410 train 7.7834 , allloss: 14.3545, dt: 1307.43ms, fracRes: 0.5488, norm(attn): 0.1377, norm(output): 0.9980, norm(x): 0.9507, norm(y): 1.0045, norm:30.7806, tok/sec: 100251.45, flops:105.23, batch-reuse:1
@ 411 train 7.7702 , allloss: 13.0510, dt: 1295.32ms, fracRes: 0.5585, norm(attn): 0.1357, norm(output): 0.9980, norm(x): 0.9563, norm(y): 1.0046, norm:22.0362, tok/sec: 101188.86, flops:106.21, batch-reuse:1
@ 412 train 7.7709 , allloss: 13.7753, dt: 1300.93ms, fracRes: 0.5699, norm(attn): 0.1328, norm(output): 0.9980, norm(x): 0.9627, norm(y): 1.0047, norm:22.7645, tok/sec: 100752.89, flops:105.75, batch-reuse:1
@ 413 train 7.5480 , allloss: 12.4222, dt: 1302.68ms, fracRes: 0.5903, norm(attn): 0.1240, norm(output): 0.9980, norm(x): 0.9624, norm(y): 1.0048, norm:21.8650, tok/sec: 100617.57, flops:105.61, batch-reuse:1
@ 414 train 7.7153 , allloss: 12.0232, dt: 1305.01ms, fracRes: 0.5985, norm(attn): 0.1221, norm(output): 0.9979, norm(x): 0.9558, norm(y): 1.0048, norm:20.4310, tok/sec: 100437.63, flops:105.42, batch-reuse:1
@ 415 train 7.6294 , allloss: 12.7637, dt: 1332.60ms, fracRes: 0.6063, norm(attn): 0.1182, norm(output): 0.9979, norm(x): 0.9502, norm(y): 1.0048, norm:27.3267, tok/sec: 98358.39, flops:103.24, batch-reuse:1
@ 416 train 7.7442 , allloss: 11.8594, dt: 1312.14ms, fracRes: 0.6132, norm(attn): 0.1147, norm(output): 0.9979, norm(x): 0.9454, norm(y): 1.0049, norm:35.2148, tok/sec: 99892.07, flops:104.85, batch-reuse:1
@ 417 train 7.6928 , allloss: 11.0097, dt: 1306.38ms, fracRes: 0.6044, norm(attn): 0.1201, norm(output): 0.9979, norm(x): 0.9479, norm(y): 1.0051, norm:31.4993, tok/sec: 100332.47, flops:105.31, batch-reuse:1
@ 418 train 7.7728 , allloss: 10.4011, dt: 1325.02ms, fracRes: 0.6046, norm(attn): 0.1167, norm(output): 0.9979, norm(x): 0.9557, norm(y): 1.0052, norm:12.1559, tok/sec: 98920.77, flops:103.83, batch-reuse:1
@ 419 train 7.7129 , allloss: 8.6305, dt: 1296.38ms, fracRes: 0.6225, norm(attn): 0.1030, norm(output): 0.9978, norm(x): 0.9535, norm(y): 1.0052, norm:2.8630, tok/sec: 101105.97, flops:106.12, batch-reuse:1
@ 420 train 7.6396 , allloss: 9.0484, dt: 1299.57ms, fracRes: 0.6386, norm(attn): 0.0923, norm(output): 0.9978, norm(x): 0.9631, norm(y): 1.0050, norm:5.5594, tok/sec: 100857.91, flops:105.86, batch-reuse:1
@ 421 train 7.8029 , allloss: 10.4910, dt: 1315.15ms, fracRes: 0.6488, norm(attn): 0.0859, norm(output): 0.9978, norm(x): 0.9809, norm(y): 1.0049, norm:12.5353, tok/sec: 99663.50, flops:104.61, batch-reuse:1
@ 422 train 7.7388 , allloss: 9.6645, dt: 1306.59ms, fracRes: 0.6525, norm(attn): 0.0884, norm(output): 0.9977, norm(x): 0.9886, norm(y): 1.0050, norm:7.0597, tok/sec: 100315.85, flops:105.29, batch-reuse:1
@ 423 train 7.7833 , allloss: 8.7268, dt: 1329.89ms, fracRes: 0.6601, norm(attn): 0.0850, norm(output): 0.9977, norm(x): 0.9917, norm(y): 1.0050, norm:2.0578, tok/sec: 98558.61, flops:103.45, batch-reuse:1
@ 424 train 7.6836 , allloss: 8.6658, dt: 1326.33ms, fracRes: 0.6600, norm(attn): 0.0874, norm(output): 0.9977, norm(x): 0.9903, norm(y): 1.0051, norm:2.1056, tok/sec: 98822.79, flops:103.73, batch-reuse:1
@ 425 train 7.7345 , allloss: 9.0208, dt: 1304.84ms, fracRes: 0.6527, norm(attn): 0.0923, norm(output): 0.9977, norm(x): 0.9905, norm(y): 1.0052, norm:4.8930, tok/sec: 100450.59, flops:105.44, batch-reuse:1
@ 426 train 7.6267 , allloss: 9.2200, dt: 1302.62ms, fracRes: 0.6521, norm(attn): 0.0952, norm(output): 0.9977, norm(x): 0.9897, norm(y): 1.0053, norm:4.3455, tok/sec: 100621.72, flops:105.62, batch-reuse:1
@ 427 train 7.7203 , allloss: 10.3589, dt: 1312.19ms, fracRes: 0.6491, norm(attn): 0.0996, norm(output): 0.9977, norm(x): 0.9910, norm(y): 1.0053, norm:8.3929, tok/sec: 99888.30, flops:104.85, batch-reuse:1
@ 428 train 7.6854 , allloss: 10.4152, dt: 1321.71ms, fracRes: 0.6461, norm(attn): 0.1035, norm(output): 0.9977, norm(x): 0.9906, norm(y): 1.0054, norm:15.5408, tok/sec: 99168.33, flops:104.09, batch-reuse:1
@ 429 train 7.6441 , allloss: 10.2383, dt: 1330.73ms, fracRes: 0.6404, norm(attn): 0.1094, norm(output): 0.9977, norm(x): 0.9902, norm(y): 1.0055, norm:11.2808, tok/sec: 98496.62, flops:103.39, batch-reuse:1
@ 430 train 7.7233 , allloss: 8.7267, dt: 1311.48ms, fracRes: 0.6619, norm(attn): 0.0962, norm(output): 0.9976, norm(x): 0.9895, norm(y): 1.0055, norm:2.3310, tok/sec: 99942.41, flops:104.90, batch-reuse:1
@ 431 train 7.6936 , allloss: 9.0325, dt: 1316.86ms, fracRes: 0.6499, norm(attn): 0.1025, norm(output): 0.9977, norm(x): 0.9879, norm(y): 1.0056, norm:3.6714, tok/sec: 99533.78, flops:104.47, batch-reuse:1
@ 432 train 7.7105 , allloss: 8.9572, dt: 1330.51ms, fracRes: 0.6617, norm(attn): 0.0952, norm(output): 0.9976, norm(x): 0.9836, norm(y): 1.0056, norm:3.0698, tok/sec: 98512.66, flops:103.40, batch-reuse:1
@ 433 train 7.7217 , allloss: 9.8587, dt: 1314.15ms, fracRes: 0.6595, norm(attn): 0.0991, norm(output): 0.9976, norm(x): 0.9774, norm(y): 1.0056, norm:5.1735, tok/sec: 99739.30, flops:104.69, batch-reuse:1
@ 434 train 7.7518 , allloss: 8.7344, dt: 1292.01ms, fracRes: 0.7040, norm(attn): 0.0742, norm(output): 0.9976, norm(x): 0.9746, norm(y): 1.0055, norm:2.8138, tok/sec: 101448.37, flops:106.48, batch-reuse:1
@ 435 train 7.7043 , allloss: 9.4524, dt: 1323.51ms, fracRes: 0.6891, norm(attn): 0.0840, norm(output): 0.9976, norm(x): 0.9793, norm(y): 1.0055, norm:6.9056, tok/sec: 99033.35, flops:103.95, batch-reuse:1
@ 436 train 7.8038 , allloss: 12.6771, dt: 1297.52ms, fracRes: 0.6272, norm(attn): 0.1260, norm(output): 0.9976, norm(x): 0.9847, norm(y): 1.0058, norm:15.6578, tok/sec: 101017.16, flops:106.03, batch-reuse:1
@ 437 train 7.7252 , allloss: 14.4988, dt: 1305.58ms, fracRes: 0.5456, norm(attn): 0.1797, norm(output): 0.9976, norm(x): 0.9820, norm(y): 1.0061, norm:23.5218, tok/sec: 100393.74, flops:105.38, batch-reuse:1
@ 438 train 7.8371 , allloss: 14.7976, dt: 1330.11ms, fracRes: 0.4644, norm(attn): 0.2480, norm(output): 0.9977, norm(x): 0.9826, norm(y): 1.0063, norm:34.4899, tok/sec: 98542.26, flops:103.43, batch-reuse:1
@ 439 train 7.6574 , allloss: 15.0131, dt: 1313.77ms, fracRes: 0.4014, norm(attn): 0.3105, norm(output): 0.9977, norm(x): 0.9828, norm(y): 1.0064, norm:231.7669, tok/sec: 99767.64, flops:104.72, batch-reuse:1
@ 440 train 7.6515 , allloss: 13.4292, dt: 1307.19ms, fracRes: 0.3884, norm(attn): 0.3457, norm(output): 0.9977, norm(x): 0.9780, norm(y): 1.0063, norm:49.0278, tok/sec: 100270.05, flops:105.25, batch-reuse:1
@ 441 train 7.7032 , allloss: 14.7812, dt: 1306.73ms, fracRes: 0.3575, norm(attn): 0.3750, norm(output): 0.9976, norm(x): 0.9866, norm(y): 1.0062, norm:47.4942, tok/sec: 100305.27, flops:105.28, batch-reuse:1
@ 442 train 7.7618 , allloss: 17.0089, dt: 1304.47ms, fracRes: 0.4066, norm(attn): 0.3652, norm(output): 0.9975, norm(x): 0.9852, norm(y): 1.0060, norm:345.8922, tok/sec: 100479.34, flops:105.47, batch-reuse:1
@ 443 train 7.7719 , allloss: 16.8434, dt: 1307.24ms, fracRes: 0.4227, norm(attn): 0.3418, norm(output): 0.9976, norm(x): 0.9943, norm(y): 1.0063, norm:47.8541, tok/sec: 100266.14, flops:105.24, batch-reuse:1
@ 444 train 7.8131 , allloss: 21.6045, dt: 1294.31ms, fracRes: 0.4133, norm(attn): 0.3242, norm(output): 0.9976, norm(x): 0.9941, norm(y): 1.0064, norm:45.7231, tok/sec: 101267.79, flops:106.29, batch-reuse:1
@ 445 train 7.6820 , allloss: 22.2415, dt: 1313.73ms, fracRes: 0.4122, norm(attn): 0.3262, norm(output): 0.9975, norm(x): 0.9943, norm(y): 1.0064, norm:46.7580, tok/sec: 99770.56, flops:104.72, batch-reuse:1
@ 446 train 7.7341 , allloss: 21.6414, dt: 1314.93ms, fracRes: 0.4129, norm(attn): 0.3301, norm(output): 0.9976, norm(x): 0.9942, norm(y): 1.0065, norm:50.9787, tok/sec: 99679.82, flops:104.63, batch-reuse:1
@ 447 train 7.7253 , allloss: 19.2340, dt: 1321.17ms, fracRes: 0.4193, norm(attn): 0.3438, norm(output): 0.9976, norm(x): 0.9942, norm(y): 1.0065, norm:48.7152, tok/sec: 99208.99, flops:104.13, batch-reuse:1
@ 448 train 7.7120 , allloss: 23.2320, dt: 1296.85ms, fracRes: 0.4065, norm(attn): 0.3555, norm(output): 0.9977, norm(x): 0.9942, norm(y): 1.0066, norm:55.9261, tok/sec: 101069.89, flops:106.09, batch-reuse:1
@ 449 train 7.6493 , allloss: 23.3001, dt: 1303.47ms, fracRes: 0.4205, norm(attn): 0.3633, norm(output): 0.9975, norm(x): 0.9949, norm(y): 1.0063, norm:51.4904, tok/sec: 100556.45, flops:105.55, batch-reuse:1
@ 450 train 7.7271 , allloss: 29.6048, dt: 1335.45ms, fracRes: 0.3915, norm(attn): 0.3867, norm(output): 0.9974, norm(x): 0.9950, norm(y): 1.0062, norm:45.7271, tok/sec: 98148.47, flops:103.02, batch-reuse:1
@ 451 train 7.7057 , allloss: 35.9157, dt: 1308.90ms, fracRes: 0.3655, norm(attn): 0.4102, norm(output): 0.9974, norm(x): 0.9948, norm(y): 1.0062, norm:80.5808, tok/sec: 100139.37, flops:105.11, batch-reuse:1
@ 452 train 7.7418 , allloss: 49.0599, dt: 1309.25ms, fracRes: 0.3697, norm(attn): 0.4141, norm(output): 0.9974, norm(x): 0.9861, norm(y): 1.0062, norm:314.1987, tok/sec: 100112.16, flops:105.08, batch-reuse:1
@ 453 train 7.7390 , allloss: 47.7429, dt: 1329.25ms, fracRes: 0.3750, norm(attn): 0.4238, norm(output): 0.9975, norm(x): 0.9522, norm(y): 1.0061, norm:257.8663, tok/sec: 98605.76, flops:103.50, batch-reuse:1
@ 454 train 7.7277 , allloss: 35.5767, dt: 1319.20ms, fracRes: 0.3963, norm(attn): 0.4258, norm(output): 0.9976, norm(x): 0.9700, norm(y): 1.0058, norm:45.6577, tok/sec: 99357.29, flops:104.29, batch-reuse:1
@ 455 train 7.7772 , allloss: 32.6592, dt: 1305.51ms, fracRes: 0.4076, norm(attn): 0.4434, norm(output): 0.9975, norm(x): 0.9724, norm(y): 1.0057, norm:36.1683, tok/sec: 100399.29, flops:105.38, batch-reuse:1
@ 456 train 7.7172 , allloss: 25.8252, dt: 1323.18ms, fracRes: 0.4614, norm(attn): 0.4102, norm(output): 0.9976, norm(x): 0.9679, norm(y): 1.0056, norm:41.2388, tok/sec: 99058.44, flops:103.97, batch-reuse:1
@ 457 train 7.8064 , allloss: 22.0000, dt: 1325.68ms, fracRes: 0.4870, norm(attn): 0.4043, norm(output): 0.9976, norm(x): 0.9682, norm(y): 1.0055, norm:40.2468, tok/sec: 98871.47, flops:103.78, batch-reuse:1
@ 458 train 7.8065 , allloss: 23.3598, dt: 1302.57ms, fracRes: 0.4701, norm(attn): 0.4277, norm(output): 0.9975, norm(x): 0.9689, norm(y): 1.0056, norm:40.3732, tok/sec: 100625.83, flops:105.62, batch-reuse:1
@ 459 train 7.6915 , allloss: 22.0981, dt: 1294.08ms, fracRes: 0.4521, norm(attn): 0.4531, norm(output): 0.9976, norm(x): 0.9541, norm(y): 1.0059, norm:36.0064, tok/sec: 101286.25, flops:106.31, batch-reuse:1
@ 460 train 7.6616 , allloss: 21.8906, dt: 1288.93ms, fracRes: 0.4251, norm(attn): 0.4609, norm(output): 0.9974, norm(x): 0.9650, norm(y): 1.0061, norm:36.9960, tok/sec: 101690.84, flops:106.74, batch-reuse:1
@ 461 train 7.7118 , allloss: 20.6409, dt: 1303.90ms, fracRes: 0.4228, norm(attn): 0.4609, norm(output): 0.9975, norm(x): 0.9860, norm(y): 1.0063, norm:36.2334, tok/sec: 100523.05, flops:105.51, batch-reuse:1
@ 462 train 7.7488 , allloss: 22.1270, dt: 1325.06ms, fracRes: 0.4103, norm(attn): 0.4863, norm(output): 0.9973, norm(x): 0.9916, norm(y): 1.0061, norm:31.7862, tok/sec: 98918.15, flops:103.83, batch-reuse:1
@ 463 train 7.7280 , allloss: 20.8691, dt: 1302.13ms, fracRes: 0.4180, norm(attn): 0.4766, norm(output): 0.9973, norm(x): 0.9880, norm(y): 1.0061, norm:27.2023, tok/sec: 100659.56, flops:105.66, batch-reuse:1
@ 464 train 7.6672 , allloss: 19.8677, dt: 1310.03ms, fracRes: 0.4224, norm(attn): 0.4883, norm(output): 0.9974, norm(x): 0.9691, norm(y): 1.0061, norm:27.6504, tok/sec: 100052.98, flops:105.02, batch-reuse:1
@ 465 train 7.6600 , allloss: 19.6112, dt: 1318.10ms, fracRes: 0.4490, norm(attn): 0.4961, norm(output): 0.9976, norm(x): 0.9447, norm(y): 1.0060, norm:29.5007, tok/sec: 99440.07, flops:104.38, batch-reuse:1
@ 466 train 7.7096 , allloss: 20.3093, dt: 1325.08ms, fracRes: 0.4708, norm(attn): 0.5000, norm(output): 0.9978, norm(x): 0.9720, norm(y): 1.0058, norm:37.2802, tok/sec: 98916.07, flops:103.83, batch-reuse:1
@ 467 train 7.6541 , allloss: 20.9335, dt: 1311.58ms, fracRes: 0.4820, norm(attn): 0.4980, norm(output): 0.9978, norm(x): 0.9757, norm(y): 1.0056, norm:30.7435, tok/sec: 99934.05, flops:104.89, batch-reuse:1
@ 468 train 7.5834 , allloss: 20.0852, dt: 1327.33ms, fracRes: 0.4962, norm(attn): 0.4785, norm(output): 0.9979, norm(x): 0.9862, norm(y): 1.0056, norm:32.6929, tok/sec: 98748.68, flops:103.65, batch-reuse:1
@ 469 train 7.5779 , allloss: 20.5784, dt: 1310.20ms, fracRes: 0.4821, norm(attn): 0.5352, norm(output): 0.9978, norm(x): 0.9904, norm(y): 1.0056, norm:36.0043, tok/sec: 100039.60, flops:105.00, batch-reuse:1
@ 470 train 7.6627 , allloss: 20.1186, dt: 1300.48ms, fracRes: 0.4953, norm(attn): 0.5195, norm(output): 0.9978, norm(x): 0.9942, norm(y): 1.0055, norm:40.5816, tok/sec: 100787.52, flops:105.79, batch-reuse:1
@ 471 train 7.5495 , allloss: 20.3081, dt: 1286.11ms, fracRes: 0.4914, norm(attn): 0.5508, norm(output): 0.9977, norm(x): 0.9953, norm(y): 1.0054, norm:34.5808, tok/sec: 101913.75, flops:106.97, batch-reuse:1
@ 472 train 7.6721 , allloss: 19.6851, dt: 1280.57ms, fracRes: 0.4989, norm(attn): 0.5547, norm(output): 0.9976, norm(x): 0.9955, norm(y): 1.0053, norm:26.8810, tok/sec: 102354.38, flops:107.43, batch-reuse:1
@ 473 train 7.6638 , allloss: 20.9474, dt: 1301.97ms, fracRes: 0.4908, norm(attn): 0.6016, norm(output): 0.9973, norm(x): 0.9949, norm(y): 1.0051, norm:24.7270, tok/sec: 100672.08, flops:105.67, batch-reuse:1
@ 474 train 7.5926 , allloss: 20.6679, dt: 1319.93ms, fracRes: 0.4945, norm(attn): 0.6445, norm(output): 0.9970, norm(x): 0.9942, norm(y): 1.0049, norm:27.7932, tok/sec: 99302.55, flops:104.23, batch-reuse:1
@ 475 train 7.6036 , allloss: 21.3129, dt: 1297.84ms, fracRes: 0.4906, norm(attn): 0.6797, norm(output): 0.9969, norm(x): 0.9941, norm(y): 1.0049, norm:44.3815, tok/sec: 100992.61, flops:106.01, batch-reuse:1
@ 476 train 7.6232 , allloss: 21.8349, dt: 1299.50ms, fracRes: 0.4906, norm(attn): 0.6992, norm(output): 0.9970, norm(x): 0.9942, norm(y): 1.0050, norm:58.0204, tok/sec: 100863.22, flops:105.87, batch-reuse:1
@ 477 train 7.6807 , allloss: 23.7578, dt: 1304.62ms, fracRes: 0.4828, norm(attn): 0.7305, norm(output): 0.9970, norm(x): 0.9942, norm(y): 1.0050, norm:60.7117, tok/sec: 100467.25, flops:105.45, batch-reuse:1
@ 478 train 7.6516 , allloss: 21.4832, dt: 1313.89ms, fracRes: 0.4829, norm(attn): 0.7461, norm(output): 0.9970, norm(x): 0.9942, norm(y): 1.0050, norm:48.9908, tok/sec: 99758.66, flops:104.71, batch-reuse:1
@ 479 train 7.7552 , allloss: 18.7829, dt: 1298.75ms, fracRes: 0.4982, norm(attn): 0.7070, norm(output): 0.9971, norm(x): 0.9947, norm(y): 1.0051, norm:38.0242, tok/sec: 100921.62, flops:105.93, batch-reuse:1
@ 480 train 7.5777 , allloss: 20.3912, dt: 1326.14ms, fracRes: 0.4829, norm(attn): 0.7227, norm(output): 0.9973, norm(x): 0.9950, norm(y): 1.0053, norm:38.1191, tok/sec: 98837.45, flops:103.74, batch-reuse:1
@ 481 train 7.6487 , allloss: 19.1607, dt: 1310.26ms, fracRes: 0.4953, norm(attn): 0.6523, norm(output): 0.9978, norm(x): 0.9959, norm(y): 1.0058, norm:29.2198, tok/sec: 100035.03, flops:105.00, batch-reuse:1
@ 482 train 7.6337 , allloss: 20.3620, dt: 1301.59ms, fracRes: 0.4932, norm(attn): 0.6680, norm(output): 0.9980, norm(x): 0.9954, norm(y): 1.0061, norm:59.9116, tok/sec: 100701.42, flops:105.70, batch-reuse:1
@ 483 train 7.7027 , allloss: 20.8061, dt: 1294.57ms, fracRes: 0.4897, norm(attn): 0.6914, norm(output): 0.9979, norm(x): 0.9950, norm(y): 1.0061, norm:64.8050, tok/sec: 101247.86, flops:106.27, batch-reuse:1
@ 484 train 7.5768 , allloss: 18.0972, dt: 1339.10ms, fracRes: 0.5004, norm(attn): 0.6875, norm(output): 0.9978, norm(x): 0.9954, norm(y): 1.0060, norm:47.5004, tok/sec: 97880.95, flops:102.74, batch-reuse:1
@ 485 train 7.5629 , allloss: 17.9396, dt: 1308.90ms, fracRes: 0.4969, norm(attn): 0.6953, norm(output): 0.9978, norm(x): 0.9955, norm(y): 1.0059, norm:41.8672, tok/sec: 100138.91, flops:105.11, batch-reuse:1
@ 486 train 7.7109 , allloss: 17.4963, dt: 1299.57ms, fracRes: 0.5006, norm(attn): 0.6953, norm(output): 0.9978, norm(x): 0.9954, norm(y): 1.0060, norm:31.3474, tok/sec: 100857.97, flops:105.86, batch-reuse:1
@ 487 train 7.7190 , allloss: 17.2047, dt: 1299.22ms, fracRes: 0.4945, norm(attn): 0.7031, norm(output): 0.9978, norm(x): 0.9952, norm(y): 1.0061, norm:24.9139, tok/sec: 100885.10, flops:105.89, batch-reuse:1
@ 488 train 7.5844 , allloss: 16.8950, dt: 1315.67ms, fracRes: 0.4871, norm(attn): 0.7266, norm(output): 0.9978, norm(x): 0.9945, norm(y): 1.0062, norm:20.6130, tok/sec: 99623.69, flops:104.57, batch-reuse:1
@ 489 train 7.6394 , allloss: 16.2709, dt: 1333.05ms, fracRes: 0.4949, norm(attn): 0.7188, norm(output): 0.9978, norm(x): 0.9951, norm(y): 1.0062, norm:82.6095, tok/sec: 98324.54, flops:103.20, batch-reuse:1
@ 490 train 7.6275 , allloss: 15.9613, dt: 1323.16ms, fracRes: 0.5054, norm(attn): 0.6992, norm(output): 0.9979, norm(x): 0.9951, norm(y): 1.0063, norm:29.9466, tok/sec: 99059.69, flops:103.98, batch-reuse:1
@ 491 train 7.7178 , allloss: 16.1678, dt: 1314.33ms, fracRes: 0.4926, norm(attn): 0.7539, norm(output): 0.9979, norm(x): 0.9950, norm(y): 1.0063, norm:21.2733, tok/sec: 99724.98, flops:104.67, batch-reuse:1
@ 492 train 7.6722 , allloss: 15.9981, dt: 1326.65ms, fracRes: 0.4958, norm(attn): 0.7578, norm(output): 0.9979, norm(x): 0.9951, norm(y): 1.0063, norm:23.3474, tok/sec: 98798.97, flops:103.70, batch-reuse:1
@ 493 train 7.6456 , allloss: 15.7578, dt: 1313.50ms, fracRes: 0.4994, norm(attn): 0.7578, norm(output): 0.9979, norm(x): 0.9954, norm(y): 1.0063, norm:22.0632, tok/sec: 99788.43, flops:104.74, batch-reuse:1
@ 494 train 7.6075 , allloss: 15.2932, dt: 1300.07ms, fracRes: 0.4895, norm(attn): 0.7969, norm(output): 0.9978, norm(x): 0.9954, norm(y): 1.0063, norm:19.6161, tok/sec: 100819.57, flops:105.82, batch-reuse:1
@ 495 train 7.5519 , allloss: 13.9452, dt: 1288.90ms, fracRes: 0.4898, norm(attn): 0.7930, norm(output): 0.9978, norm(x): 0.9956, norm(y): 1.0063, norm:18.1747, tok/sec: 101692.92, flops:106.74, batch-reuse:1
@ 496 train 7.6496 , allloss: 12.8435, dt: 1326.85ms, fracRes: 0.4828, norm(attn): 0.8125, norm(output): 0.9978, norm(x): 0.9956, norm(y): 1.0063, norm:15.8335, tok/sec: 98783.99, flops:103.69, batch-reuse:1
@ 497 train 7.5488 , allloss: 11.7464, dt: 1312.32ms, fracRes: 0.4990, norm(attn): 0.7656, norm(output): 0.9977, norm(x): 0.9955, norm(y): 1.0063, norm:13.5010, tok/sec: 99878.15, flops:104.84, batch-reuse:1
@ 498 train 7.6934 , allloss: 12.0390, dt: 1324.67ms, fracRes: 0.5025, norm(attn): 0.7578, norm(output): 0.9977, norm(x): 0.9954, norm(y): 1.0063, norm:14.1603, tok/sec: 98946.74, flops:103.86, batch-reuse:1
@ 499 train 7.7139 , allloss: 12.6014, dt: 1315.72ms, fracRes: 0.5012, norm(attn): 0.7617, norm(output): 0.9976, norm(x): 0.9946, norm(y): 1.0062, norm:13.1905, tok/sec: 99619.61, flops:104.56, batch-reuse:1
@ 500 train 7.6362 , allloss: 13.6094, dt: 1295.15ms, fracRes: 0.4974, norm(attn): 0.7773, norm(output): 0.9975, norm(x): 0.9941, norm(y): 1.0062, norm:15.4183, tok/sec: 101202.30, flops:106.23, batch-reuse:1
@ 501 train 7.6308 , allloss: 13.9081, dt: 1292.41ms, fracRes: 0.4947, norm(attn): 0.7891, norm(output): 0.9975, norm(x): 0.9944, norm(y): 1.0062, norm:15.8380, tok/sec: 101416.54, flops:106.45, batch-reuse:1
@ 502 train 7.6970 , allloss: 14.2108, dt: 1301.20ms, fracRes: 0.4956, norm(attn): 0.7812, norm(output): 0.9975, norm(x): 0.9946, norm(y): 1.0062, norm:19.3494, tok/sec: 100731.90, flops:105.73, batch-reuse:1
@ 503 train 7.6569 , allloss: 13.8859, dt: 1306.27ms, fracRes: 0.4986, norm(attn): 0.7773, norm(output): 0.9975, norm(x): 0.9947, norm(y): 1.0062, norm:19.9865, tok/sec: 100340.93, flops:105.32, batch-reuse:1
@ 504 train 7.7061 , allloss: 14.7990, dt: 1329.96ms, fracRes: 0.4984, norm(attn): 0.7812, norm(output): 0.9974, norm(x): 0.9950, norm(y): 1.0061, norm:23.2440, tok/sec: 98553.17, flops:103.44, batch-reuse:1
@ 505 train 7.6201 , allloss: 14.6479, dt: 1313.85ms, fracRes: 0.5013, norm(attn): 0.7812, norm(output): 0.9974, norm(x): 0.9945, norm(y): 1.0061, norm:23.0016, tok/sec: 99761.63, flops:104.71, batch-reuse:1
@ 506 train 7.6298 , allloss: 15.1873, dt: 1310.85ms, fracRes: 0.4978, norm(attn): 0.7891, norm(output): 0.9974, norm(x): 0.9946, norm(y): 1.0061, norm:23.8856, tok/sec: 99989.84, flops:104.95, batch-reuse:1
@ 507 train 7.6826 , allloss: 15.8246, dt: 1329.09ms, fracRes: 0.4859, norm(attn): 0.8242, norm(output): 0.9974, norm(x): 0.9950, norm(y): 1.0061, norm:21.1540, tok/sec: 98618.11, flops:103.51, batch-reuse:1
@ 508 train 7.5952 , allloss: 15.6016, dt: 1326.78ms, fracRes: 0.5057, norm(attn): 0.7812, norm(output): 0.9974, norm(x): 0.9951, norm(y): 1.0061, norm:20.5765, tok/sec: 98789.21, flops:103.69, batch-reuse:1
@ 509 train 7.6232 , allloss: 15.9824, dt: 1307.15ms, fracRes: 0.4987, norm(attn): 0.8086, norm(output): 0.9974, norm(x): 0.9952, norm(y): 1.0061, norm:20.1066, tok/sec: 100272.81, flops:105.25, batch-reuse:1
@ 510 train 7.6117 , allloss: 16.4680, dt: 1331.60ms, fracRes: 0.4957, norm(attn): 0.8203, norm(output): 0.9974, norm(x): 0.9949, norm(y): 1.0061, norm:19.8720, tok/sec: 98431.97, flops:103.32, batch-reuse:1
@ 511 train 7.6753 , allloss: 16.8989, dt: 1328.09ms, fracRes: 0.5010, norm(attn): 0.8164, norm(output): 0.9973, norm(x): 0.9948, norm(y): 1.0060, norm:23.9930, tok/sec: 98691.86, flops:103.59, batch-reuse:1
@ 512 train 7.6293 , allloss: 17.2831, dt: 1307.34ms, fracRes: 0.5014, norm(attn): 0.8242, norm(output): 0.9972, norm(x): 0.9950, norm(y): 1.0059, norm:33.8682, tok/sec: 100258.55, flops:105.23, batch-reuse:1
@ 513 train 7.6313 , allloss: 17.1077, dt: 1302.04ms, fracRes: 0.4981, norm(attn): 0.8398, norm(output): 0.9971, norm(x): 0.9950, norm(y): 1.0059, norm:38.6258, tok/sec: 100666.77, flops:105.66, batch-reuse:1
@ 514 train 7.6171 , allloss: 17.7770, dt: 1303.53ms, fracRes: 0.5053, norm(attn): 0.8242, norm(output): 0.9972, norm(x): 0.9949, norm(y): 1.0060, norm:58.6209, tok/sec: 100551.38, flops:105.54, batch-reuse:1
@ 515 train 7.5806 , allloss: 17.4262, dt: 1292.64ms, fracRes: 0.4964, norm(attn): 0.8438, norm(output): 0.9972, norm(x): 0.9947, norm(y): 1.0060, norm:59.1033, tok/sec: 101398.60, flops:106.43, batch-reuse:1
@ 516 train 7.5769 , allloss: 17.3615, dt: 1320.09ms, fracRes: 0.5023, norm(attn): 0.8438, norm(output): 0.9972, norm(x): 0.9948, norm(y): 1.0060, norm:66.9577, tok/sec: 99290.18, flops:104.22, batch-reuse:1
@ 517 train 7.5681 , allloss: 17.2064, dt: 1305.67ms, fracRes: 0.5048, norm(attn): 0.8633, norm(output): 0.9971, norm(x): 0.9949, norm(y): 1.0059, norm:48.4944, tok/sec: 100387.05, flops:105.37, batch-reuse:1
@ 518 train 7.6570 , allloss: 18.0106, dt: 1292.87ms, fracRes: 0.5046, norm(attn): 0.8750, norm(output): 0.9970, norm(x): 0.9948, norm(y): 1.0058, norm:69.3430, tok/sec: 101380.44, flops:106.41, batch-reuse:1
@ 519 train 7.6087 , allloss: 18.1081, dt: 1314.16ms, fracRes: 0.5049, norm(attn): 0.8711, norm(output): 0.9970, norm(x): 0.9944, norm(y): 1.0059, norm:67.2398, tok/sec: 99738.44, flops:104.69, batch-reuse:1
@ 520 train 7.6707 , allloss: 16.9678, dt: 1298.33ms, fracRes: 0.5062, norm(attn): 0.8594, norm(output): 0.9971, norm(x): 0.9939, norm(y): 1.0059, norm:52.6789, tok/sec: 100954.17, flops:105.96, batch-reuse:1
@ 521 train 7.7260 , allloss: 17.3161, dt: 1297.03ms, fracRes: 0.5059, norm(attn): 0.8633, norm(output): 0.9971, norm(x): 0.9944, norm(y): 1.0059, norm:76.0857, tok/sec: 101055.49, flops:106.07, batch-reuse:1
@ 522 train 7.5870 , allloss: 17.1024, dt: 1316.08ms, fracRes: 0.5084, norm(attn): 0.8164, norm(output): 0.9972, norm(x): 0.9938, norm(y): 1.0060, norm:66.9337, tok/sec: 99593.01, flops:104.54, batch-reuse:1
@ 523 train 7.6774 , allloss: 16.7200, dt: 1304.47ms, fracRes: 0.5111, norm(attn): 0.7891, norm(output): 0.9973, norm(x): 0.9931, norm(y): 1.0061, norm:47.0551, tok/sec: 100479.01, flops:105.47, batch-reuse:1
@ 524 train 7.6169 , allloss: 17.1049, dt: 1315.34ms, fracRes: 0.5180, norm(attn): 0.7305, norm(output): 0.9973, norm(x): 0.9913, norm(y): 1.0062, norm:44.7183, tok/sec: 99648.40, flops:104.59, batch-reuse:1
@ 525 train 7.6355 , allloss: 21.6863, dt: 1296.53ms, fracRes: 0.5389, norm(attn): 0.6133, norm(output): 0.9973, norm(x): 0.9867, norm(y): 1.0064, norm:42.9668, tok/sec: 101094.78, flops:106.11, batch-reuse:1
@ 526 train 7.6488 , allloss: 25.7093, dt: 1311.22ms, fracRes: 0.5640, norm(attn): 0.4961, norm(output): 0.9973, norm(x): 0.9836, norm(y): 1.0065, norm:38.1267, tok/sec: 99961.62, flops:104.92, batch-reuse:1
@ 527 train 7.6458 , allloss: 27.8734, dt: 1320.73ms, fracRes: 0.5780, norm(attn): 0.4258, norm(output): 0.9973, norm(x): 0.9821, norm(y): 1.0066, norm:56.8277, tok/sec: 99242.25, flops:104.17, batch-reuse:1
@ 528 train 7.6360 , allloss: 24.9590, dt: 1330.29ms, fracRes: 0.5938, norm(attn): 0.3965, norm(output): 0.9973, norm(x): 0.9812, norm(y): 1.0067, norm:46.5602, tok/sec: 98528.92, flops:103.42, batch-reuse:1
@ 529 train 7.5758 , allloss: 23.3611, dt: 1308.87ms, fracRes: 0.6134, norm(attn): 0.3242, norm(output): 0.9973, norm(x): 0.9822, norm(y): 1.0068, norm:64.2385, tok/sec: 100141.61, flops:105.11, batch-reuse:1
@ 530 train 7.6878 , allloss: 21.1257, dt: 1307.76ms, fracRes: 0.6347, norm(attn): 0.2832, norm(output): 0.9972, norm(x): 0.9828, norm(y): 1.0069, norm:43.2131, tok/sec: 100226.27, flops:105.20, batch-reuse:1
@ 531 train 7.7027 , allloss: 19.2498, dt: 1333.23ms, fracRes: 0.6435, norm(attn): 0.2676, norm(output): 0.9972, norm(x): 0.9833, norm(y): 1.0069, norm:52.6052, tok/sec: 98311.49, flops:103.19, batch-reuse:1
@ 532 train 7.5513 , allloss: 15.6199, dt: 1327.83ms, fracRes: 0.6646, norm(attn): 0.2314, norm(output): 0.9972, norm(x): 0.9837, norm(y): 1.0070, norm:41.9021, tok/sec: 98711.66, flops:103.61, batch-reuse:1
@ 533 train 7.5977 , allloss: 14.7532, dt: 1308.51ms, fracRes: 0.6862, norm(attn): 0.1924, norm(output): 0.9971, norm(x): 0.9835, norm(y): 1.0071, norm:24.7727, tok/sec: 100168.60, flops:105.14, batch-reuse:1
@ 534 train 7.5508 , allloss: 14.7291, dt: 1329.81ms, fracRes: 0.7227, norm(attn): 0.1279, norm(output): 0.9971, norm(x): 0.9841, norm(y): 1.0072, norm:30.5086, tok/sec: 98564.64, flops:103.46, batch-reuse:1
@ 535 train 7.6231 , allloss: 14.8631, dt: 1324.00ms, fracRes: 0.7093, norm(attn): 0.1465, norm(output): 0.9971, norm(x): 0.9840, norm(y): 1.0071, norm:30.2772, tok/sec: 98996.67, flops:103.91, batch-reuse:1
@ 536 train 7.6041 , allloss: 15.1744, dt: 1303.64ms, fracRes: 0.6861, norm(attn): 0.1787, norm(output): 0.9971, norm(x): 0.9808, norm(y): 1.0071, norm:26.3772, tok/sec: 100542.72, flops:105.53, batch-reuse:1
@ 537 train 7.6052 , allloss: 15.9026, dt: 1343.38ms, fracRes: 0.6262, norm(attn): 0.2676, norm(output): 0.9972, norm(x): 0.9785, norm(y): 1.0069, norm:26.8635, tok/sec: 97568.46, flops:102.41, batch-reuse:1
@ 538 train 7.4582 , allloss: 16.0390, dt: 1329.97ms, fracRes: 0.6210, norm(attn): 0.2812, norm(output): 0.9972, norm(x): 0.9790, norm(y): 1.0069, norm:24.9123, tok/sec: 98552.55, flops:103.44, batch-reuse:1
@ 539 train 7.6091 , allloss: 16.1319, dt: 1299.38ms, fracRes: 0.5916, norm(attn): 0.3359, norm(output): 0.9972, norm(x): 0.9814, norm(y): 1.0068, norm:22.4052, tok/sec: 100873.00, flops:105.88, batch-reuse:1
@ 540 train 7.6662 , allloss: 17.1026, dt: 1305.69ms, fracRes: 0.5681, norm(attn): 0.3867, norm(output): 0.9972, norm(x): 0.9843, norm(y): 1.0066, norm:37.4413, tok/sec: 100385.45, flops:105.37, batch-reuse:1
@ 541 train 7.5522 , allloss: 16.9995, dt: 1303.92ms, fracRes: 0.5925, norm(attn): 0.3223, norm(output): 0.9972, norm(x): 0.9832, norm(y): 1.0068, norm:37.6335, tok/sec: 100521.34, flops:105.51, batch-reuse:1
@ 542 train 7.6801 , allloss: 17.0880, dt: 1304.57ms, fracRes: 0.5660, norm(attn): 0.4004, norm(output): 0.9972, norm(x): 0.9843, norm(y): 1.0067, norm:35.6606, tok/sec: 100471.66, flops:105.46, batch-reuse:1
@ 543 train 7.7362 , allloss: 16.6536, dt: 1324.83ms, fracRes: 0.5303, norm(attn): 0.5195, norm(output): 0.9971, norm(x): 0.9878, norm(y): 1.0064, norm:23.0556, tok/sec: 98934.92, flops:103.85, batch-reuse:1
@ 544 train 7.6445 , allloss: 16.3580, dt: 1293.28ms, fracRes: 0.5167, norm(attn): 0.6133, norm(output): 0.9970, norm(x): 0.9909, norm(y): 1.0063, norm:20.1461, tok/sec: 101348.29, flops:106.38, batch-reuse:1
@ 545 train 7.6289 , allloss: 16.2678, dt: 1296.39ms, fracRes: 0.5120, norm(attn): 0.6680, norm(output): 0.9969, norm(x): 0.9923, norm(y): 1.0062, norm:23.3033, tok/sec: 101105.00, flops:106.12, batch-reuse:1
@ 546 train 7.5895 , allloss: 16.3050, dt: 1300.43ms, fracRes: 0.5077, norm(attn): 0.7344, norm(output): 0.9968, norm(x): 0.9933, norm(y): 1.0061, norm:24.0260, tok/sec: 100790.90, flops:105.79, batch-reuse:1
@ 547 train 7.7263 , allloss: 16.3898, dt: 1319.96ms, fracRes: 0.5083, norm(attn): 0.7383, norm(output): 0.9968, norm(x): 0.9931, norm(y): 1.0061, norm:19.2152, tok/sec: 99300.11, flops:104.23, batch-reuse:1
@ 548 train 7.7129 , allloss: 16.7342, dt: 1302.96ms, fracRes: 0.5068, norm(attn): 0.7656, norm(output): 0.9967, norm(x): 0.9930, norm(y): 1.0061, norm:20.3347, tok/sec: 100595.57, flops:105.59, batch-reuse:1
@ 549 train 7.6877 , allloss: 16.9401, dt: 1323.65ms, fracRes: 0.5083, norm(attn): 0.7773, norm(output): 0.9967, norm(x): 0.9930, norm(y): 1.0062, norm:21.8495, tok/sec: 99023.41, flops:103.94, batch-reuse:1
tensor([[    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0012,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.8672,     0.0201,     0.1118,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.9961,     0.0000,     0.0038,     0.0001,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.9961,     0.0000,     0.0037,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0019,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.9375,     0.0005,     0.0361,     0.0012,     0.0018,     0.0000,     0.0223,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0047,     0.1250,     0.0138,     0.0801,     0.1621,     0.5938,     0.0178,     0.0046,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.7539,     0.0000,     0.0017,     0.0000,     0.0000,     0.0000,     0.0004,     0.2432,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.4355,     0.0019,     0.0361,     0.0067,     0.0056,     0.0005,     0.0435,     0.4609,     0.0014,     0.0087,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.7422,     0.0001,     0.0123,     0.0002,     0.0004,     0.0000,     0.0052,     0.2373,     0.0000,     0.0004,     0.0011,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.3574,     0.0080,     0.0986,     0.0159,     0.0398,     0.0027,     0.0625,     0.2832,     0.0122,     0.0215,     0.0352,     0.0625,     0.0000,     0.0000,     0.0000],
        [    0.2051,     0.0243,     0.0869,     0.0170,     0.0214,     0.0141,     0.0588,     0.2676,     0.0165,     0.0283,     0.1006,     0.0547,     0.1045,     0.0000,     0.0000],
        [    0.4609,     0.0004,     0.0183,     0.0012,     0.0010,     0.0000,     0.0115,     0.2236,     0.0000,     0.0010,     0.0017,     0.0062,     0.2695,     0.0038,     0.0000],
        [    0.0430,     0.0618,     0.0630,     0.0703,     0.0603,     0.0864,     0.0483,     0.0850,     0.0728,     0.1260,     0.0693,     0.0718,     0.0427,     0.0645,     0.0344]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0610,  0.0018, -0.0173,  ...,  0.0264,  0.0029,  0.0126],
        [-0.0477, -0.0023,  0.0121,  ...,  0.0046, -0.0250, -0.0453],
        [ 0.0061,  0.0399,  0.0208,  ..., -0.0243, -0.0068,  0.0029],
        ...,
        [-0.0009,  0.0146,  0.0274,  ..., -0.0075, -0.0360, -0.0325],
        [-0.0207, -0.0115,  0.0073,  ...,  0.0321, -0.0446, -0.0017],
        [-0.0205, -0.0013, -0.0220,  ...,  0.0003, -0.0463, -0.0037]], device='cuda:0', requires_grad=True)
K: tensor([-0.3086,  0.7656,  0.4668, -0.9961, -0.4512, -0.3105, -0.9375, -0.6719,  0.5000, -0.4570, -0.7148, -0.1143, -1.0312,  0.9336, -0.1709, -1.3672,  0.6250,  0.0874, -0.1206,  0.2969,  0.1289,  0.2793, -0.0103,  0.3438, -0.8359, -1.0859, -0.0201,  0.1572, -0.2734, -0.6289,  0.7695, -1.0391,
         0.5273, -0.8906, -0.4570, -0.3320, -0.7500, -1.0391,  0.1680, -0.0135, -0.5508,  0.1226, -0.1738,  0.3008,  0.4629, -0.3789,  0.4004, -0.4043,  0.1289, -0.5039,  1.2969,  0.0136, -0.8359,  0.4395,  0.0688, -0.7578, -1.3359, -1.3828,  0.3281,  0.4453,  0.3672,  0.0684,  1.0312, -0.0889],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0191, -0.0039,  0.0209,  ..., -0.0088, -0.0411, -0.0169],
        [ 0.0187, -0.0058, -0.0041,  ...,  0.0043, -0.0032,  0.0092],
        [ 0.0033,  0.0187,  0.0370,  ...,  0.0221,  0.0023, -0.0362],
        ...,
        [ 0.0054,  0.0270,  0.0114,  ...,  0.0070,  0.0113, -0.0174],
        [-0.0086,  0.0156, -0.0527,  ...,  0.0216, -0.0109,  0.0101],
        [ 0.0185,  0.0284, -0.0244,  ...,  0.0048,  0.0225,  0.0118]], device='cuda:0', requires_grad=True)
Q: tensor([    -0.0055,      0.2139,      0.5586,      1.1797,     -0.2578,     -0.2412,     -0.1235,      0.8828,     -0.5469,     -0.3457,     -0.3613,     -0.0771,      0.0352,      0.1318,     -0.0315,      0.0574,     -0.8359,      0.1338,     -0.5898,      0.3887,     -0.2949,     -0.2578,
            -0.5547,      0.6172,      0.3730,      0.2832,     -0.5039,     -0.1001,      0.8555,      0.2080,      0.5469,     -0.8789,      0.7500,      0.3633,     -0.0781,      0.7656,     -0.6484,      0.5000,     -0.0425,      0.0466,     -1.0859,     -0.4180,     -1.5859,     -0.2119,
            -0.2275,     -0.3105,     -0.4922,     -0.3262,      0.1680,     -0.0320,     -0.2871,     -0.9336,      0.6289,     -0.7070,     -0.2852,      0.6680,     -0.1270,      0.0000,     -0.7031,      0.8828,      0.6250,      0.1006,     -0.4004,     -0.2715], device='cuda:0',
       dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,     -6.7500,     -3.0469,     -5.9375,     -5.1875,     -9.6875,     -3.4375,     -0.6484,     -7.9062,     -5.4062,     -4.2812,     -4.1250,     -0.3281,     -3.8281,      1.8125],
        [     0.0000,     -3.7656,     -2.0469,     -3.1250,     -3.3281,     -4.7812,     -2.0469,     -0.6055,     -4.7500,     -3.0781,     -3.6875,     -2.7344,     -0.6094,     -2.2812,      0.7695],
        [     0.0000,    -10.0000,     -5.5938,     -9.0625,     -7.6875,    -14.1250,     -4.5000,     -0.4316,    -11.8750,     -8.3750,     -6.6562,     -5.8125,     -0.8477,     -5.7500,      2.5312],
        [     0.0000,    -11.6875,     -5.5938,    -10.3750,     -9.9375,    -16.8750,     -6.0938,     -0.5859,    -13.7500,     -9.6250,     -8.1250,     -7.3125,     -1.3203,     -7.0000,      3.2656],
        [     0.0000,    -13.3125,     -6.2812,    -11.7500,    -10.6875,    -19.3750,     -6.7500,     -1.4766,    -15.7500,    -10.8125,     -9.0625,     -8.7500,     -1.6094,     -8.1875,      3.0938],
        [     0.0000,     -7.5625,     -3.2500,     -6.6875,     -6.2812,    -11.1250,     -3.7344,     -0.2656,     -9.8750,     -6.3750,     -5.1250,     -5.1875,     -0.3203,     -5.1875,      1.7109],
        [     0.0000,      3.2812,      1.0781,      2.8281,      3.5469,      4.8438,      1.3359,     -0.0275,      4.5938,      2.6250,      3.1250,      2.7500,      0.4551,      2.4844,     -0.3555],
        [     0.0000,    -13.9375,     -6.0938,    -12.2500,    -11.6250,    -20.5000,     -7.4688,     -1.1328,    -17.1250,    -12.1250,     -9.9375,     -9.0000,     -0.9375,     -8.8750,      3.6562],
        [     0.0000,     -5.4375,     -2.4844,     -4.1875,     -4.3438,     -6.8438,     -2.2969,      0.0576,     -5.7500,     -3.9062,     -3.1094,     -2.9844,     -0.6445,     -3.1562,      1.1094],
        [     0.0000,     -9.2500,     -4.0938,     -8.0000,     -7.5000,    -13.1250,     -4.9688,     -1.1406,    -11.1875,     -7.6562,     -6.5000,     -5.8438,     -0.4570,     -5.5625,      2.1250],
        [     0.0000,     -3.7969,     -1.2891,     -3.1094,     -2.2031,     -4.9062,     -1.7422,     -0.2324,     -3.3750,     -2.8125,     -2.3281,     -1.7422,     -0.9258,     -1.2188,      0.7500],
        [     0.0000,     -2.1406,     -0.8555,     -2.4844,     -2.2656,     -2.6719,     -1.2500,      0.2656,     -2.5156,     -1.9844,     -0.7109,     -1.3203,     -0.6758,     -1.1094,      0.5781],
        [     0.0000,     -6.9688,     -3.2188,     -5.9688,     -6.1562,    -10.1250,     -3.6875,     -0.7266,     -9.3750,     -6.1562,     -5.6250,     -4.3125,     -0.5352,     -4.7812,      1.1797],
        [     0.0000,      0.3633,      0.3867,      0.4922,      0.3398,      0.7031,      0.1182,      0.6797,      0.5312,      1.0781,      0.4824,      0.5117,     -0.0033,      0.4082,     -0.2188]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.9997],
        [0.8841],
        [0.9844],
        [0.9889],
        [0.9909],
        [0.9440],
        [0.0047],
        [0.6370],
        [0.4659],
        [0.6359],
        [0.3715],
        [0.1073],
        [0.4329],
        [0.0536]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3750, 0.6250, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3086, 0.5586, 0.1318, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0986, 0.0413, 0.8555, 0.0038, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.2002, 0.2480, 0.1182, 0.2676, 0.1660, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1768, 0.0815, 0.4824, 0.0087, 0.1885, 0.0625, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1621, 0.0588, 0.3984, 0.0172, 0.2617, 0.0454, 0.0566, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1123, 0.0305, 0.5469, 0.0142, 0.1426, 0.0306, 0.0713, 0.0520, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1641, 0.0483, 0.4570, 0.0135, 0.1211, 0.0471, 0.0679, 0.0471, 0.0337, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1099, 0.0952, 0.0981, 0.1211, 0.1084, 0.0894, 0.1250, 0.0583, 0.0679, 0.1270, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1270, 0.0232, 0.4707, 0.0035, 0.1631, 0.0132, 0.0214, 0.0123, 0.0178, 0.1309, 0.0171, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1001, 0.0221, 0.5312, 0.0023, 0.1914, 0.0203, 0.0337, 0.0104, 0.0178, 0.0601, 0.0097, 0.0016, 0.0000, 0.0000, 0.0000],
        [0.0923, 0.0576, 0.1748, 0.0154, 0.1719, 0.0674, 0.0569, 0.0417, 0.0598, 0.1514, 0.0442, 0.0165, 0.0500, 0.0000, 0.0000],
        [0.1514, 0.0255, 0.4180, 0.0041, 0.1484, 0.0179, 0.0264, 0.0204, 0.0162, 0.0977, 0.0112, 0.0039, 0.0444, 0.0140, 0.0000],
        [0.0588, 0.0437, 0.0337, 0.0613, 0.0337, 0.0718, 0.0679, 0.1050, 0.0776, 0.0610, 0.0669, 0.1318, 0.0859, 0.0713, 0.0287]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0029, -0.0017,  0.0514,  ...,  0.0343, -0.0155,  0.0023],
        [ 0.0102,  0.0289, -0.0059,  ..., -0.0137,  0.0282,  0.0187],
        [ 0.0174,  0.0098, -0.0100,  ..., -0.0108, -0.0370, -0.0099],
        ...,
        [-0.0381,  0.0192, -0.0026,  ..., -0.0091, -0.0380,  0.0127],
        [-0.0206, -0.0092,  0.0258,  ...,  0.0181, -0.0221,  0.0075],
        [ 0.0037, -0.0056, -0.0150,  ...,  0.0092, -0.0027, -0.0118]], device='cuda:0', requires_grad=True)
K: tensor([ 0.5039, -1.1797,  0.7461, -0.4004,  0.1582, -0.0269,  0.9023, -0.6211,  0.1455, -0.6875, -0.3242, -0.7891,  0.3184,  0.5352,  0.1021,  0.1108, -1.2969, -1.6719,  0.4238,  0.1992, -0.3125, -0.2832, -0.2891,  0.8359,  0.2676,  0.3965, -0.1099, -1.0312,  0.3984, -0.4688,  0.0054,  1.3594,
        -0.7734, -0.6445, -0.1196,  0.3887, -0.3496, -0.2598, -0.5352, -0.3340,  0.4551,  0.1387, -0.6328,  1.3984, -0.6445,  0.2969,  0.5898, -0.5078, -0.5742, -1.1094,  0.6758, -0.4844, -0.0981,  0.0151, -1.0078, -1.4766,  0.4102, -0.5547, -0.5859,  0.6602, -0.1357,  0.3965, -0.1777, -0.3262],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0491, -0.0346, -0.0214,  ..., -0.0033,  0.0023, -0.0078],
        [ 0.0254, -0.0105,  0.0208,  ...,  0.0008,  0.0297,  0.0396],
        [ 0.0092,  0.0325,  0.0073,  ...,  0.0027,  0.0073,  0.0172],
        ...,
        [ 0.0048, -0.0254,  0.0092,  ..., -0.0273, -0.0023,  0.0061],
        [ 0.0060,  0.0126,  0.0227,  ..., -0.0180,  0.0238,  0.0294],
        [-0.0057,  0.0116, -0.0087,  ...,  0.0411,  0.0027, -0.0171]], device='cuda:0', requires_grad=True)
Q: tensor([-0.8945,  0.0713, -0.3672,  0.0195,  0.5898, -0.1328,  0.2324,  0.3594, -0.6641, -0.6953, -0.5508,  0.4688, -0.1895, -1.0938,  0.8477,  0.7734, -0.0591,  1.3125,  0.7656,  0.8672,  0.1226,  0.3105, -0.4238,  0.0957, -0.1465,  0.9727,  0.4434,  0.9141,  0.0471, -0.1455, -0.3848, -0.5977,
         1.2109,  0.6055,  0.2812, -0.4980,  1.2188,  0.2559, -0.1543,  1.5703, -0.6016,  0.1592,  0.0781,  0.4844, -0.0508,  0.5312,  0.0317, -0.4746,  0.3457, -0.0077,  0.3789,  0.0024,  0.1377,  0.0659,  0.7891, -0.0039,  0.0386, -0.5312,  0.5625,  0.6133,  0.0305,  0.0513, -0.5625, -0.2812],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[     0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000,      0.0000],
        [     0.0000,      0.5078,      0.3398,     -0.3789,     -0.1641,      0.0598,     -0.2109,     -0.6719,     -0.4668,     -0.7461,     -0.1826,     -0.5312,     -0.8086,     -0.7227,      0.2617],
        [     0.0000,      0.5938,     -0.8516,      1.6328,     -0.0742,      1.5859,      0.6523,      1.8203,      1.1953,     -0.3984,      1.2188,      2.3906,      1.0078,      1.0078,     -0.8398],
        [     0.0000,     -0.8711,      2.1562,     -3.2500,      0.1670,     -1.2734,     -1.0391,     -1.9609,     -1.7891,     -0.0036,     -1.3828,     -3.2812,     -1.2031,     -2.0312,      1.4844],
        [     0.0000,      0.2119,     -0.5312,      0.2910,     -0.1914,      0.2422,      0.1719,      0.2852,     -0.0579,      0.1245,      0.1055,      0.5273,      0.6484,      0.2773,     -0.5508],
        [     0.0000,     -0.7695,      1.0078,     -3.0000,      0.0684,     -1.0391,     -1.5000,     -1.5469,     -1.1953,      0.4062,     -1.4219,     -2.8750,     -1.0625,     -1.1406,      1.1797],
        [     0.0000,     -1.0156,      0.8984,     -2.2500,      0.4805,     -1.2734,     -1.0547,     -1.2344,     -1.3047,      0.0684,     -0.6250,     -2.0312,     -0.6328,     -1.5078,      1.1484],
        [     0.0000,     -1.3047,      1.5859,     -2.0781,      0.2402,     -1.2969,     -0.4551,     -0.7695,     -0.6836,      0.1924,     -0.5820,     -1.4062,     -0.5664,     -0.9141,      1.0078],
        [     0.0000,     -1.2266,      1.0234,     -2.5000,     -0.3047,     -1.2500,     -0.8867,     -1.2500,     -1.5859,      0.0508,     -1.3516,     -2.2031,     -0.9453,     -1.4531,      0.9336],
        [     0.0000,     -0.1455,     -0.1133,      0.0957,     -0.0141,     -0.2090,      0.1260,     -0.6367,     -0.4805,      0.1426,      0.1904,      0.2520,     -0.7227,     -0.5547,     -0.4121],
        [     0.0000,     -1.7031,      1.3125,     -3.6094,      0.2480,     -2.2656,     -1.7812,     -2.3281,     -1.9609,      0.0284,     -2.0000,     -3.3438,     -1.6484,     -2.0938,      1.5703],
        [     0.0000,     -1.5078,      1.6719,     -3.7812,      0.6484,     -1.5938,     -1.0859,     -2.2656,     -1.7266,     -0.5117,     -2.3281,     -4.0938,     -1.7266,     -1.8828,      1.1875],
        [     0.0000,     -0.4707,      0.6406,     -1.7891,      0.6211,     -0.3125,     -0.4844,     -0.7891,     -0.4316,      0.4941,     -0.7344,     -1.7188,     -0.6094,     -0.6094,     -0.1338],
        [     0.0000,     -1.7812,      1.0156,     -3.6094,     -0.0223,     -2.1406,     -1.7500,     -2.0156,     -2.2344,     -0.4434,     -2.6094,     -3.6562,     -1.2344,     -2.3750,      0.9570],
        [     0.0000,     -0.2969,     -0.5625,      0.0408,     -0.5586,      0.2002,      0.1436,      0.5781,      0.2754,      0.0371,      0.1279,      0.8086,      0.3770,      0.1934,     -0.7188]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.4231],
        [0.2967],
        [0.2075],
        [0.1703],
        [0.1716],
        [0.1829],
        [0.1529],
        [0.1560],
        [0.1116],
        [0.1289],
        [0.1257],
        [0.1301],
        [0.1165],
        [0.0577]], device='cuda:0')
tensor([[    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.0074,     0.2832,     0.0515,     0.2236,     0.1226,     0.1157,     0.1699,     0.0256,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.2432,     0.0615,     0.0776,     0.0615,     0.0718,     0.0664,     0.0737,     0.0850,     0.0703,     0.0413,     0.0811,     0.0659,     0.0000,     0.0000,     0.0000],
        [    0.5781,     0.0255,     0.0381,     0.0190,     0.0498,     0.0439,     0.0422,     0.0371,     0.0439,     0.0177,     0.0413,     0.0277,     0.0359,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    0.6406,     0.0065,     0.0356,     0.0087,     0.0133,     0.0127,     0.0114,     0.0742,     0.0126,     0.0099,     0.0094,     0.0540,     0.0593,     0.0075,     0.0439]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0006,  0.0192,  0.0615,  ...,  0.0231, -0.0180, -0.0160],
        [ 0.0316,  0.0046,  0.0082,  ..., -0.0021,  0.0038, -0.0052],
        [-0.0024,  0.0136, -0.0124,  ..., -0.0034,  0.0402, -0.0061],
        ...,
        [ 0.0201, -0.0164,  0.0034,  ...,  0.0048, -0.0150, -0.0239],
        [-0.0133, -0.0013,  0.0264,  ..., -0.0263,  0.0250,  0.0027],
        [ 0.0364, -0.0446,  0.0192,  ..., -0.0170, -0.0100, -0.0204]], device='cuda:0', requires_grad=True)
K: tensor([ 0.2559, -2.0156,  1.8984,  0.3594, -0.9414, -0.0752,  0.2871, -0.1582, -1.1250,  1.0938, -0.6250, -1.5000,  1.5000, -0.4258,  1.6641, -0.4629,  0.7656,  0.7812,  0.6445, -1.5156,  1.6484, -0.5547,  1.8281, -0.2100, -0.3086, -0.1895, -0.8750,  1.2422, -0.1416,  0.7266, -1.3750, -1.6172,
         0.1670,  1.8281,  2.0312,  0.5000,  0.7344,  1.1172,  1.0156, -0.5391,  0.1445, -0.7734, -0.7578, -1.2109, -0.0688, -0.4883,  1.7500, -1.3828, -1.1328,  0.4336, -2.3906,  1.3047,  0.8047, -0.9336, -0.8398,  1.3203,  0.0845,  1.3672,  2.2812, -0.7578, -1.4844, -0.9766, -0.6172, -1.1641],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0179, -0.0110, -0.0199,  ...,  0.0152,  0.0058, -0.0058],
        [ 0.0127, -0.0068, -0.0256,  ..., -0.0042,  0.0268,  0.0306],
        [-0.0142, -0.0028, -0.0053,  ...,  0.0110, -0.0057, -0.0062],
        ...,
        [-0.0080,  0.0062, -0.0250,  ..., -0.0124,  0.0376,  0.0175],
        [-0.0045,  0.0209,  0.0053,  ..., -0.0238,  0.0094,  0.0342],
        [ 0.0169,  0.0111, -0.0271,  ...,  0.0199, -0.0233, -0.0118]], device='cuda:0', requires_grad=True)
Q: tensor([-0.7930, -0.9531, -0.9297,  0.1631, -0.7852,  0.3398,  0.1309,  0.1143,  0.0698, -0.0664,  0.6992,  0.7734, -0.4434,  0.2754, -0.9883,  0.5977,  0.0496, -0.3535, -0.4316, -0.3047, -1.0391,  0.3555, -2.1719, -0.2178, -0.6328,  0.1660, -0.2793, -0.2197,  0.2100, -0.0226,  1.1016,  0.5664,
        -1.2734, -0.0332, -0.7930,  0.0522, -0.4844,  0.6172, -0.8359, -0.3301,  0.7227,  0.5391, -0.3828, -0.6328,  0.5273, -0.0576, -0.5938,  1.0156,  0.4883,  0.3066,  0.8906, -0.2695, -0.7188,  0.1270,  0.2197, -0.0825,  0.0308,  0.0762,  0.5430,  1.0234,  0.9062,  0.1299,  0.8477,  0.2266],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[  0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
        [  0.0000, -62.0000, -35.2500, -56.7500, -50.5000, -50.2500, -54.2500, -23.1250, -51.2500, -47.5000, -58.7500, -24.2500, -24.7500, -61.5000, -24.5000],
        [  0.0000, -22.3750, -13.4375, -20.8750, -18.2500, -18.2500, -19.6250,  -9.3750, -18.6250, -18.1250, -21.1250, -10.0625, -10.0000, -22.2500, -10.2500],
        [  0.0000, -50.0000, -28.8750, -46.2500, -40.7500, -40.5000, -43.7500, -19.3750, -41.5000, -38.7500, -47.5000, -20.3750, -20.6250, -49.5000, -20.5000],
        [  0.0000, -61.7500, -35.5000, -57.0000, -50.2500, -50.0000, -54.0000, -23.5000, -51.2500, -47.5000, -58.7500, -24.7500, -25.0000, -61.2500, -24.7500],
        [  0.0000, -60.2500, -34.7500, -55.5000, -49.0000, -48.7500, -52.7500, -23.2500, -50.0000, -46.5000, -57.2500, -24.3750, -24.5000, -60.0000, -24.3750],
        [  0.0000, -62.0000, -35.5000, -57.0000, -50.5000, -50.2500, -54.2500, -23.6250, -51.2500, -47.7500, -59.0000, -24.7500, -25.0000, -61.5000, -24.8750],
        [  0.0000,   3.6406,   1.9375,   3.4062,   2.8125,   2.7500,   3.1250,   1.2422,   2.8906,   2.1875,   3.6406,   1.0703,   1.1016,   3.7969,   0.8086],
        [  0.0000, -60.7500, -35.0000, -56.0000, -49.5000, -49.2500, -53.0000, -23.3750, -50.2500, -46.7500, -57.7500, -24.5000, -24.7500, -60.2500, -24.6250],
        [  0.0000, -48.2500, -27.8750, -44.5000, -39.2500, -39.0000, -42.0000, -19.0000, -40.0000, -37.5000, -45.5000, -20.0000, -20.1250, -47.7500, -20.1250],
        [  0.0000, -65.5000, -37.2500, -60.0000, -53.2500, -53.0000, -57.0000, -24.3750, -54.0000, -50.0000, -62.0000, -25.6250, -25.8750, -65.0000, -25.6250],
        [  0.0000,  -1.3750,  -1.1406,  -1.3750,  -1.2188,  -1.3047,  -1.1953,  -1.0547,  -1.2422,  -1.7734,  -1.1016,  -1.3047,  -1.2344,  -1.2266,  -1.5469],
        [  0.0000,  -3.1250,  -2.7188,  -3.4062,  -2.4531,  -2.5781,  -2.6094,  -2.7500,  -2.5781,  -3.4844,  -2.6406,  -3.0312,  -2.7812,  -3.1250,  -3.1875],
        [  0.0000, -60.7500, -34.7500, -55.7500, -49.5000, -49.2500, -53.0000, -23.0000, -50.2500, -46.7500, -57.5000, -24.1250, -24.3750, -60.2500, -24.3750],
        [  0.0000,  -4.5938,  -2.8906,  -4.3125,  -3.8750,  -3.9219,  -4.0312,  -2.1562,  -3.9219,  -4.1562,  -4.2188,  -2.4688,  -2.3750,  -4.4375,  -2.6719]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [1.0000],
        [1.0000],
        [1.0000],
        [1.0000],
        [1.0000],
        [1.0000],
        [0.4299],
        [1.0000],
        [1.0000],
        [1.0000],
        [0.5734],
        [0.7117],
        [1.0000],
        [0.6982]], device='cuda:0')
tensor([[    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0007,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000],
        [    1.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0140,  0.0134, -0.0040,  ...,  0.0038, -0.0153, -0.0180],
        [-0.0126, -0.0044,  0.0340,  ...,  0.0125, -0.0082, -0.0070],
        [ 0.0281,  0.0273,  0.0246,  ..., -0.0260,  0.0011, -0.0160],
        ...,
        [ 0.0469,  0.0126,  0.0271,  ...,  0.0421, -0.0067, -0.0012],
        [-0.0015,  0.0026, -0.0354,  ..., -0.0273,  0.0245,  0.0054],
        [-0.0154, -0.0127,  0.0270,  ..., -0.0120,  0.0269,  0.0268]], device='cuda:0', requires_grad=True)
K: tensor([-2.7500, -3.7188, -2.3750, -1.5625, -2.0625,  3.3281,  3.2500,  3.0938,  3.1562,  2.5781,  1.8828,  1.5781, -2.4531, -2.3906, -3.0156, -2.5625,  3.2188, -2.2188, -2.7188, -2.4375,  2.8281, -3.0469, -0.6992,  2.3906,  1.9453,  2.2812,  3.1875,  4.1875, -1.8906,  0.2402,  2.7500,  1.5781,
        -2.4688, -1.9297, -1.0078, -1.5156,  3.0312, -3.5625, -1.0703, -1.6094,  2.0156,  2.8750, -3.2031, -1.3047,  3.2031,  3.3125, -2.2188,  2.6406,  2.5781, -2.9375,  2.9531, -2.5781,  3.5781, -3.0156, -2.0781, -2.5938, -3.6875, -3.3438,  4.2500, -0.0327,  1.8047,  1.6250, -0.0938, -3.5469],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0185, -0.0045,  0.0242,  ...,  0.0002, -0.0104, -0.0002],
        [-0.0253,  0.0099,  0.0394,  ..., -0.0210, -0.0082, -0.0102],
        [ 0.0296,  0.0148, -0.0174,  ...,  0.0210,  0.0443, -0.0057],
        ...,
        [-0.0583, -0.0200,  0.0174,  ...,  0.0042,  0.0145,  0.0029],
        [-0.0138, -0.0209, -0.0023,  ..., -0.0253,  0.0182,  0.0016],
        [ 0.0138, -0.0379,  0.0015,  ...,  0.0254, -0.0087,  0.0194]], device='cuda:0', requires_grad=True)
Q: tensor([ 2.9062,  3.0312,  2.3125,  1.1641,  2.1250, -3.6250, -3.2656, -2.8438, -2.5469, -2.2969, -2.3906, -1.4609,  1.9453,  2.7812,  3.1094,  2.6875, -2.8750,  3.0625,  2.5156,  4.1250, -2.1250,  4.0938,  1.7422, -3.3594, -2.6406, -2.4844, -2.7031, -2.6094,  1.5625, -0.7969, -2.9688, -2.7812,
         2.3750,  1.9609,  1.6094,  2.0781, -3.4688,  2.6875,  1.4688,  3.1094, -2.3281, -3.0625,  2.5469,  1.9922, -2.2188, -2.8750,  1.8516, -2.7812, -2.4219,  2.5938, -3.0000,  2.8125, -3.2500,  3.2812,  3.2344,  2.9688,  2.7344,  2.6562, -2.9531,  0.5938, -1.8047, -2.7656, -0.0053,  2.5781],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[  0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
        [  0.0000, -59.5000, -23.1250, -48.2500, -65.0000, -65.5000, -63.7500, -56.0000, -34.5000, -34.5000, -34.5000, -56.0000, -56.0000, -33.5000, -56.0000],
        [  0.0000, -18.7500,  -7.2500, -15.3125, -20.7500, -20.8750, -20.3750, -17.1250, -10.9375, -10.9375, -10.9375, -17.1250, -17.1250, -10.6250, -17.1250],
        [  0.0000, -46.7500, -18.1250, -38.0000, -51.0000, -51.5000, -50.2500, -43.5000, -27.1250, -27.0000, -27.0000, -43.5000, -43.5000, -26.3750, -43.5000],
        [  0.0000, -63.7500, -24.7500, -51.5000, -69.5000, -70.0000, -68.5000, -59.5000, -36.5000, -36.5000, -36.5000, -59.5000, -59.5000, -35.5000, -59.5000],
        [  0.0000, -63.5000, -24.6250, -51.2500, -69.5000, -70.0000, -68.0000, -59.2500, -36.2500, -36.2500, -36.2500, -59.2500, -59.2500, -35.2500, -59.2500],
        [  0.0000, -62.0000, -24.1250, -50.2500, -67.5000, -68.5000, -66.5000, -57.7500, -35.5000, -35.5000, -35.5000, -57.7500, -57.7500, -34.7500, -57.7500],
        [  0.0000, -53.7500, -20.3750, -43.0000, -58.0000, -58.5000, -57.0000, -53.2500, -32.0000, -32.0000, -32.0000, -53.2500, -53.2500, -31.1250, -53.2500],
        [  0.0000, -30.3750, -11.1875, -24.1250, -32.7500, -33.0000, -32.0000, -29.1250, -18.5000, -18.5000, -18.5000, -29.1250, -29.1250, -18.0000, -29.1250],
        [  0.0000, -30.3750, -11.1875, -24.1250, -32.7500, -33.0000, -32.0000, -29.1250, -18.5000, -18.5000, -18.5000, -29.1250, -29.1250, -18.0000, -29.1250],
        [  0.0000, -30.3750, -11.1875, -24.1250, -32.7500, -33.0000, -32.0000, -29.1250, -18.5000, -18.5000, -18.5000, -29.1250, -29.1250, -18.0000, -29.1250],
        [  0.0000, -53.7500, -20.3750, -43.0000, -58.0000, -58.5000, -57.0000, -53.2500, -32.0000, -31.8750, -31.8750, -53.2500, -53.2500, -31.1250, -53.2500],
        [  0.0000, -53.7500, -20.3750, -43.0000, -58.0000, -58.5000, -57.0000, -53.2500, -32.0000, -32.0000, -31.8750, -53.2500, -53.2500, -31.1250, -53.2500],
        [  0.0000, -29.5000, -10.8750, -23.3750, -31.8750, -32.0000, -31.2500, -28.3750, -18.0000, -18.0000, -18.0000, -28.3750, -28.3750, -17.5000, -28.3750],
        [  0.0000, -53.7500, -20.3750, -43.0000, -58.0000, -58.5000, -57.0000, -53.2500, -31.8750, -31.8750, -31.8750, -53.2500, -53.2500, -31.1250, -53.2500]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0')
tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0276, 0.9727, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.1367, 0.7266, 0.1357, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0223, 0.4277, 0.1416, 0.4082, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0052, 0.2578, 0.0542, 0.2051, 0.4766, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0032, 0.1748, 0.0327, 0.1367, 0.3184, 0.3340, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0029, 0.1338, 0.0265, 0.1079, 0.2305, 0.2451, 0.2539, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0452, 0.1387, 0.0776, 0.1250, 0.1924, 0.1924, 0.1982, 0.0295, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0305, 0.1484, 0.0540, 0.0972, 0.2139, 0.2061, 0.2158, 0.0079, 0.0250, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0298, 0.1455, 0.0527, 0.0947, 0.2090, 0.2012, 0.2109, 0.0078, 0.0244, 0.0244, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0291, 0.1416, 0.0515, 0.0928, 0.2041, 0.1963, 0.2061, 0.0076, 0.0238, 0.0238, 0.0239, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0369, 0.1138, 0.0635, 0.1025, 0.1572, 0.1572, 0.1621, 0.0242, 0.0525, 0.0525, 0.0525, 0.0243, 0.0000, 0.0000, 0.0000],
        [0.0361, 0.1113, 0.0620, 0.1001, 0.1543, 0.1533, 0.1582, 0.0237, 0.0510, 0.0513, 0.0513, 0.0237, 0.0237, 0.0000, 0.0000],
        [0.0298, 0.1357, 0.0510, 0.0894, 0.1943, 0.1855, 0.1953, 0.0079, 0.0240, 0.0240, 0.0240, 0.0079, 0.0079, 0.0232, 0.0000],
        [0.0337, 0.1035, 0.0576, 0.0933, 0.1436, 0.1426, 0.1475, 0.0221, 0.0476, 0.0479, 0.0479, 0.0221, 0.0221, 0.0464, 0.0221]], device='cuda:0', dtype=torch.bfloat16)
Kweights
tensor([[ 0.0171, -0.0379, -0.0164,  ...,  0.0400, -0.0113, -0.0051],
        [-0.0118,  0.0092, -0.0253,  ..., -0.0269, -0.0137, -0.0054],
        [-0.0198, -0.0149,  0.0409,  ..., -0.0388, -0.0275, -0.0057],
        ...,
        [ 0.0111, -0.0054,  0.0210,  ..., -0.0321, -0.0129, -0.0059],
        [ 0.0216,  0.0478, -0.0020,  ...,  0.0420, -0.0057, -0.0006],
        [ 0.0166, -0.0143, -0.0329,  ..., -0.0195, -0.0015, -0.0082]], device='cuda:0', requires_grad=True)
K: tensor([ 0.4043,  0.1689,  0.3203, -0.1230, -0.3906,  0.5273, -0.3926,  0.5586,  0.4199,  1.1406,  0.7500, -0.0879,  0.5039,  0.0327, -0.1196,  0.4961,  0.5469,  0.4004,  0.9609,  0.2393, -0.1226, -0.0603, -1.0312, -1.1328, -0.3848, -0.0107, -0.2158,  1.1094, -0.5859,  0.2021,  0.3008, -1.0703,
        -0.2197,  0.9844, -0.2969,  0.0776, -0.4941, -0.5000, -0.6445, -0.9141,  0.3340, -0.3574, -0.4004,  0.2559,  0.3066, -0.5078, -0.8008, -1.1016,  0.0090,  0.2188, -0.3535,  1.0781,  0.4434, -0.9453, -0.8516, -0.8555,  0.6094,  0.4141,  0.4336, -0.1416,  0.2451, -0.2471, -0.4629,  0.6602],
       device='cuda:0', dtype=torch.bfloat16)
Qweights
tensor([[-0.0044,  0.0145,  0.0086,  ..., -0.0559,  0.0182,  0.0037],
        [-0.0115, -0.0016,  0.0166,  ...,  0.0287, -0.0012,  0.0053],
        [ 0.0392,  0.0020,  0.0338,  ...,  0.0185,  0.0433, -0.0146],
        ...,
        [ 0.0230,  0.0200,  0.0045,  ..., -0.0154,  0.0052,  0.0166],
        [-0.0038, -0.0279, -0.0069,  ...,  0.0234, -0.0020, -0.0128],
        [ 0.0023, -0.0133, -0.0112,  ...,  0.0432,  0.0169,  0.0135]], device='cuda:0', requires_grad=True)
Q: tensor([-0.9414,  0.0752, -0.3828,  1.3203,  0.4727,  0.3340, -0.4648, -0.5742, -0.9023, -1.4844, -0.0586,  0.5195, -0.5430,  0.4395,  0.1270,  0.6484, -0.9570,  0.6406,  0.4297, -0.1875, -0.7656, -0.3164, -0.4805,  0.0835,  0.0645, -0.5234, -0.0576, -0.6250, -0.1270, -1.0781,  0.5742,  0.3594,
         1.2812, -0.1367,  0.6484, -0.5820, -1.2734,  0.7188, -0.5703,  0.3848,  0.3555,  0.2129,  0.0047, -1.1016, -2.0469, -0.0299, -0.1426, -0.8711, -0.0046,  0.8984,  0.1040,  1.2500, -0.4199, -0.1055, -0.3770,  0.4941, -0.1436, -0.4043,  0.5078, -0.1660,  0.0099,  0.9062,  0.5273, -1.0859],
       device='cuda:0', dtype=torch.bfloat16)
RAWVALUES
tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  3.5625,  2.1875,  3.3594,  4.0625,  4.1250,  4.1562, -0.4414,  1.0703,  1.0703,  1.0703, -0.4375, -0.4375,  1.0156, -0.4414],
        [ 0.0000,  1.6719, -0.0051,  1.4062,  1.5859,  1.5000,  1.6016, -0.5977, -1.1719, -1.1719, -1.1719, -0.5977, -0.5977, -1.1797, -0.6016],
        [ 0.0000,  2.9531,  1.8516,  2.9062,  3.2500,  3.3125,  3.3750, -0.2773,  0.4785,  0.4785,  0.4805, -0.2754, -0.2754,  0.4414, -0.2793],
        [ 0.0000,  3.9219,  2.3594,  3.6875,  4.5312,  4.5938,  4.6250, -0.6172,  1.1953,  1.1953,  1.1953, -0.6133, -0.6133,  1.1328, -0.6211],
        [ 0.0000,  4.0000,  2.3281,  3.7656,  4.5938,  4.6562,  4.6875, -0.5938,  1.1250,  1.1250,  1.1250, -0.5898, -0.5898,  1.0625, -0.5938],
        [ 0.0000,  3.8438,  2.2188,  3.6250,  4.3750,  4.4375,  4.4688, -0.7031,  0.9609,  0.9609,  0.9609, -0.6992, -0.6992,  0.8984, -0.7031],
        [ 0.0000,  1.1250,  0.5391,  1.0156,  1.4453,  1.4453,  1.4766, -0.4258,  0.3477,  0.3477,  0.3477, -0.4238, -0.4238,  0.3203, -0.4258],
        [ 0.0000,  1.5859,  0.5742,  1.1562,  1.9531,  1.9141,  1.9609, -1.3438, -0.1992, -0.1992, -0.1963, -1.3438, -1.3438, -0.2334, -1.3438],
        [ 0.0000,  1.5859,  0.5742,  1.1562,  1.9453,  1.9141,  1.9609, -1.3438, -0.1992, -0.1992, -0.1963, -1.3438, -1.3359, -0.2334, -1.3438],
        [ 0.0000,  1.5859,  0.5742,  1.1562,  1.9453,  1.9062,  1.9609, -1.3438, -0.1973, -0.1973, -0.1943, -1.3359, -1.3359, -0.2314, -1.3438],
        [ 0.0000,  1.1250,  0.5391,  1.0156,  1.4531,  1.4531,  1.4844, -0.4219,  0.3496,  0.3496,  0.3496, -0.4219, -0.4219,  0.3223, -0.4238],
        [ 0.0000,  1.1250,  0.5391,  1.0156,  1.4531,  1.4453,  1.4844, -0.4238,  0.3477,  0.3496,  0.3496, -0.4219, -0.4219,  0.3223, -0.4238],
        [ 0.0000,  1.5156,  0.5391,  1.0938,  1.8750,  1.8281,  1.8750, -1.3281, -0.2158, -0.2158, -0.2129, -1.3281, -1.3281, -0.2490, -1.3281],
        [ 0.0000,  1.1172,  0.5352,  1.0156,  1.4453,  1.4453,  1.4766, -0.4219,  0.3457,  0.3477,  0.3477, -0.4219, -0.4219,  0.3203, -0.4219]], device='cuda:0', dtype=torch.bfloat16)
========
RESW: tensor([[1.0000],
        [0.0226],
        [0.1423],
        [0.0229],
        [0.0052],
        [0.0033],
        [0.0028],
        [0.0199],
        [0.0477],
        [0.0431],
        [0.0396],
        [0.0163],
        [0.0155],
        [0.0356],
        [0.0142]], device='cuda:0')
rank 0 sample 0: A Poem for you! Roses are red, Potatoes are 
------
		(,:0.0542,:0.0425,:0.0425,:0.0425,:0.0542,:0.0542,:0.0425,:0.0542)
,
------
		(,:0.0425,:0.0425,:0.0425,:0.0542,:0.0542,:0.0425,:0.0542,:0.0425)
,,,,,,,,,,,,,,,
@ 550 train 7.6340 , allloss: 17.3047, dt: 1748.61ms, fracRes: 0.5081, norm(attn): 0.8008, norm(output): 0.9967, norm(x): 0.9927, norm(y): 1.0061, norm:27.9038, tok/sec: 74957.77, flops:78.68, batch-reuse:1
@ 551 train 7.6398 , allloss: 17.1945, dt: 1309.22ms, fracRes: 0.5088, norm(attn): 0.8086, norm(output): 0.9966, norm(x): 0.9921, norm(y): 1.0061, norm:26.5699, tok/sec: 100114.71, flops:105.08, batch-reuse:1
@ 552 train 7.5394 , allloss: 17.3116, dt: 1342.75ms, fracRes: 0.5035, norm(attn): 0.8164, norm(output): 0.9967, norm(x): 0.9900, norm(y): 1.0061, norm:35.1587, tok/sec: 97614.54, flops:102.46, batch-reuse:1
@ 553 train 7.6559 , allloss: 17.7985, dt: 1313.35ms, fracRes: 0.5115, norm(attn): 0.8008, norm(output): 0.9967, norm(x): 0.9902, norm(y): 1.0062, norm:44.7282, tok/sec: 99799.59, flops:104.75, batch-reuse:1
@ 554 train 7.6391 , allloss: 17.1158, dt: 1317.59ms, fracRes: 0.5074, norm(attn): 0.8242, norm(output): 0.9966, norm(x): 0.9906, norm(y): 1.0062, norm:37.1263, tok/sec: 99478.85, flops:104.42, batch-reuse:1
@ 555 train 7.5869 , allloss: 16.3434, dt: 1323.49ms, fracRes: 0.5111, norm(attn): 0.8125, norm(output): 0.9967, norm(x): 0.9903, norm(y): 1.0062, norm:29.0276, tok/sec: 99034.96, flops:103.95, batch-reuse:1
@ 556 train 7.5692 , allloss: 15.8822, dt: 1326.70ms, fracRes: 0.5137, norm(attn): 0.7891, norm(output): 0.9967, norm(x): 0.9896, norm(y): 1.0063, norm:29.7821, tok/sec: 98795.30, flops:103.70, batch-reuse:1
@ 557 train 7.6164 , allloss: 15.5135, dt: 1312.69ms, fracRes: 0.5169, norm(attn): 0.7695, norm(output): 0.9967, norm(x): 0.9882, norm(y): 1.0063, norm:25.6716, tok/sec: 99849.87, flops:104.81, batch-reuse:1
@ 558 train 7.7031 , allloss: 15.8035, dt: 1303.09ms, fracRes: 0.5193, norm(attn): 0.7539, norm(output): 0.9967, norm(x): 0.9873, norm(y): 1.0064, norm:33.4188, tok/sec: 100585.56, flops:105.58, batch-reuse:1
@ 559 train 7.8140 , allloss: 15.9237, dt: 1313.72ms, fracRes: 0.5132, norm(attn): 0.8047, norm(output): 0.9966, norm(x): 0.9896, norm(y): 1.0063, norm:37.3229, tok/sec: 99771.53, flops:104.72, batch-reuse:1
@ 560 train 7.7324 , allloss: 15.5012, dt: 1283.34ms, fracRes: 0.5140, norm(attn): 0.7969, norm(output): 0.9967, norm(x): 0.9888, norm(y): 1.0063, norm:25.4805, tok/sec: 102133.14, flops:107.20, batch-reuse:1
@ 561 train 7.8165 , allloss: 15.5817, dt: 1298.50ms, fracRes: 0.5114, norm(attn): 0.8125, norm(output): 0.9966, norm(x): 0.9900, norm(y): 1.0063, norm:22.1228, tok/sec: 100940.73, flops:105.95, batch-reuse:1
@ 562 train 7.6763 , allloss: 15.4058, dt: 1294.57ms, fracRes: 0.5157, norm(attn): 0.7812, norm(output): 0.9967, norm(x): 0.9876, norm(y): 1.0064, norm:25.3757, tok/sec: 101247.13, flops:106.27, batch-reuse:1
@ 563 train 7.7678 , allloss: 15.5980, dt: 1305.85ms, fracRes: 0.5141, norm(attn): 0.8008, norm(output): 0.9966, norm(x): 0.9887, norm(y): 1.0064, norm:22.0646, tok/sec: 100373.08, flops:105.35, batch-reuse:1
@ 564 train 7.6520 , allloss: 15.4537, dt: 1313.36ms, fracRes: 0.5517, norm(attn): 0.6094, norm(output): 0.9968, norm(x): 0.9768, norm(y): 1.0068, norm:22.8778, tok/sec: 99799.24, flops:104.75, batch-reuse:1
@ 565 train 7.5402 , allloss: 15.3983, dt: 1304.63ms, fracRes: 0.5790, norm(attn): 0.4980, norm(output): 0.9968, norm(x): 0.9695, norm(y): 1.0070, norm:22.3471, tok/sec: 100466.56, flops:105.45, batch-reuse:1
@ 566 train 7.7188 , allloss: 15.9066, dt: 1321.99ms, fracRes: 0.5992, norm(attn): 0.4238, norm(output): 0.9968, norm(x): 0.9610, norm(y): 1.0071, norm:19.8415, tok/sec: 99147.57, flops:104.07, batch-reuse:1
@ 567 train 7.7208 , allloss: 15.6863, dt: 1285.94ms, fracRes: 0.6171, norm(attn): 0.3809, norm(output): 0.9968, norm(x): 0.9469, norm(y): 1.0073, norm:17.9597, tok/sec: 101927.19, flops:106.99, batch-reuse:1
@ 568 train 7.7527 , allloss: 15.5660, dt: 1297.99ms, fracRes: 0.6405, norm(attn): 0.3203, norm(output): 0.9968, norm(x): 0.9364, norm(y): 1.0075, norm:21.3952, tok/sec: 100980.76, flops:105.99, batch-reuse:1
@ 569 train 7.7073 , allloss: 15.4702, dt: 1296.25ms, fracRes: 0.6581, norm(attn): 0.2734, norm(output): 0.9968, norm(x): 0.9253, norm(y): 1.0076, norm:19.3264, tok/sec: 101116.40, flops:106.14, batch-reuse:1
@ 570 train 7.7139 , allloss: 15.7670, dt: 1327.51ms, fracRes: 0.6822, norm(attn): 0.2412, norm(output): 0.9967, norm(x): 0.9357, norm(y): 1.0077, norm:20.1232, tok/sec: 98735.39, flops:103.64, batch-reuse:1
@ 571 train 7.6790 , allloss: 15.8718, dt: 1302.19ms, fracRes: 0.6884, norm(attn): 0.2295, norm(output): 0.9967, norm(x): 0.9334, norm(y): 1.0077, norm:17.4921, tok/sec: 100655.12, flops:105.65, batch-reuse:1
@ 572 train 7.6636 , allloss: 16.0629, dt: 1329.09ms, fracRes: 0.7122, norm(attn): 0.1846, norm(output): 0.9966, norm(x): 0.9454, norm(y): 1.0078, norm:20.8707, tok/sec: 98617.72, flops:103.51, batch-reuse:1
@ 573 train 7.6662 , allloss: 15.9494, dt: 1322.84ms, fracRes: 0.7378, norm(attn): 0.1299, norm(output): 0.9966, norm(x): 0.9671, norm(y): 1.0078, norm:15.8207, tok/sec: 99083.86, flops:104.00, batch-reuse:1
@ 574 train 7.6669 , allloss: 16.0295, dt: 1319.03ms, fracRes: 0.7476, norm(attn): 0.1001, norm(output): 0.9966, norm(x): 0.9783, norm(y): 1.0078, norm:18.9080, tok/sec: 99370.20, flops:104.30, batch-reuse:1
@ 575 train 7.6095 , allloss: 16.0477, dt: 1316.59ms, fracRes: 0.7497, norm(attn): 0.0854, norm(output): 0.9966, norm(x): 0.9812, norm(y): 1.0077, norm:18.1260, tok/sec: 99554.09, flops:104.50, batch-reuse:1
@ 576 train 7.5632 , allloss: 16.0232, dt: 1293.51ms, fracRes: 0.7368, norm(attn): 0.1001, norm(output): 0.9965, norm(x): 0.9621, norm(y): 1.0076, norm:15.4260, tok/sec: 101330.66, flops:106.36, batch-reuse:1
@ 577 train 7.6879 , allloss: 16.5604, dt: 1329.20ms, fracRes: 0.7042, norm(attn): 0.1699, norm(output): 0.9965, norm(x): 0.9283, norm(y): 1.0075, norm:15.4449, tok/sec: 98609.53, flops:103.50, batch-reuse:1
@ 578 train 7.6248 , allloss: 16.7444, dt: 1302.84ms, fracRes: 0.7091, norm(attn): 0.1572, norm(output): 0.9965, norm(x): 0.9214, norm(y): 1.0075, norm:16.0698, tok/sec: 100604.54, flops:105.60, batch-reuse:1
@ 579 train 7.6078 , allloss: 17.1378, dt: 1316.90ms, fracRes: 0.7399, norm(attn): 0.0879, norm(output): 0.9964, norm(x): 0.9597, norm(y): 1.0075, norm:20.5626, tok/sec: 99530.79, flops:104.47, batch-reuse:1
@ 580 train 7.6458 , allloss: 17.4076, dt: 1357.34ms, fracRes: 0.7504, norm(attn): 0.0620, norm(output): 0.9964, norm(x): 0.9830, norm(y): 1.0075, norm:22.1030, tok/sec: 96565.42, flops:101.36, batch-reuse:1
@ 581 train 7.5446 , allloss: 16.9524, dt: 1304.94ms, fracRes: 0.7522, norm(attn): 0.0601, norm(output): 0.9965, norm(x): 0.9860, norm(y): 1.0079, norm:20.2650, tok/sec: 100442.82, flops:105.43, batch-reuse:1
@ 582 train 7.5834 , allloss: 16.7512, dt: 1279.11ms, fracRes: 0.7524, norm(attn): 0.0645, norm(output): 0.9964, norm(x): 0.9850, norm(y): 1.0082, norm:17.0560, tok/sec: 102471.21, flops:107.56, batch-reuse:1
@ 583 train 7.6000 , allloss: 18.1569, dt: 1295.71ms, fracRes: 0.7524, norm(attn): 0.0674, norm(output): 0.9962, norm(x): 0.9846, norm(y): 1.0083, norm:19.4000, tok/sec: 101158.54, flops:106.18, batch-reuse:1
@ 584 train 7.6102 , allloss: 16.2589, dt: 1292.89ms, fracRes: 0.7523, norm(attn): 0.0771, norm(output): 0.9964, norm(x): 0.9853, norm(y): 1.0086, norm:19.8261, tok/sec: 101379.11, flops:106.41, batch-reuse:1
@ 585 train 7.5816 , allloss: 16.0430, dt: 1300.38ms, fracRes: 0.7523, norm(attn): 0.0820, norm(output): 0.9964, norm(x): 0.9862, norm(y): 1.0088, norm:18.0540, tok/sec: 100795.34, flops:105.80, batch-reuse:1
@ 586 train 7.6089 , allloss: 15.9161, dt: 1303.93ms, fracRes: 0.7522, norm(attn): 0.0840, norm(output): 0.9964, norm(x): 0.9867, norm(y): 1.0089, norm:17.6679, tok/sec: 100520.40, flops:105.51, batch-reuse:1
@ 587 train 7.5975 , allloss: 15.9789, dt: 1332.31ms, fracRes: 0.7521, norm(attn): 0.0811, norm(output): 0.9964, norm(x): 0.9873, norm(y): 1.0089, norm:19.1679, tok/sec: 98379.23, flops:103.26, batch-reuse:1
@ 588 train 7.5582 , allloss: 16.4229, dt: 1295.16ms, fracRes: 0.7516, norm(attn): 0.0776, norm(output): 0.9963, norm(x): 0.9879, norm(y): 1.0088, norm:18.6683, tok/sec: 101201.73, flops:106.22, batch-reuse:1
@ 589 train 7.5402 , allloss: 17.9936, dt: 1308.41ms, fracRes: 0.7483, norm(attn): 0.0791, norm(output): 0.9962, norm(x): 0.9834, norm(y): 1.0085, norm:18.8329, tok/sec: 100176.56, flops:105.15, batch-reuse:1
@ 590 train 7.5253 , allloss: 17.2343, dt: 1316.71ms, fracRes: 0.7481, norm(attn): 0.0728, norm(output): 0.9962, norm(x): 0.9848, norm(y): 1.0083, norm:17.7806, tok/sec: 99545.35, flops:104.49, batch-reuse:1
@ 591 train 7.4647 , allloss: 16.6421, dt: 1301.22ms, fracRes: 0.7503, norm(attn): 0.0669, norm(output): 0.9961, norm(x): 0.9831, norm(y): 1.0082, norm:18.9739, tok/sec: 100729.85, flops:105.73, batch-reuse:1
@ 592 train 7.4448 , allloss: 16.5038, dt: 1302.62ms, fracRes: 0.7521, norm(attn): 0.0645, norm(output): 0.9961, norm(x): 0.9877, norm(y): 1.0083, norm:21.0074, tok/sec: 100622.16, flops:105.62, batch-reuse:1
@ 593 train 7.4367 , allloss: 16.3666, dt: 1327.81ms, fracRes: 0.7522, norm(attn): 0.0659, norm(output): 0.9960, norm(x): 0.9875, norm(y): 1.0084, norm:21.1159, tok/sec: 98712.79, flops:103.61, batch-reuse:1
@ 594 train 7.5971 , allloss: 16.3973, dt: 1318.46ms, fracRes: 0.7521, norm(attn): 0.0640, norm(output): 0.9959, norm(x): 0.9873, norm(y): 1.0084, norm:17.7705, tok/sec: 99413.17, flops:104.35, batch-reuse:1
@ 595 train 7.4144 , allloss: 16.1120, dt: 1294.80ms, fracRes: 0.7522, norm(attn): 0.0625, norm(output): 0.9959, norm(x): 0.9867, norm(y): 1.0085, norm:15.5014, tok/sec: 101229.81, flops:106.25, batch-reuse:1
@ 596 train 7.3911 , allloss: 15.8393, dt: 1311.80ms, fracRes: 0.7522, norm(attn): 0.0640, norm(output): 0.9959, norm(x): 0.9863, norm(y): 1.0086, norm:13.4499, tok/sec: 99917.54, flops:104.88, batch-reuse:1
@ 597 train 7.3469 , allloss: 15.5520, dt: 1308.10ms, fracRes: 0.7522, norm(attn): 0.0654, norm(output): 0.9958, norm(x): 0.9864, norm(y): 1.0087, norm:14.3634, tok/sec: 100200.40, flops:105.17, batch-reuse:1
@ 598 train 7.4638 , allloss: 15.6043, dt: 1284.08ms, fracRes: 0.7522, norm(attn): 0.0674, norm(output): 0.9958, norm(x): 0.9866, norm(y): 1.0088, norm:15.1795, tok/sec: 102074.31, flops:107.14, batch-reuse:1
